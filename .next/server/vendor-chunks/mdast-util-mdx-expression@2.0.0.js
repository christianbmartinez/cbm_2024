"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/mdast-util-mdx-expression@2.0.0";
exports.ids = ["vendor-chunks/mdast-util-mdx-expression@2.0.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/mdast-util-mdx-expression@2.0.0/node_modules/mdast-util-mdx-expression/lib/index.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/mdast-util-mdx-expression@2.0.0/node_modules/mdast-util-mdx-expression/lib/index.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mdxExpressionFromMarkdown: () => (/* binding */ mdxExpressionFromMarkdown),\n/* harmony export */   mdxExpressionToMarkdown: () => (/* binding */ mdxExpressionToMarkdown)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(ssr)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/**\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n *\n * @typedef {import('../index.js').MdxFlowExpression} MdxFlowExpression\n * @typedef {import('../index.js').MdxTextExpression} MdxTextExpression\n */\n\n\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable MDX expressions\n * in markdown.\n *\n * When using the micromark syntax extension with `addResult`, nodes will have\n * a `data.estree` field set to an ESTree `Program` node.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable MDX expressions.\n */\nfunction mdxExpressionFromMarkdown() {\n  return {\n    enter: {\n      mdxFlowExpression: enterMdxFlowExpression,\n      mdxTextExpression: enterMdxTextExpression\n    },\n    exit: {\n      mdxFlowExpression: exitMdxExpression,\n      mdxFlowExpressionChunk: exitMdxExpressionData,\n      mdxTextExpression: exitMdxExpression,\n      mdxTextExpressionChunk: exitMdxExpressionData\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable MDX expressions\n * in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable MDX expressions.\n */\nfunction mdxExpressionToMarkdown() {\n  return {\n    handlers: {\n      mdxFlowExpression: handleMdxExpression,\n      mdxTextExpression: handleMdxExpression\n    },\n    unsafe: [\n      {character: '{', inConstruct: ['phrasing']},\n      {atBreak: true, character: '{'}\n    ]\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterMdxFlowExpression(token) {\n  this.enter({type: 'mdxFlowExpression', value: ''}, token)\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterMdxTextExpression(token) {\n  this.enter({type: 'mdxTextExpression', value: ''}, token)\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitMdxExpression(token) {\n  const value = this.resume()\n  const estree = token.estree\n  const node = this.stack[this.stack.length - 1]\n  ;(0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(node.type === 'mdxFlowExpression' || node.type === 'mdxTextExpression')\n  this.exit(token)\n  node.value = value\n\n  if (estree) {\n    node.data = {estree}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitMdxExpressionData(token) {\n  this.config.enter.data.call(this, token)\n  this.config.exit.data.call(this, token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {MdxFlowExpression | MdxTextExpression} node\n */\nfunction handleMdxExpression(node) {\n  const value = node.value || ''\n  return '{' + value + '}'\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vbWRhc3QtdXRpbC1tZHgtZXhwcmVzc2lvbkAyLjAuMC9ub2RlX21vZHVsZXMvbWRhc3QtdXRpbC1tZHgtZXhwcmVzc2lvbi9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQSxhQUFhLG1EQUFtRDtBQUNoRSxhQUFhLDhDQUE4QztBQUMzRCxhQUFhLDJDQUEyQztBQUN4RDtBQUNBLGFBQWEseUNBQXlDO0FBQ3RELGFBQWEsMENBQTBDO0FBQ3ZEO0FBQ0EsYUFBYSx5Q0FBeUM7QUFDdEQsYUFBYSx5Q0FBeUM7QUFDdEQ7O0FBRW1DOztBQUVuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsT0FBTyxhQUFhLDZCQUE2QjtBQUNqRCxPQUFPLDRCQUE0QjtBQUNuQztBQUNBO0FBQ0E7O0FBRUE7QUFDQSxVQUFVO0FBQ1YsVUFBVTtBQUNWO0FBQ0E7QUFDQSxjQUFjLHFDQUFxQztBQUNuRDtBQUNBOztBQUVBO0FBQ0EsVUFBVTtBQUNWLFVBQVU7QUFDVjtBQUNBO0FBQ0EsY0FBYyxxQ0FBcUM7QUFDbkQ7QUFDQTs7QUFFQTtBQUNBLFVBQVU7QUFDVixVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsMkNBQU07QUFDUjtBQUNBOztBQUVBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7O0FBRUE7QUFDQSxVQUFVO0FBQ1YsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxVQUFVO0FBQ1YsV0FBVyx1Q0FBdUM7QUFDbEQ7QUFDQTtBQUNBO0FBQ0EsV0FBVyxjQUFjO0FBQ3pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2JtXzIwMjQvLi9ub2RlX21vZHVsZXMvLnBucG0vbWRhc3QtdXRpbC1tZHgtZXhwcmVzc2lvbkAyLjAuMC9ub2RlX21vZHVsZXMvbWRhc3QtdXRpbC1tZHgtZXhwcmVzc2lvbi9saWIvaW5kZXguanM/NzljOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21kYXN0LXV0aWwtZnJvbS1tYXJrZG93bicpLkNvbXBpbGVDb250ZXh0fSBDb21waWxlQ29udGV4dFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QtdXRpbC1mcm9tLW1hcmtkb3duJykuRXh0ZW5zaW9ufSBGcm9tTWFya2Rvd25FeHRlbnNpb25cbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21kYXN0LXV0aWwtZnJvbS1tYXJrZG93bicpLkhhbmRsZX0gRnJvbU1hcmtkb3duSGFuZGxlXG4gKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QtdXRpbC10by1tYXJrZG93bicpLkhhbmRsZX0gVG9NYXJrZG93bkhhbmRsZVxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QtdXRpbC10by1tYXJrZG93bicpLk9wdGlvbnN9IFRvTWFya2Rvd25FeHRlbnNpb25cbiAqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi9pbmRleC5qcycpLk1keEZsb3dFeHByZXNzaW9ufSBNZHhGbG93RXhwcmVzc2lvblxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vaW5kZXguanMnKS5NZHhUZXh0RXhwcmVzc2lvbn0gTWR4VGV4dEV4cHJlc3Npb25cbiAqL1xuXG5pbXBvcnQge29rIGFzIGFzc2VydH0gZnJvbSAnZGV2bG9wJ1xuXG4vKipcbiAqIENyZWF0ZSBhbiBleHRlbnNpb24gZm9yIGBtZGFzdC11dGlsLWZyb20tbWFya2Rvd25gIHRvIGVuYWJsZSBNRFggZXhwcmVzc2lvbnNcbiAqIGluIG1hcmtkb3duLlxuICpcbiAqIFdoZW4gdXNpbmcgdGhlIG1pY3JvbWFyayBzeW50YXggZXh0ZW5zaW9uIHdpdGggYGFkZFJlc3VsdGAsIG5vZGVzIHdpbGwgaGF2ZVxuICogYSBgZGF0YS5lc3RyZWVgIGZpZWxkIHNldCB0byBhbiBFU1RyZWUgYFByb2dyYW1gIG5vZGUuXG4gKlxuICogQHJldHVybnMge0Zyb21NYXJrZG93bkV4dGVuc2lvbn1cbiAqICAgRXh0ZW5zaW9uIGZvciBgbWRhc3QtdXRpbC1mcm9tLW1hcmtkb3duYCB0byBlbmFibGUgTURYIGV4cHJlc3Npb25zLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbWR4RXhwcmVzc2lvbkZyb21NYXJrZG93bigpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnRlcjoge1xuICAgICAgbWR4Rmxvd0V4cHJlc3Npb246IGVudGVyTWR4Rmxvd0V4cHJlc3Npb24sXG4gICAgICBtZHhUZXh0RXhwcmVzc2lvbjogZW50ZXJNZHhUZXh0RXhwcmVzc2lvblxuICAgIH0sXG4gICAgZXhpdDoge1xuICAgICAgbWR4Rmxvd0V4cHJlc3Npb246IGV4aXRNZHhFeHByZXNzaW9uLFxuICAgICAgbWR4Rmxvd0V4cHJlc3Npb25DaHVuazogZXhpdE1keEV4cHJlc3Npb25EYXRhLFxuICAgICAgbWR4VGV4dEV4cHJlc3Npb246IGV4aXRNZHhFeHByZXNzaW9uLFxuICAgICAgbWR4VGV4dEV4cHJlc3Npb25DaHVuazogZXhpdE1keEV4cHJlc3Npb25EYXRhXG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQ3JlYXRlIGFuIGV4dGVuc2lvbiBmb3IgYG1kYXN0LXV0aWwtdG8tbWFya2Rvd25gIHRvIGVuYWJsZSBNRFggZXhwcmVzc2lvbnNcbiAqIGluIG1hcmtkb3duLlxuICpcbiAqIEByZXR1cm5zIHtUb01hcmtkb3duRXh0ZW5zaW9ufVxuICogICBFeHRlbnNpb24gZm9yIGBtZGFzdC11dGlsLXRvLW1hcmtkb3duYCB0byBlbmFibGUgTURYIGV4cHJlc3Npb25zLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbWR4RXhwcmVzc2lvblRvTWFya2Rvd24oKSB7XG4gIHJldHVybiB7XG4gICAgaGFuZGxlcnM6IHtcbiAgICAgIG1keEZsb3dFeHByZXNzaW9uOiBoYW5kbGVNZHhFeHByZXNzaW9uLFxuICAgICAgbWR4VGV4dEV4cHJlc3Npb246IGhhbmRsZU1keEV4cHJlc3Npb25cbiAgICB9LFxuICAgIHVuc2FmZTogW1xuICAgICAge2NoYXJhY3RlcjogJ3snLCBpbkNvbnN0cnVjdDogWydwaHJhc2luZyddfSxcbiAgICAgIHthdEJyZWFrOiB0cnVlLCBjaGFyYWN0ZXI6ICd7J31cbiAgICBdXG4gIH1cbn1cblxuLyoqXG4gKiBAdGhpcyB7Q29tcGlsZUNvbnRleHR9XG4gKiBAdHlwZSB7RnJvbU1hcmtkb3duSGFuZGxlfVxuICovXG5mdW5jdGlvbiBlbnRlck1keEZsb3dFeHByZXNzaW9uKHRva2VuKSB7XG4gIHRoaXMuZW50ZXIoe3R5cGU6ICdtZHhGbG93RXhwcmVzc2lvbicsIHZhbHVlOiAnJ30sIHRva2VuKVxuICB0aGlzLmJ1ZmZlcigpXG59XG5cbi8qKlxuICogQHRoaXMge0NvbXBpbGVDb250ZXh0fVxuICogQHR5cGUge0Zyb21NYXJrZG93bkhhbmRsZX1cbiAqL1xuZnVuY3Rpb24gZW50ZXJNZHhUZXh0RXhwcmVzc2lvbih0b2tlbikge1xuICB0aGlzLmVudGVyKHt0eXBlOiAnbWR4VGV4dEV4cHJlc3Npb24nLCB2YWx1ZTogJyd9LCB0b2tlbilcbiAgdGhpcy5idWZmZXIoKVxufVxuXG4vKipcbiAqIEB0aGlzIHtDb21waWxlQ29udGV4dH1cbiAqIEB0eXBlIHtGcm9tTWFya2Rvd25IYW5kbGV9XG4gKi9cbmZ1bmN0aW9uIGV4aXRNZHhFeHByZXNzaW9uKHRva2VuKSB7XG4gIGNvbnN0IHZhbHVlID0gdGhpcy5yZXN1bWUoKVxuICBjb25zdCBlc3RyZWUgPSB0b2tlbi5lc3RyZWVcbiAgY29uc3Qgbm9kZSA9IHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXVxuICBhc3NlcnQobm9kZS50eXBlID09PSAnbWR4Rmxvd0V4cHJlc3Npb24nIHx8IG5vZGUudHlwZSA9PT0gJ21keFRleHRFeHByZXNzaW9uJylcbiAgdGhpcy5leGl0KHRva2VuKVxuICBub2RlLnZhbHVlID0gdmFsdWVcblxuICBpZiAoZXN0cmVlKSB7XG4gICAgbm9kZS5kYXRhID0ge2VzdHJlZX1cbiAgfVxufVxuXG4vKipcbiAqIEB0aGlzIHtDb21waWxlQ29udGV4dH1cbiAqIEB0eXBlIHtGcm9tTWFya2Rvd25IYW5kbGV9XG4gKi9cbmZ1bmN0aW9uIGV4aXRNZHhFeHByZXNzaW9uRGF0YSh0b2tlbikge1xuICB0aGlzLmNvbmZpZy5lbnRlci5kYXRhLmNhbGwodGhpcywgdG9rZW4pXG4gIHRoaXMuY29uZmlnLmV4aXQuZGF0YS5jYWxsKHRoaXMsIHRva2VuKVxufVxuXG4vKipcbiAqIEB0eXBlIHtUb01hcmtkb3duSGFuZGxlfVxuICogQHBhcmFtIHtNZHhGbG93RXhwcmVzc2lvbiB8IE1keFRleHRFeHByZXNzaW9ufSBub2RlXG4gKi9cbmZ1bmN0aW9uIGhhbmRsZU1keEV4cHJlc3Npb24obm9kZSkge1xuICBjb25zdCB2YWx1ZSA9IG5vZGUudmFsdWUgfHwgJydcbiAgcmV0dXJuICd7JyArIHZhbHVlICsgJ30nXG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/mdast-util-mdx-expression@2.0.0/node_modules/mdast-util-mdx-expression/lib/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/mdast-util-mdx-expression@2.0.0/node_modules/mdast-util-mdx-expression/lib/index.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/mdast-util-mdx-expression@2.0.0/node_modules/mdast-util-mdx-expression/lib/index.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mdxExpressionFromMarkdown: () => (/* binding */ mdxExpressionFromMarkdown),\n/* harmony export */   mdxExpressionToMarkdown: () => (/* binding */ mdxExpressionToMarkdown)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(rsc)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/**\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n *\n * @typedef {import('../index.js').MdxFlowExpression} MdxFlowExpression\n * @typedef {import('../index.js').MdxTextExpression} MdxTextExpression\n */\n\n\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable MDX expressions\n * in markdown.\n *\n * When using the micromark syntax extension with `addResult`, nodes will have\n * a `data.estree` field set to an ESTree `Program` node.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable MDX expressions.\n */\nfunction mdxExpressionFromMarkdown() {\n  return {\n    enter: {\n      mdxFlowExpression: enterMdxFlowExpression,\n      mdxTextExpression: enterMdxTextExpression\n    },\n    exit: {\n      mdxFlowExpression: exitMdxExpression,\n      mdxFlowExpressionChunk: exitMdxExpressionData,\n      mdxTextExpression: exitMdxExpression,\n      mdxTextExpressionChunk: exitMdxExpressionData\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable MDX expressions\n * in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable MDX expressions.\n */\nfunction mdxExpressionToMarkdown() {\n  return {\n    handlers: {\n      mdxFlowExpression: handleMdxExpression,\n      mdxTextExpression: handleMdxExpression\n    },\n    unsafe: [\n      {character: '{', inConstruct: ['phrasing']},\n      {atBreak: true, character: '{'}\n    ]\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterMdxFlowExpression(token) {\n  this.enter({type: 'mdxFlowExpression', value: ''}, token)\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterMdxTextExpression(token) {\n  this.enter({type: 'mdxTextExpression', value: ''}, token)\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitMdxExpression(token) {\n  const value = this.resume()\n  const estree = token.estree\n  const node = this.stack[this.stack.length - 1]\n  ;(0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(node.type === 'mdxFlowExpression' || node.type === 'mdxTextExpression')\n  this.exit(token)\n  node.value = value\n\n  if (estree) {\n    node.data = {estree}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitMdxExpressionData(token) {\n  this.config.enter.data.call(this, token)\n  this.config.exit.data.call(this, token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {MdxFlowExpression | MdxTextExpression} node\n */\nfunction handleMdxExpression(node) {\n  const value = node.value || ''\n  return '{' + value + '}'\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vbWRhc3QtdXRpbC1tZHgtZXhwcmVzc2lvbkAyLjAuMC9ub2RlX21vZHVsZXMvbWRhc3QtdXRpbC1tZHgtZXhwcmVzc2lvbi9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQSxhQUFhLG1EQUFtRDtBQUNoRSxhQUFhLDhDQUE4QztBQUMzRCxhQUFhLDJDQUEyQztBQUN4RDtBQUNBLGFBQWEseUNBQXlDO0FBQ3RELGFBQWEsMENBQTBDO0FBQ3ZEO0FBQ0EsYUFBYSx5Q0FBeUM7QUFDdEQsYUFBYSx5Q0FBeUM7QUFDdEQ7O0FBRW1DOztBQUVuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsT0FBTyxhQUFhLDZCQUE2QjtBQUNqRCxPQUFPLDRCQUE0QjtBQUNuQztBQUNBO0FBQ0E7O0FBRUE7QUFDQSxVQUFVO0FBQ1YsVUFBVTtBQUNWO0FBQ0E7QUFDQSxjQUFjLHFDQUFxQztBQUNuRDtBQUNBOztBQUVBO0FBQ0EsVUFBVTtBQUNWLFVBQVU7QUFDVjtBQUNBO0FBQ0EsY0FBYyxxQ0FBcUM7QUFDbkQ7QUFDQTs7QUFFQTtBQUNBLFVBQVU7QUFDVixVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsMkNBQU07QUFDUjtBQUNBOztBQUVBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7O0FBRUE7QUFDQSxVQUFVO0FBQ1YsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxVQUFVO0FBQ1YsV0FBVyx1Q0FBdUM7QUFDbEQ7QUFDQTtBQUNBO0FBQ0EsV0FBVyxjQUFjO0FBQ3pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2JtXzIwMjQvLi9ub2RlX21vZHVsZXMvLnBucG0vbWRhc3QtdXRpbC1tZHgtZXhwcmVzc2lvbkAyLjAuMC9ub2RlX21vZHVsZXMvbWRhc3QtdXRpbC1tZHgtZXhwcmVzc2lvbi9saWIvaW5kZXguanM/YTkwYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21kYXN0LXV0aWwtZnJvbS1tYXJrZG93bicpLkNvbXBpbGVDb250ZXh0fSBDb21waWxlQ29udGV4dFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QtdXRpbC1mcm9tLW1hcmtkb3duJykuRXh0ZW5zaW9ufSBGcm9tTWFya2Rvd25FeHRlbnNpb25cbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21kYXN0LXV0aWwtZnJvbS1tYXJrZG93bicpLkhhbmRsZX0gRnJvbU1hcmtkb3duSGFuZGxlXG4gKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QtdXRpbC10by1tYXJrZG93bicpLkhhbmRsZX0gVG9NYXJrZG93bkhhbmRsZVxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QtdXRpbC10by1tYXJrZG93bicpLk9wdGlvbnN9IFRvTWFya2Rvd25FeHRlbnNpb25cbiAqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi9pbmRleC5qcycpLk1keEZsb3dFeHByZXNzaW9ufSBNZHhGbG93RXhwcmVzc2lvblxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vaW5kZXguanMnKS5NZHhUZXh0RXhwcmVzc2lvbn0gTWR4VGV4dEV4cHJlc3Npb25cbiAqL1xuXG5pbXBvcnQge29rIGFzIGFzc2VydH0gZnJvbSAnZGV2bG9wJ1xuXG4vKipcbiAqIENyZWF0ZSBhbiBleHRlbnNpb24gZm9yIGBtZGFzdC11dGlsLWZyb20tbWFya2Rvd25gIHRvIGVuYWJsZSBNRFggZXhwcmVzc2lvbnNcbiAqIGluIG1hcmtkb3duLlxuICpcbiAqIFdoZW4gdXNpbmcgdGhlIG1pY3JvbWFyayBzeW50YXggZXh0ZW5zaW9uIHdpdGggYGFkZFJlc3VsdGAsIG5vZGVzIHdpbGwgaGF2ZVxuICogYSBgZGF0YS5lc3RyZWVgIGZpZWxkIHNldCB0byBhbiBFU1RyZWUgYFByb2dyYW1gIG5vZGUuXG4gKlxuICogQHJldHVybnMge0Zyb21NYXJrZG93bkV4dGVuc2lvbn1cbiAqICAgRXh0ZW5zaW9uIGZvciBgbWRhc3QtdXRpbC1mcm9tLW1hcmtkb3duYCB0byBlbmFibGUgTURYIGV4cHJlc3Npb25zLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbWR4RXhwcmVzc2lvbkZyb21NYXJrZG93bigpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnRlcjoge1xuICAgICAgbWR4Rmxvd0V4cHJlc3Npb246IGVudGVyTWR4Rmxvd0V4cHJlc3Npb24sXG4gICAgICBtZHhUZXh0RXhwcmVzc2lvbjogZW50ZXJNZHhUZXh0RXhwcmVzc2lvblxuICAgIH0sXG4gICAgZXhpdDoge1xuICAgICAgbWR4Rmxvd0V4cHJlc3Npb246IGV4aXRNZHhFeHByZXNzaW9uLFxuICAgICAgbWR4Rmxvd0V4cHJlc3Npb25DaHVuazogZXhpdE1keEV4cHJlc3Npb25EYXRhLFxuICAgICAgbWR4VGV4dEV4cHJlc3Npb246IGV4aXRNZHhFeHByZXNzaW9uLFxuICAgICAgbWR4VGV4dEV4cHJlc3Npb25DaHVuazogZXhpdE1keEV4cHJlc3Npb25EYXRhXG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQ3JlYXRlIGFuIGV4dGVuc2lvbiBmb3IgYG1kYXN0LXV0aWwtdG8tbWFya2Rvd25gIHRvIGVuYWJsZSBNRFggZXhwcmVzc2lvbnNcbiAqIGluIG1hcmtkb3duLlxuICpcbiAqIEByZXR1cm5zIHtUb01hcmtkb3duRXh0ZW5zaW9ufVxuICogICBFeHRlbnNpb24gZm9yIGBtZGFzdC11dGlsLXRvLW1hcmtkb3duYCB0byBlbmFibGUgTURYIGV4cHJlc3Npb25zLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbWR4RXhwcmVzc2lvblRvTWFya2Rvd24oKSB7XG4gIHJldHVybiB7XG4gICAgaGFuZGxlcnM6IHtcbiAgICAgIG1keEZsb3dFeHByZXNzaW9uOiBoYW5kbGVNZHhFeHByZXNzaW9uLFxuICAgICAgbWR4VGV4dEV4cHJlc3Npb246IGhhbmRsZU1keEV4cHJlc3Npb25cbiAgICB9LFxuICAgIHVuc2FmZTogW1xuICAgICAge2NoYXJhY3RlcjogJ3snLCBpbkNvbnN0cnVjdDogWydwaHJhc2luZyddfSxcbiAgICAgIHthdEJyZWFrOiB0cnVlLCBjaGFyYWN0ZXI6ICd7J31cbiAgICBdXG4gIH1cbn1cblxuLyoqXG4gKiBAdGhpcyB7Q29tcGlsZUNvbnRleHR9XG4gKiBAdHlwZSB7RnJvbU1hcmtkb3duSGFuZGxlfVxuICovXG5mdW5jdGlvbiBlbnRlck1keEZsb3dFeHByZXNzaW9uKHRva2VuKSB7XG4gIHRoaXMuZW50ZXIoe3R5cGU6ICdtZHhGbG93RXhwcmVzc2lvbicsIHZhbHVlOiAnJ30sIHRva2VuKVxuICB0aGlzLmJ1ZmZlcigpXG59XG5cbi8qKlxuICogQHRoaXMge0NvbXBpbGVDb250ZXh0fVxuICogQHR5cGUge0Zyb21NYXJrZG93bkhhbmRsZX1cbiAqL1xuZnVuY3Rpb24gZW50ZXJNZHhUZXh0RXhwcmVzc2lvbih0b2tlbikge1xuICB0aGlzLmVudGVyKHt0eXBlOiAnbWR4VGV4dEV4cHJlc3Npb24nLCB2YWx1ZTogJyd9LCB0b2tlbilcbiAgdGhpcy5idWZmZXIoKVxufVxuXG4vKipcbiAqIEB0aGlzIHtDb21waWxlQ29udGV4dH1cbiAqIEB0eXBlIHtGcm9tTWFya2Rvd25IYW5kbGV9XG4gKi9cbmZ1bmN0aW9uIGV4aXRNZHhFeHByZXNzaW9uKHRva2VuKSB7XG4gIGNvbnN0IHZhbHVlID0gdGhpcy5yZXN1bWUoKVxuICBjb25zdCBlc3RyZWUgPSB0b2tlbi5lc3RyZWVcbiAgY29uc3Qgbm9kZSA9IHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXVxuICBhc3NlcnQobm9kZS50eXBlID09PSAnbWR4Rmxvd0V4cHJlc3Npb24nIHx8IG5vZGUudHlwZSA9PT0gJ21keFRleHRFeHByZXNzaW9uJylcbiAgdGhpcy5leGl0KHRva2VuKVxuICBub2RlLnZhbHVlID0gdmFsdWVcblxuICBpZiAoZXN0cmVlKSB7XG4gICAgbm9kZS5kYXRhID0ge2VzdHJlZX1cbiAgfVxufVxuXG4vKipcbiAqIEB0aGlzIHtDb21waWxlQ29udGV4dH1cbiAqIEB0eXBlIHtGcm9tTWFya2Rvd25IYW5kbGV9XG4gKi9cbmZ1bmN0aW9uIGV4aXRNZHhFeHByZXNzaW9uRGF0YSh0b2tlbikge1xuICB0aGlzLmNvbmZpZy5lbnRlci5kYXRhLmNhbGwodGhpcywgdG9rZW4pXG4gIHRoaXMuY29uZmlnLmV4aXQuZGF0YS5jYWxsKHRoaXMsIHRva2VuKVxufVxuXG4vKipcbiAqIEB0eXBlIHtUb01hcmtkb3duSGFuZGxlfVxuICogQHBhcmFtIHtNZHhGbG93RXhwcmVzc2lvbiB8IE1keFRleHRFeHByZXNzaW9ufSBub2RlXG4gKi9cbmZ1bmN0aW9uIGhhbmRsZU1keEV4cHJlc3Npb24obm9kZSkge1xuICBjb25zdCB2YWx1ZSA9IG5vZGUudmFsdWUgfHwgJydcbiAgcmV0dXJuICd7JyArIHZhbHVlICsgJ30nXG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/mdast-util-mdx-expression@2.0.0/node_modules/mdast-util-mdx-expression/lib/index.js\n");

/***/ })

};
;
"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@mdx-js+mdx@3.0.1";
exports.ids = ["vendor-chunks/@mdx-js+mdx@3.0.1"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/compile.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/compile.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compile: () => (/* binding */ compile),\n/* harmony export */   compileSync: () => (/* binding */ compileSync)\n/* harmony export */ });\n/* harmony import */ var _util_resolve_file_and_options_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/resolve-file-and-options.js */ \"(ssr)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/resolve-file-and-options.js\");\n/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./core.js */ \"(ssr)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/core.js\");\n/**\n * @typedef {import('vfile').VFile} VFile\n * @typedef {import('vfile').Compatible} Compatible\n * @typedef {import('./core.js').ProcessorOptions} ProcessorOptions\n */\n\n/**\n * @typedef {Omit<ProcessorOptions, 'format'>} CoreProcessorOptions\n *   Core configuration.\n *\n * @typedef ExtraOptions\n *   Extra configuration.\n * @property {'detect' | 'md' | 'mdx' | null | undefined} [format='detect']\n *   Format of `file` (default: `'detect'`).\n *\n * @typedef {CoreProcessorOptions & ExtraOptions} CompileOptions\n *   Configuration for `compile`.\n *\n *   `CompileOptions` is the same as `ProcessorOptions` with the exception that\n *   the `format` option supports a `'detect'` value, which is the default.\n *   The `'detect'` format means to use `'md'` for files with an extension in\n *   `mdExtensions` and `'mdx'` otherwise.\n */\n\n\n\n\n/**\n * Compile MDX to JS.\n *\n * @param {Readonly<Compatible>} vfileCompatible\n *   MDX document to parse.\n * @param {Readonly<CompileOptions> | null | undefined} [compileOptions]\n *   Compile configuration (optional).\n * @return {Promise<VFile>}\n *   Promise to compiled file.\n */\nfunction compile(vfileCompatible, compileOptions) {\n  const {file, options} = (0,_util_resolve_file_and_options_js__WEBPACK_IMPORTED_MODULE_0__.resolveFileAndOptions)(vfileCompatible, compileOptions)\n  return (0,_core_js__WEBPACK_IMPORTED_MODULE_1__.createProcessor)(options).process(file)\n}\n\n/**\n * Synchronously compile MDX to JS.\n *\n * When possible please use the async `compile`.\n *\n * @param {Readonly<Compatible>} vfileCompatible\n *   MDX document to parse.\n * @param {Readonly<CompileOptions> | null | undefined} [compileOptions]\n *   Compile configuration (optional).\n * @return {VFile}\n *   Compiled file.\n */\nfunction compileSync(vfileCompatible, compileOptions) {\n  const {file, options} = (0,_util_resolve_file_and_options_js__WEBPACK_IMPORTED_MODULE_0__.resolveFileAndOptions)(vfileCompatible, compileOptions)\n  return (0,_core_js__WEBPACK_IMPORTED_MODULE_1__.createProcessor)(options).processSync(file)\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1keC1qcyttZHhAMy4wLjEvbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi9jb21waWxlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBLGFBQWEsdUJBQXVCO0FBQ3BDLGFBQWEsNEJBQTRCO0FBQ3pDLGFBQWEsc0NBQXNDO0FBQ25EOztBQUVBO0FBQ0EsYUFBYSxrQ0FBa0M7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLDRDQUE0QztBQUMxRDtBQUNBO0FBQ0EsYUFBYSxxQ0FBcUM7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRXdFO0FBQy9COztBQUV6QztBQUNBO0FBQ0E7QUFDQSxXQUFXLHNCQUFzQjtBQUNqQztBQUNBLFdBQVcsNkNBQTZDO0FBQ3hEO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDTztBQUNQLFNBQVMsZUFBZSxFQUFFLHdGQUFxQjtBQUMvQyxTQUFTLHlEQUFlO0FBQ3hCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHNCQUFzQjtBQUNqQztBQUNBLFdBQVcsNkNBQTZDO0FBQ3hEO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDTztBQUNQLFNBQVMsZUFBZSxFQUFFLHdGQUFxQjtBQUMvQyxTQUFTLHlEQUFlO0FBQ3hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2JtXzIwMjQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1keC1qcyttZHhAMy4wLjEvbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi9jb21waWxlLmpzP2Q0MDUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCd2ZmlsZScpLlZGaWxlfSBWRmlsZVxuICogQHR5cGVkZWYge2ltcG9ydCgndmZpbGUnKS5Db21wYXRpYmxlfSBDb21wYXRpYmxlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuL2NvcmUuanMnKS5Qcm9jZXNzb3JPcHRpb25zfSBQcm9jZXNzb3JPcHRpb25zXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7T21pdDxQcm9jZXNzb3JPcHRpb25zLCAnZm9ybWF0Jz59IENvcmVQcm9jZXNzb3JPcHRpb25zXG4gKiAgIENvcmUgY29uZmlndXJhdGlvbi5cbiAqXG4gKiBAdHlwZWRlZiBFeHRyYU9wdGlvbnNcbiAqICAgRXh0cmEgY29uZmlndXJhdGlvbi5cbiAqIEBwcm9wZXJ0eSB7J2RldGVjdCcgfCAnbWQnIHwgJ21keCcgfCBudWxsIHwgdW5kZWZpbmVkfSBbZm9ybWF0PSdkZXRlY3QnXVxuICogICBGb3JtYXQgb2YgYGZpbGVgIChkZWZhdWx0OiBgJ2RldGVjdCdgKS5cbiAqXG4gKiBAdHlwZWRlZiB7Q29yZVByb2Nlc3Nvck9wdGlvbnMgJiBFeHRyYU9wdGlvbnN9IENvbXBpbGVPcHRpb25zXG4gKiAgIENvbmZpZ3VyYXRpb24gZm9yIGBjb21waWxlYC5cbiAqXG4gKiAgIGBDb21waWxlT3B0aW9uc2AgaXMgdGhlIHNhbWUgYXMgYFByb2Nlc3Nvck9wdGlvbnNgIHdpdGggdGhlIGV4Y2VwdGlvbiB0aGF0XG4gKiAgIHRoZSBgZm9ybWF0YCBvcHRpb24gc3VwcG9ydHMgYSBgJ2RldGVjdCdgIHZhbHVlLCB3aGljaCBpcyB0aGUgZGVmYXVsdC5cbiAqICAgVGhlIGAnZGV0ZWN0J2AgZm9ybWF0IG1lYW5zIHRvIHVzZSBgJ21kJ2AgZm9yIGZpbGVzIHdpdGggYW4gZXh0ZW5zaW9uIGluXG4gKiAgIGBtZEV4dGVuc2lvbnNgIGFuZCBgJ21keCdgIG90aGVyd2lzZS5cbiAqL1xuXG5pbXBvcnQge3Jlc29sdmVGaWxlQW5kT3B0aW9uc30gZnJvbSAnLi91dGlsL3Jlc29sdmUtZmlsZS1hbmQtb3B0aW9ucy5qcydcbmltcG9ydCB7Y3JlYXRlUHJvY2Vzc29yfSBmcm9tICcuL2NvcmUuanMnXG5cbi8qKlxuICogQ29tcGlsZSBNRFggdG8gSlMuXG4gKlxuICogQHBhcmFtIHtSZWFkb25seTxDb21wYXRpYmxlPn0gdmZpbGVDb21wYXRpYmxlXG4gKiAgIE1EWCBkb2N1bWVudCB0byBwYXJzZS5cbiAqIEBwYXJhbSB7UmVhZG9ubHk8Q29tcGlsZU9wdGlvbnM+IHwgbnVsbCB8IHVuZGVmaW5lZH0gW2NvbXBpbGVPcHRpb25zXVxuICogICBDb21waWxlIGNvbmZpZ3VyYXRpb24gKG9wdGlvbmFsKS5cbiAqIEByZXR1cm4ge1Byb21pc2U8VkZpbGU+fVxuICogICBQcm9taXNlIHRvIGNvbXBpbGVkIGZpbGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21waWxlKHZmaWxlQ29tcGF0aWJsZSwgY29tcGlsZU9wdGlvbnMpIHtcbiAgY29uc3Qge2ZpbGUsIG9wdGlvbnN9ID0gcmVzb2x2ZUZpbGVBbmRPcHRpb25zKHZmaWxlQ29tcGF0aWJsZSwgY29tcGlsZU9wdGlvbnMpXG4gIHJldHVybiBjcmVhdGVQcm9jZXNzb3Iob3B0aW9ucykucHJvY2VzcyhmaWxlKVxufVxuXG4vKipcbiAqIFN5bmNocm9ub3VzbHkgY29tcGlsZSBNRFggdG8gSlMuXG4gKlxuICogV2hlbiBwb3NzaWJsZSBwbGVhc2UgdXNlIHRoZSBhc3luYyBgY29tcGlsZWAuXG4gKlxuICogQHBhcmFtIHtSZWFkb25seTxDb21wYXRpYmxlPn0gdmZpbGVDb21wYXRpYmxlXG4gKiAgIE1EWCBkb2N1bWVudCB0byBwYXJzZS5cbiAqIEBwYXJhbSB7UmVhZG9ubHk8Q29tcGlsZU9wdGlvbnM+IHwgbnVsbCB8IHVuZGVmaW5lZH0gW2NvbXBpbGVPcHRpb25zXVxuICogICBDb21waWxlIGNvbmZpZ3VyYXRpb24gKG9wdGlvbmFsKS5cbiAqIEByZXR1cm4ge1ZGaWxlfVxuICogICBDb21waWxlZCBmaWxlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tcGlsZVN5bmModmZpbGVDb21wYXRpYmxlLCBjb21waWxlT3B0aW9ucykge1xuICBjb25zdCB7ZmlsZSwgb3B0aW9uc30gPSByZXNvbHZlRmlsZUFuZE9wdGlvbnModmZpbGVDb21wYXRpYmxlLCBjb21waWxlT3B0aW9ucylcbiAgcmV0dXJuIGNyZWF0ZVByb2Nlc3NvcihvcHRpb25zKS5wcm9jZXNzU3luYyhmaWxlKVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/compile.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/core.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/core.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createProcessor: () => (/* binding */ createProcessor)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(ssr)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var remark_mdx__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! remark-mdx */ \"(ssr)/./node_modules/.pnpm/remark-mdx@3.0.1/node_modules/remark-mdx/lib/index.js\");\n/* harmony import */ var remark_parse__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! remark-parse */ \"(ssr)/./node_modules/.pnpm/remark-parse@11.0.0/node_modules/remark-parse/lib/index.js\");\n/* harmony import */ var remark_rehype__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! remark-rehype */ \"(ssr)/./node_modules/.pnpm/remark-rehype@11.1.0/node_modules/remark-rehype/lib/index.js\");\n/* harmony import */ var unified__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! unified */ \"(ssr)/./node_modules/.pnpm/unified@11.0.5/node_modules/unified/lib/index.js\");\n/* harmony import */ var _plugin_recma_document_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./plugin/recma-document.js */ \"(ssr)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/recma-document.js\");\n/* harmony import */ var _plugin_recma_jsx_build_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./plugin/recma-jsx-build.js */ \"(ssr)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/recma-jsx-build.js\");\n/* harmony import */ var _plugin_recma_jsx_rewrite_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./plugin/recma-jsx-rewrite.js */ \"(ssr)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/recma-jsx-rewrite.js\");\n/* harmony import */ var _plugin_recma_stringify_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./plugin/recma-stringify.js */ \"(ssr)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/recma-stringify.js\");\n/* harmony import */ var _plugin_rehype_recma_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./plugin/rehype-recma.js */ \"(ssr)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/rehype-recma.js\");\n/* harmony import */ var _plugin_rehype_remove_raw_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./plugin/rehype-remove-raw.js */ \"(ssr)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/rehype-remove-raw.js\");\n/* harmony import */ var _plugin_remark_mark_and_unravel_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./plugin/remark-mark-and-unravel.js */ \"(ssr)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/remark-mark-and-unravel.js\");\n/* harmony import */ var _node_types_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./node-types.js */ \"(ssr)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/node-types.js\");\n/**\n * @typedef {import('estree-jsx').Program} Program\n * @typedef {import('hast-util-to-estree').ElementAttributeNameCase} ElementAttributeNameCase\n * @typedef {import('hast-util-to-estree').StylePropertyNameCase} StylePropertyNameCase\n * @typedef {import('mdast').Root} Root\n * @typedef {import('remark-rehype').Options} RemarkRehypeOptions\n * @typedef {typeof import('source-map').SourceMapGenerator} SourceMapGenerator\n * @typedef {import('unified').PluggableList} PluggableList\n * @typedef {import('unified').Processor<Root, Program, Program, Program, string>} Processor\n */\n\n/**\n * @typedef ProcessorOptions\n *   Configuration for `createProcessor`.\n * @property {SourceMapGenerator | null | undefined} [SourceMapGenerator]\n *   Add a source map (object form) as the `map` field on the resulting file\n *   (optional).\n * @property {URL | string | null | undefined} [baseUrl]\n *   Use this URL as `import.meta.url` and resolve `import` and `export … from`\n *   relative to it (optional, example: `import.meta.url`).\n * @property {boolean | null | undefined} [development=false]\n *   Whether to add extra info to error messages in generated code and use the\n *   development automatic JSX runtime (`Fragment` and `jsxDEV` from\n *   `/jsx-dev-runtime`) (default: `false`);\n *   when using the webpack loader (`@mdx-js/loader`) or the Rollup integration\n *   (`@mdx-js/rollup`) through Vite, this is automatically inferred from how\n *   you configure those tools.\n * @property {ElementAttributeNameCase | null | undefined} [elementAttributeNameCase='react']\n *   Casing to use for attribute names (default: `'react'`);\n *   HTML casing is for example `class`, `stroke-linecap`, `xml:lang`;\n *   React casing is for example `className`, `strokeLinecap`, `xmlLang`;\n *   for JSX components written in MDX, the author has to be aware of which\n *   framework they use and write code accordingly;\n *   for AST nodes generated by this project, this option configures it\n * @property {'md' | 'mdx' | null | undefined} [format='mdx']\n *   format of the file (default: `'mdx'`);\n *   `'md'` means treat as markdown and `'mdx'` means treat as MDX.\n * @property {boolean | null | undefined} [jsx=false]\n *   Whether to keep JSX (default: `false`);\n *   the default is to compile JSX away so that the resulting file is\n *   immediately runnable.\n * @property {string | null | undefined} [jsxImportSource='react']\n *   Place to import automatic JSX runtimes from (default: `'react'`);\n *   when in the `automatic` runtime, this is used to define an import for\n *   `Fragment`, `jsx`, `jsxDEV`, and `jsxs`.\n * @property {'automatic' | 'classic' | null | undefined} [jsxRuntime='automatic']\n *   JSX runtime to use (default: `'automatic'`);\n *   the automatic runtime compiles to `import _jsx from\n *   '$importSource/jsx-runtime'\\n_jsx('p')`;\n *   the classic runtime compiles to calls such as `h('p')`.\n *\n *   > 👉 **Note**: support for the classic runtime is deprecated and will\n *   > likely be removed in the next major version.\n * @property {ReadonlyArray<string> | null | undefined} [mdExtensions]\n *   List of markdown extensions, with dot (default: `['.md', '.markdown', …]`);\n *   affects integrations.\n * @property {ReadonlyArray<string> | null | undefined} [mdxExtensions]\n *   List of MDX extensions, with dot (default: `['.mdx']`);\n *   affects integrations.\n * @property {'function-body' | 'program' | null | undefined} [outputFormat='program']\n *   Output format to generate (default: `'program'`);\n *   in most cases `'program'` should be used, it results in a whole program;\n *   internally `evaluate` uses `'function-body'` to compile to\n *   code that can be passed to `run`;\n *   in some cases, you might want what `evaluate` does in separate steps, such\n *   as when compiling on the server and running on the client.\n * @property {string | null | undefined} [pragma='React.createElement']\n *   Pragma for JSX, used in the classic runtime as an identifier for function\n *   calls: `<x />` to `React.createElement('x')` (default:\n *   `'React.createElement'`);\n *   when changing this, you should also define `pragmaFrag` and\n *   `pragmaImportSource` too.\n *\n *   > 👉 **Note**: support for the classic runtime is deprecated and will\n *   > likely be removed in the next major version.\n * @property {string | null | undefined} [pragmaFrag='React.Fragment']\n *   Pragma for fragment symbol, used in the classic runtime as an identifier\n *   for unnamed calls: `<>` to `React.createElement(React.Fragment)` (default:\n *   `'React.Fragment'`);\n *   when changing this, you should also define `pragma` and\n *   `pragmaImportSource` too.\n *\n *   > 👉 **Note**: support for the classic runtime is deprecated and will\n *   > likely be removed in the next major version.\n * @property {string | null | undefined} [pragmaImportSource='react']\n *   Where to import the identifier of `pragma` from, used in the classic\n *   runtime (default: `'react'`);\n *   to illustrate, when `pragma` is `'a.b'` and `pragmaImportSource` is `'c'`\n *   the following will be generated: `import a from 'c'` and things such as\n *   `a.b('h1', {})`.\n *   when changing this, you should also define `pragma` and `pragmaFrag` too.\n *\n *   > 👉 **Note**: support for the classic runtime is deprecated and will\n *   > likely be removed in the next major version.\n * @property {string | null | undefined} [providerImportSource]\n *   Place to import a provider from (optional, example: `'@mdx-js/react'`);\n *   normally it’s used for runtimes that support context (React, Preact), but\n *   it can be used to inject components into the compiled code;\n *   the module must export and identifier `useMDXComponents` which is called\n *   without arguments to get an object of components (`MDXComponents` from\n *   `mdx/types.js`).\n * @property {PluggableList | null | undefined} [recmaPlugins]\n *   List of recma plugins (optional);\n *   this is a new ecosystem, currently in beta, to transform esast trees\n *   (JavaScript)\n * @property {PluggableList | null | undefined} [remarkPlugins]\n *   List of remark plugins (optional).\n * @property {PluggableList | null | undefined} [rehypePlugins]\n *   List of rehype plugins (optional).\n * @property {Readonly<RemarkRehypeOptions> | null | undefined} [remarkRehypeOptions]\n *   Options to pass through to `remark-rehype` (optional);\n *   the option `allowDangerousHtml` will always be set to `true` and the MDX\n *   nodes (see `nodeTypes`) are passed through;\n *   In particular, you might want to pass configuration for footnotes if your\n *   content is not in English.\n * @property {StylePropertyNameCase | null | undefined} [stylePropertyNameCase='dom']\n *   Casing to use for property names in `style` objects (default: `'dom'`);\n *   CSS casing is for example `background-color` and `-webkit-line-clamp`;\n *   DOM casing is for example `backgroundColor` and `WebkitLineClamp`;\n *   for JSX components written in MDX, the author has to be aware of which\n *   framework they use and write code accordingly;\n *   for AST nodes generated by this project, this option configures it\n * @property {boolean | null | undefined} [tableCellAlignToStyle=true]\n *   Turn obsolete `align` properties on `td` and `th` into CSS `style`\n *   properties (default: `true`).\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst removedOptions = [\n  'compilers',\n  'filepath',\n  'hastPlugins',\n  'mdPlugins',\n  'skipExport',\n  'wrapExport'\n]\n\nlet warned = false\n\n/**\n * Create a processor to compile markdown or MDX to JavaScript.\n *\n * > **Note**: `format: 'detect'` is not allowed in `ProcessorOptions`.\n *\n * @param {Readonly<ProcessorOptions> | null | undefined} [options]\n *   Configuration (optional).\n * @return {Processor}\n *   Processor.\n */\nfunction createProcessor(options) {\n  const settings = options || {}\n  let index = -1\n\n  while (++index < removedOptions.length) {\n    const key = removedOptions[index]\n    if (key in settings) {\n      (0,devlop__WEBPACK_IMPORTED_MODULE_0__.unreachable)(\n        'Unexpected removed option `' +\n          key +\n          '`; see <https://mdxjs.com/migrating/v2/> on how to migrate'\n      )\n    }\n  }\n\n  // @ts-expect-error: throw an error for a runtime value which is not allowed\n  // by the types.\n  if (settings.format === 'detect') {\n    (0,devlop__WEBPACK_IMPORTED_MODULE_0__.unreachable)(\n      \"Unexpected `format: 'detect'`, which is not supported by `createProcessor`, expected `'mdx'` or `'md'`\"\n    )\n  }\n\n  if (\n    (settings.jsxRuntime === 'classic' ||\n      settings.pragma ||\n      settings.pragmaFrag ||\n      settings.pragmaImportSource) &&\n    !warned\n  ) {\n    warned = true\n    console.warn(\n      \"Unexpected deprecated option `jsxRuntime: 'classic'`, `pragma`, `pragmaFrag`, or `pragmaImportSource`; see <https://mdxjs.com/migrating/v3/> on how to migrate\"\n    )\n  }\n\n  const pipeline = (0,unified__WEBPACK_IMPORTED_MODULE_1__.unified)().use(remark_parse__WEBPACK_IMPORTED_MODULE_2__[\"default\"])\n\n  if (settings.format !== 'md') {\n    pipeline.use(remark_mdx__WEBPACK_IMPORTED_MODULE_3__[\"default\"])\n  }\n\n  const remarkRehypeOptions = settings.remarkRehypeOptions || {}\n\n  pipeline\n    .use(_plugin_remark_mark_and_unravel_js__WEBPACK_IMPORTED_MODULE_4__.remarkMarkAndUnravel)\n    .use(settings.remarkPlugins || [])\n    .use(remark_rehype__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n      ...remarkRehypeOptions,\n      allowDangerousHtml: true,\n      passThrough: [...(remarkRehypeOptions.passThrough || []), ..._node_types_js__WEBPACK_IMPORTED_MODULE_6__.nodeTypes]\n    })\n    .use(settings.rehypePlugins || [])\n\n  if (settings.format === 'md') {\n    pipeline.use(_plugin_rehype_remove_raw_js__WEBPACK_IMPORTED_MODULE_7__.rehypeRemoveRaw)\n  }\n\n  pipeline\n    .use(_plugin_rehype_recma_js__WEBPACK_IMPORTED_MODULE_8__.rehypeRecma, settings)\n    .use(_plugin_recma_document_js__WEBPACK_IMPORTED_MODULE_9__.recmaDocument, settings)\n    .use(_plugin_recma_jsx_rewrite_js__WEBPACK_IMPORTED_MODULE_10__.recmaJsxRewrite, settings)\n\n  if (!settings.jsx) {\n    pipeline.use(_plugin_recma_jsx_build_js__WEBPACK_IMPORTED_MODULE_11__.recmaJsxBuild, settings)\n  }\n\n  pipeline.use(_plugin_recma_stringify_js__WEBPACK_IMPORTED_MODULE_12__.recmaStringify, settings).use(settings.recmaPlugins || [])\n\n  // @ts-expect-error: we added plugins with if-checks, which TS doesn’t get.\n  return pipeline\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/core.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/node-types.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/node-types.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   nodeTypes: () => (/* binding */ nodeTypes)\n/* harmony export */ });\n/**\n * List of node types made by `mdast-util-mdx`, which have to be passed\n * through untouched from the mdast tree to the hast tree.\n */\nconst nodeTypes = /** @type {const} */ ([\n  'mdxFlowExpression',\n  'mdxJsxFlowElement',\n  'mdxJsxTextElement',\n  'mdxTextExpression',\n  'mdxjsEsm'\n])\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1keC1qcyttZHhAMy4wLjEvbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi9ub2RlLXR5cGVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLDZCQUE2QixPQUFPO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2NibV8yMDI0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtZHgtanMrbWR4QDMuMC4xL25vZGVfbW9kdWxlcy9AbWR4LWpzL21keC9saWIvbm9kZS10eXBlcy5qcz84OGZlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTGlzdCBvZiBub2RlIHR5cGVzIG1hZGUgYnkgYG1kYXN0LXV0aWwtbWR4YCwgd2hpY2ggaGF2ZSB0byBiZSBwYXNzZWRcbiAqIHRocm91Z2ggdW50b3VjaGVkIGZyb20gdGhlIG1kYXN0IHRyZWUgdG8gdGhlIGhhc3QgdHJlZS5cbiAqL1xuZXhwb3J0IGNvbnN0IG5vZGVUeXBlcyA9IC8qKiBAdHlwZSB7Y29uc3R9ICovIChbXG4gICdtZHhGbG93RXhwcmVzc2lvbicsXG4gICdtZHhKc3hGbG93RWxlbWVudCcsXG4gICdtZHhKc3hUZXh0RWxlbWVudCcsXG4gICdtZHhUZXh0RXhwcmVzc2lvbicsXG4gICdtZHhqc0VzbSdcbl0pXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/node-types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/recma-document.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/recma-document.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   recmaDocument: () => (/* binding */ recmaDocument)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! devlop */ \"(ssr)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var estree_walker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! estree-walker */ \"(ssr)/./node_modules/.pnpm/estree-walker@3.0.3/node_modules/estree-walker/src/index.js\");\n/* harmony import */ var periscopic__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! periscopic */ \"(ssr)/./node_modules/.pnpm/periscopic@3.1.0/node_modules/periscopic/src/index.js\");\n/* harmony import */ var unist_util_position_from_estree__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! unist-util-position-from-estree */ \"(ssr)/./node_modules/.pnpm/unist-util-position-from-estree@2.0.0/node_modules/unist-util-position-from-estree/lib/index.js\");\n/* harmony import */ var unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! unist-util-stringify-position */ \"(ssr)/./node_modules/.pnpm/unist-util-stringify-position@4.0.0/node_modules/unist-util-stringify-position/lib/index.js\");\n/* harmony import */ var _util_estree_util_create_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../util/estree-util-create.js */ \"(ssr)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-create.js\");\n/* harmony import */ var _util_estree_util_declaration_to_expression_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/estree-util-declaration-to-expression.js */ \"(ssr)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-declaration-to-expression.js\");\n/* harmony import */ var _util_estree_util_is_declaration_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/estree-util-is-declaration.js */ \"(ssr)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-is-declaration.js\");\n/* harmony import */ var _util_estree_util_specifiers_to_declarations_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../util/estree-util-specifiers-to-declarations.js */ \"(ssr)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-specifiers-to-declarations.js\");\n/* harmony import */ var _util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../util/estree-util-to-id-or-member-expression.js */ \"(ssr)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-to-id-or-member-expression.js\");\n/**\n * @typedef {import('estree-jsx').CallExpression} CallExpression\n * @typedef {import('estree-jsx').Directive} Directive\n * @typedef {import('estree-jsx').ExportAllDeclaration} ExportAllDeclaration\n * @typedef {import('estree-jsx').ExportDefaultDeclaration} ExportDefaultDeclaration\n * @typedef {import('estree-jsx').ExportNamedDeclaration} ExportNamedDeclaration\n * @typedef {import('estree-jsx').ExportSpecifier} ExportSpecifier\n * @typedef {import('estree-jsx').Expression} Expression\n * @typedef {import('estree-jsx').FunctionDeclaration} FunctionDeclaration\n * @typedef {import('estree-jsx').Identifier} Identifier\n * @typedef {import('estree-jsx').ImportDeclaration} ImportDeclaration\n * @typedef {import('estree-jsx').ImportDefaultSpecifier} ImportDefaultSpecifier\n * @typedef {import('estree-jsx').ImportExpression} ImportExpression\n * @typedef {import('estree-jsx').ImportSpecifier} ImportSpecifier\n * @typedef {import('estree-jsx').JSXElement} JSXElement\n * @typedef {import('estree-jsx').JSXFragment} JSXFragment\n * @typedef {import('estree-jsx').Literal} Literal\n * @typedef {import('estree-jsx').ModuleDeclaration} ModuleDeclaration\n * @typedef {import('estree-jsx').Node} Node\n * @typedef {import('estree-jsx').Program} Program\n * @typedef {import('estree-jsx').Property} Property\n * @typedef {import('estree-jsx').SimpleLiteral} SimpleLiteral\n * @typedef {import('estree-jsx').SpreadElement} SpreadElement\n * @typedef {import('estree-jsx').Statement} Statement\n * @typedef {import('estree-jsx').VariableDeclarator} VariableDeclarator\n *\n * @typedef {import('vfile').VFile} VFile\n *\n * @typedef {import('../core.js').ProcessorOptions} ProcessorOptions\n */\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Wrap the estree in `MDXContent`.\n *\n * @param {Readonly<ProcessorOptions>} options\n *   Configuration.\n * @returns\n *   Transform.\n */\nfunction recmaDocument(options) {\n  const baseUrl = options.baseUrl || undefined\n  const baseHref = typeof baseUrl === 'object' ? baseUrl.href : baseUrl\n  const outputFormat = options.outputFormat || 'program'\n  const pragma =\n    options.pragma === undefined ? 'React.createElement' : options.pragma\n  const pragmaFrag =\n    options.pragmaFrag === undefined ? 'React.Fragment' : options.pragmaFrag\n  const pragmaImportSource = options.pragmaImportSource || 'react'\n  const jsxImportSource = options.jsxImportSource || 'react'\n  const jsxRuntime = options.jsxRuntime || 'automatic'\n\n  /**\n   * @param {Program} tree\n   *   Tree.\n   * @param {VFile} file\n   *   File.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  return function (tree, file) {\n    /** @type {Array<[string, string] | string>} */\n    const exportedIdentifiers = []\n    /** @type {Array<Directive | ModuleDeclaration | Statement>} */\n    const replacement = []\n    let exportAllCount = 0\n    /** @type {ExportDefaultDeclaration | ExportSpecifier | undefined} */\n    let layout\n    /** @type {boolean | undefined} */\n    let content\n    /** @type {Node} */\n    let child\n\n    if (jsxRuntime === 'classic' && pragmaFrag) {\n      injectPragma(tree, '@jsxFrag', pragmaFrag)\n    }\n\n    if (jsxRuntime === 'classic' && pragma) {\n      injectPragma(tree, '@jsx', pragma)\n    }\n\n    if (jsxRuntime === 'automatic' && jsxImportSource) {\n      injectPragma(tree, '@jsxImportSource', jsxImportSource)\n    }\n\n    if (jsxRuntime) {\n      injectPragma(tree, '@jsxRuntime', jsxRuntime)\n    }\n\n    if (jsxRuntime === 'classic' && pragmaImportSource) {\n      if (!pragma) {\n        throw new Error(\n          'Missing `pragma` in classic runtime with `pragmaImportSource`'\n        )\n      }\n\n      handleEsm({\n        type: 'ImportDeclaration',\n        specifiers: [\n          {\n            type: 'ImportDefaultSpecifier',\n            local: {type: 'Identifier', name: pragma.split('.')[0]}\n          }\n        ],\n        source: {type: 'Literal', value: pragmaImportSource}\n      })\n    }\n\n    // Find the `export default`, the JSX expression, and leave the rest\n    // (import/exports) as they are.\n    for (child of tree.body) {\n      // ```tsx\n      // export default properties => <>{properties.children}</>\n      // ```\n      //\n      // Treat it as an inline layout declaration.\n      if (child.type === 'ExportDefaultDeclaration') {\n        if (layout) {\n          file.fail(\n            'Unexpected duplicate layout, expected a single layout (previous: ' +\n              (0,unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_2__.stringifyPosition)((0,unist_util_position_from_estree__WEBPACK_IMPORTED_MODULE_3__.positionFromEstree)(layout)) +\n              ')',\n            {\n              ancestors: [tree, child],\n              place: (0,unist_util_position_from_estree__WEBPACK_IMPORTED_MODULE_3__.positionFromEstree)(child),\n              ruleId: 'duplicate-layout',\n              source: 'recma-document'\n            }\n          )\n        }\n\n        layout = child\n        replacement.push({\n          type: 'VariableDeclaration',\n          kind: 'const',\n          declarations: [\n            {\n              type: 'VariableDeclarator',\n              id: {type: 'Identifier', name: 'MDXLayout'},\n              init: (0,_util_estree_util_is_declaration_js__WEBPACK_IMPORTED_MODULE_4__.isDeclaration)(child.declaration)\n                ? (0,_util_estree_util_declaration_to_expression_js__WEBPACK_IMPORTED_MODULE_5__.declarationToExpression)(child.declaration)\n                : child.declaration\n            }\n          ]\n        })\n      }\n      // ```tsx\n      // export {a, b as c} from 'd'\n      // ```\n      else if (child.type === 'ExportNamedDeclaration' && child.source) {\n        // Cast because always simple.\n        const source = /** @type {SimpleLiteral} */ (child.source)\n\n        // Remove `default` or `as default`, but not `default as`, specifier.\n        child.specifiers = child.specifiers.filter(function (specifier) {\n          if (specifier.exported.name === 'default') {\n            if (layout) {\n              file.fail(\n                'Unexpected duplicate layout, expected a single layout (previous: ' +\n                  (0,unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_2__.stringifyPosition)((0,unist_util_position_from_estree__WEBPACK_IMPORTED_MODULE_3__.positionFromEstree)(layout)) +\n                  ')',\n                {\n                  ancestors: [tree, child, specifier],\n                  place: (0,unist_util_position_from_estree__WEBPACK_IMPORTED_MODULE_3__.positionFromEstree)(child),\n                  ruleId: 'duplicate-layout',\n                  source: 'recma-document'\n                }\n              )\n            }\n\n            layout = specifier\n\n            // Make it just an import: `import MDXLayout from '…'`.\n            /** @type {Array<ImportDefaultSpecifier | ImportSpecifier>} */\n            const specifiers = []\n\n            // Default as default / something else as default.\n            if (specifier.local.name === 'default') {\n              specifiers.push({\n                type: 'ImportDefaultSpecifier',\n                local: {type: 'Identifier', name: 'MDXLayout'}\n              })\n            } else {\n              /** @type {ImportSpecifier} */\n              const importSpecifier = {\n                type: 'ImportSpecifier',\n                imported: specifier.local,\n                local: {type: 'Identifier', name: 'MDXLayout'}\n              }\n              ;(0,_util_estree_util_create_js__WEBPACK_IMPORTED_MODULE_6__.create)(specifier.local, importSpecifier)\n              specifiers.push(importSpecifier)\n            }\n\n            /** @type {Literal} */\n            const from = {type: 'Literal', value: source.value}\n            ;(0,_util_estree_util_create_js__WEBPACK_IMPORTED_MODULE_6__.create)(source, from)\n\n            /** @type {ImportDeclaration} */\n            const declaration = {\n              type: 'ImportDeclaration',\n              specifiers,\n              source: from\n            }\n            ;(0,_util_estree_util_create_js__WEBPACK_IMPORTED_MODULE_6__.create)(specifier, declaration)\n            handleEsm(declaration)\n\n            return false\n          }\n\n          return true\n        })\n\n        // If there are other things imported, keep it.\n        if (child.specifiers.length > 0) {\n          handleExport(child)\n        }\n      }\n      // ```tsx\n      // export {a, b as c}\n      // export * from 'a'\n      // ```\n      else if (\n        child.type === 'ExportNamedDeclaration' ||\n        child.type === 'ExportAllDeclaration'\n      ) {\n        handleExport(child)\n      } else if (child.type === 'ImportDeclaration') {\n        handleEsm(child)\n      } else if (\n        child.type === 'ExpressionStatement' &&\n        (child.expression.type === 'JSXElement' ||\n          // @ts-expect-error: `estree-jsx` does not register `JSXFragment` as an expression.\n          child.expression.type === 'JSXFragment')\n      ) {\n        content = true\n        replacement.push(\n          ...createMdxContent(child.expression, outputFormat, Boolean(layout))\n        )\n      } else {\n        // This catch-all branch is because plugins might add other things.\n        // Normally, we only have import/export/jsx, but just add whatever’s\n        // there.\n        replacement.push(child)\n      }\n    }\n\n    // If there was no JSX content at all, add an empty function.\n    if (!content) {\n      replacement.push(\n        ...createMdxContent(undefined, outputFormat, Boolean(layout))\n      )\n    }\n\n    exportedIdentifiers.push(['MDXContent', 'default'])\n\n    if (outputFormat === 'function-body') {\n      replacement.push({\n        type: 'ReturnStatement',\n        argument: {\n          type: 'ObjectExpression',\n          properties: [\n            ...Array.from({length: exportAllCount}).map(\n              /**\n               * @param {undefined} _\n               *   Nothing.\n               * @param {number} index\n               *   Index.\n               * @returns {SpreadElement}\n               *   Node.\n               */\n              function (_, index) {\n                return {\n                  type: 'SpreadElement',\n                  argument: {\n                    type: 'Identifier',\n                    name: '_exportAll' + (index + 1)\n                  }\n                }\n              }\n            ),\n            ...exportedIdentifiers.map(function (d) {\n              /** @type {Property} */\n              const property = {\n                type: 'Property',\n                kind: 'init',\n                method: false,\n                computed: false,\n                shorthand: typeof d === 'string',\n                key: {\n                  type: 'Identifier',\n                  name: typeof d === 'string' ? d : d[1]\n                },\n                value: {\n                  type: 'Identifier',\n                  name: typeof d === 'string' ? d : d[0]\n                }\n              }\n\n              return property\n            })\n          ]\n        }\n      })\n    }\n\n    tree.body = replacement\n\n    let usesImportMetaUrlVariable = false\n    let usesResolveDynamicHelper = false\n\n    if (baseHref || outputFormat === 'function-body') {\n      (0,estree_walker__WEBPACK_IMPORTED_MODULE_0__.walk)(tree, {\n        enter(node) {\n          if (\n            (node.type === 'ExportAllDeclaration' ||\n              node.type === 'ExportNamedDeclaration' ||\n              node.type === 'ImportDeclaration') &&\n            node.source\n          ) {\n            // We never hit this branch when generating function bodies, as\n            // statements are already compiled away into import expressions.\n            (0,devlop__WEBPACK_IMPORTED_MODULE_7__.ok)(baseHref, 'unexpected missing `baseHref` in branch')\n\n            let value = node.source.value\n            // The literal source for statements can only be string.\n            ;(0,devlop__WEBPACK_IMPORTED_MODULE_7__.ok)(typeof value === 'string', 'expected string source')\n\n            // Resolve a specifier.\n            // This is the same as `_resolveDynamicMdxSpecifier`, which has to\n            // be injected to work with expressions at runtime, but as we have\n            // `baseHref` at compile time here and statements are static\n            // strings, we can do it now.\n            try {\n              // To do: use `URL.canParse` next major.\n              // eslint-disable-next-line no-new\n              new URL(value)\n              // Fine: a full URL.\n            } catch {\n              if (\n                value.startsWith('/') ||\n                value.startsWith('./') ||\n                value.startsWith('../')\n              ) {\n                value = new URL(value, baseHref).href\n              } else {\n                // Fine: are bare specifier.\n              }\n            }\n\n            /** @type {SimpleLiteral} */\n            const replacement = {type: 'Literal', value}\n            ;(0,_util_estree_util_create_js__WEBPACK_IMPORTED_MODULE_6__.create)(node.source, replacement)\n            node.source = replacement\n            return\n          }\n\n          if (node.type === 'ImportExpression') {\n            usesResolveDynamicHelper = true\n            /** @type {CallExpression} */\n            const replacement = {\n              type: 'CallExpression',\n              callee: {type: 'Identifier', name: '_resolveDynamicMdxSpecifier'},\n              arguments: [node.source],\n              optional: false\n            }\n            node.source = replacement\n            return\n          }\n\n          // To do: add support for `import.meta.resolve`.\n\n          if (\n            node.type === 'MemberExpression' &&\n            'object' in node &&\n            node.object.type === 'MetaProperty' &&\n            node.property.type === 'Identifier' &&\n            node.object.meta.name === 'import' &&\n            node.object.property.name === 'meta' &&\n            node.property.name === 'url'\n          ) {\n            usesImportMetaUrlVariable = true\n            /** @type {Identifier} */\n            const replacement = {type: 'Identifier', name: '_importMetaUrl'}\n            ;(0,_util_estree_util_create_js__WEBPACK_IMPORTED_MODULE_6__.create)(node, replacement)\n            this.replace(replacement)\n          }\n        }\n      })\n    }\n\n    if (usesResolveDynamicHelper) {\n      if (!baseHref) {\n        usesImportMetaUrlVariable = true\n      }\n\n      tree.body.push(\n        resolveDynamicMdxSpecifier(\n          baseHref\n            ? {type: 'Literal', value: baseHref}\n            : {type: 'Identifier', name: '_importMetaUrl'}\n        )\n      )\n    }\n\n    if (usesImportMetaUrlVariable) {\n      (0,devlop__WEBPACK_IMPORTED_MODULE_7__.ok)(\n        outputFormat === 'function-body',\n        'expected `function-body` when using dynamic url injection'\n      )\n      tree.body.unshift(...createImportMetaUrlVariable())\n    }\n\n    /**\n     * @param {ExportAllDeclaration | ExportNamedDeclaration} node\n     *   Export node.\n     * @returns {undefined}\n     *   Nothing.\n     */\n    function handleExport(node) {\n      if (node.type === 'ExportNamedDeclaration') {\n        // ```tsx\n        // export function a() {}\n        // export class A {}\n        // export var a = 1\n        // ```\n        if (node.declaration) {\n          exportedIdentifiers.push(\n            ...(0,periscopic__WEBPACK_IMPORTED_MODULE_1__.analyze)(node.declaration).scope.declarations.keys()\n          )\n        }\n\n        // ```tsx\n        // export {a, b as c}\n        // export {a, b as c} from 'd'\n        // ```\n        for (child of node.specifiers) {\n          exportedIdentifiers.push(child.exported.name)\n        }\n      }\n\n      handleEsm(node)\n    }\n\n    /**\n     * @param {ExportAllDeclaration | ExportNamedDeclaration | ImportDeclaration} node\n     *   Export or import node.\n     * @returns {undefined}\n     *   Nothing.\n     */\n    function handleEsm(node) {\n      /** @type {ModuleDeclaration | Statement | undefined} */\n      let replace\n      /** @type {Expression} */\n      let init\n\n      if (outputFormat === 'function-body') {\n        if (\n          // Always have a source:\n          node.type === 'ImportDeclaration' ||\n          node.type === 'ExportAllDeclaration' ||\n          // Source optional:\n          (node.type === 'ExportNamedDeclaration' && node.source)\n        ) {\n          // We always have a source, but types say they can be missing.\n          (0,devlop__WEBPACK_IMPORTED_MODULE_7__.ok)(node.source, 'expected `node.source` to be defined')\n\n          // ```\n          // import 'a'\n          // //=> await import('a')\n          // import a from 'b'\n          // //=> const {default: a} = await import('b')\n          // export {a, b as c} from 'd'\n          // //=> const {a, c: b} = await import('d')\n          // export * from 'a'\n          // //=> const _exportAll0 = await import('a')\n          // ```\n          /** @type {ImportExpression} */\n          const argument = {type: 'ImportExpression', source: node.source}\n          ;(0,_util_estree_util_create_js__WEBPACK_IMPORTED_MODULE_6__.create)(node, argument)\n          init = {type: 'AwaitExpression', argument}\n\n          if (\n            (node.type === 'ImportDeclaration' ||\n              node.type === 'ExportNamedDeclaration') &&\n            node.specifiers.length === 0\n          ) {\n            replace = {type: 'ExpressionStatement', expression: init}\n          } else {\n            replace = {\n              type: 'VariableDeclaration',\n              kind: 'const',\n              declarations:\n                node.type === 'ExportAllDeclaration'\n                  ? [\n                      {\n                        type: 'VariableDeclarator',\n                        id: {\n                          type: 'Identifier',\n                          name: '_exportAll' + ++exportAllCount\n                        },\n                        init\n                      }\n                    ]\n                  : (0,_util_estree_util_specifiers_to_declarations_js__WEBPACK_IMPORTED_MODULE_8__.specifiersToDeclarations)(node.specifiers, init)\n            }\n          }\n        } else if (node.declaration) {\n          replace = node.declaration\n        } else {\n          /** @type {Array<VariableDeclarator>} */\n          const declarators = node.specifiers\n            .filter(function (specifier) {\n              return specifier.local.name !== specifier.exported.name\n            })\n            .map(function (specifier) {\n              return {\n                type: 'VariableDeclarator',\n                id: specifier.exported,\n                init: specifier.local\n              }\n            })\n\n          if (declarators.length > 0) {\n            replace = {\n              type: 'VariableDeclaration',\n              kind: 'const',\n              declarations: declarators\n            }\n          }\n        }\n      } else {\n        replace = node\n      }\n\n      if (replace) {\n        replacement.push(replace)\n      }\n    }\n  }\n\n  /**\n   * @param {Readonly<Expression> | undefined} content\n   *   Content.\n   * @param {'function-body' | 'program'} outputFormat\n   *   Output format.\n   * @param {boolean | undefined} [hasInternalLayout=false]\n   *   Whether there’s an internal layout (default: `false`).\n   * @returns {Array<ExportDefaultDeclaration | FunctionDeclaration>}\n   *   Functions.\n   */\n  function createMdxContent(content, outputFormat, hasInternalLayout) {\n    /** @type {JSXElement} */\n    const element = {\n      type: 'JSXElement',\n      openingElement: {\n        type: 'JSXOpeningElement',\n        name: {type: 'JSXIdentifier', name: 'MDXLayout'},\n        attributes: [\n          {\n            type: 'JSXSpreadAttribute',\n            argument: {type: 'Identifier', name: 'props'}\n          }\n        ],\n        selfClosing: false\n      },\n      closingElement: {\n        type: 'JSXClosingElement',\n        name: {type: 'JSXIdentifier', name: 'MDXLayout'}\n      },\n      children: [\n        {\n          type: 'JSXElement',\n          openingElement: {\n            type: 'JSXOpeningElement',\n            name: {type: 'JSXIdentifier', name: '_createMdxContent'},\n            attributes: [\n              {\n                type: 'JSXSpreadAttribute',\n                argument: {type: 'Identifier', name: 'props'}\n              }\n            ],\n            selfClosing: true\n          },\n          closingElement: null,\n          children: []\n        }\n      ]\n    }\n\n    let result = /** @type {Expression} */ (element)\n\n    if (!hasInternalLayout) {\n      result = {\n        type: 'ConditionalExpression',\n        test: {type: 'Identifier', name: 'MDXLayout'},\n        consequent: result,\n        alternate: {\n          type: 'CallExpression',\n          callee: {type: 'Identifier', name: '_createMdxContent'},\n          arguments: [{type: 'Identifier', name: 'props'}],\n          optional: false\n        }\n      }\n    }\n\n    let argument =\n      // Cast because TS otherwise does not think `JSXFragment`s are expressions.\n      /** @type {Readonly<Expression> | Readonly<JSXFragment>} */ (\n        content || {type: 'Identifier', name: 'undefined'}\n      )\n\n    // Unwrap a fragment of a single element.\n    if (\n      argument.type === 'JSXFragment' &&\n      argument.children.length === 1 &&\n      argument.children[0].type === 'JSXElement'\n    ) {\n      argument = argument.children[0]\n    }\n\n    let awaitExpression = false\n\n    ;(0,estree_walker__WEBPACK_IMPORTED_MODULE_0__.walk)(argument, {\n      enter(node) {\n        if (\n          node.type === 'ArrowFunctionExpression' ||\n          node.type === 'FunctionDeclaration' ||\n          node.type === 'FunctionExpression'\n        ) {\n          return this.skip()\n        }\n\n        if (\n          node.type === 'AwaitExpression' ||\n          /* c8 ignore next 2 -- can only occur in a function (which then can\n           * only be async, so skipped it) */\n          (node.type === 'ForOfStatement' && node.await)\n        ) {\n          awaitExpression = true\n        }\n      }\n    })\n\n    /** @type {FunctionDeclaration} */\n    const declaration = {\n      type: 'FunctionDeclaration',\n      id: {type: 'Identifier', name: 'MDXContent'},\n      params: [\n        {\n          type: 'AssignmentPattern',\n          left: {type: 'Identifier', name: 'props'},\n          right: {type: 'ObjectExpression', properties: []}\n        }\n      ],\n      body: {\n        type: 'BlockStatement',\n        body: [{type: 'ReturnStatement', argument: result}]\n      }\n    }\n\n    return [\n      {\n        type: 'FunctionDeclaration',\n        async: awaitExpression,\n        id: {type: 'Identifier', name: '_createMdxContent'},\n        params: [{type: 'Identifier', name: 'props'}],\n        body: {\n          type: 'BlockStatement',\n          body: [\n            {\n              type: 'ReturnStatement',\n              // Cast because TS doesn’t think `JSXFragment` is an expression.\n              // eslint-disable-next-line object-shorthand\n              argument: /** @type {Expression} */ (argument)\n            }\n          ]\n        }\n      },\n      outputFormat === 'program'\n        ? {type: 'ExportDefaultDeclaration', declaration}\n        : declaration\n    ]\n  }\n}\n\n/**\n * @param {Program} tree\n * @param {string} name\n * @param {string} value\n * @returns {undefined}\n */\nfunction injectPragma(tree, name, value) {\n  tree.comments?.unshift({\n    type: 'Block',\n    value: name + ' ' + value,\n    data: {_mdxIsPragmaComment: true}\n  })\n}\n\n/**\n * @param {Expression} importMetaUrl\n * @returns {FunctionDeclaration}\n */\nfunction resolveDynamicMdxSpecifier(importMetaUrl) {\n  return {\n    type: 'FunctionDeclaration',\n    id: {type: 'Identifier', name: '_resolveDynamicMdxSpecifier'},\n    generator: false,\n    async: false,\n    params: [{type: 'Identifier', name: 'd'}],\n    body: {\n      type: 'BlockStatement',\n      body: [\n        {\n          type: 'IfStatement',\n          test: {\n            type: 'BinaryExpression',\n            left: {\n              type: 'UnaryExpression',\n              operator: 'typeof',\n              prefix: true,\n              argument: {type: 'Identifier', name: 'd'}\n            },\n            operator: '!==',\n            right: {type: 'Literal', value: 'string'}\n          },\n          consequent: {\n            type: 'ReturnStatement',\n            argument: {type: 'Identifier', name: 'd'}\n          },\n          alternate: null\n        },\n        // To do: use `URL.canParse` when widely supported (see commented\n        // out code below).\n        {\n          type: 'TryStatement',\n          block: {\n            type: 'BlockStatement',\n            body: [\n              {\n                type: 'ExpressionStatement',\n                expression: {\n                  type: 'NewExpression',\n                  callee: {type: 'Identifier', name: 'URL'},\n                  arguments: [{type: 'Identifier', name: 'd'}]\n                }\n              },\n              {\n                type: 'ReturnStatement',\n                argument: {type: 'Identifier', name: 'd'}\n              }\n            ]\n          },\n          handler: {\n            type: 'CatchClause',\n            param: null,\n            body: {type: 'BlockStatement', body: []}\n          },\n          finalizer: null\n        },\n        // To do: use `URL.canParse` when widely supported.\n        // {\n        //   type: 'IfStatement',\n        //   test: {\n        //     type: 'CallExpression',\n        //     callee: toIdOrMemberExpression(['URL', 'canParse']),\n        //     arguments: [{type: 'Identifier', name: 'd'}],\n        //     optional: false\n        //   },\n        //   consequent: {\n        //     type: 'ReturnStatement',\n        //     argument: {type: 'Identifier', name: 'd'}\n        //   },\n        //   alternate: null\n        // },\n        {\n          type: 'IfStatement',\n          test: {\n            type: 'LogicalExpression',\n            left: {\n              type: 'LogicalExpression',\n              left: {\n                type: 'CallExpression',\n                callee: (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_9__.toIdOrMemberExpression)(['d', 'startsWith']),\n                arguments: [{type: 'Literal', value: '/'}],\n                optional: false\n              },\n              operator: '||',\n              right: {\n                type: 'CallExpression',\n                callee: (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_9__.toIdOrMemberExpression)(['d', 'startsWith']),\n                arguments: [{type: 'Literal', value: './'}],\n                optional: false\n              }\n            },\n            operator: '||',\n            right: {\n              type: 'CallExpression',\n              callee: (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_9__.toIdOrMemberExpression)(['d', 'startsWith']),\n              arguments: [{type: 'Literal', value: '../'}],\n              optional: false\n            }\n          },\n          consequent: {\n            type: 'ReturnStatement',\n            argument: {\n              type: 'MemberExpression',\n              object: {\n                type: 'NewExpression',\n                callee: {type: 'Identifier', name: 'URL'},\n                arguments: [{type: 'Identifier', name: 'd'}, importMetaUrl]\n              },\n              property: {type: 'Identifier', name: 'href'},\n              computed: false,\n              optional: false\n            }\n          },\n          alternate: null\n        },\n        {\n          type: 'ReturnStatement',\n          argument: {type: 'Identifier', name: 'd'}\n        }\n      ]\n    }\n  }\n}\n\n/**\n * @returns {Array<Statement>}\n */\nfunction createImportMetaUrlVariable() {\n  return [\n    {\n      type: 'VariableDeclaration',\n      declarations: [\n        {\n          type: 'VariableDeclarator',\n          id: {type: 'Identifier', name: '_importMetaUrl'},\n          init: (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_9__.toIdOrMemberExpression)(['arguments', 0, 'baseUrl'])\n        }\n      ],\n      kind: 'const'\n    },\n    {\n      type: 'IfStatement',\n      test: {\n        type: 'UnaryExpression',\n        operator: '!',\n        prefix: true,\n        argument: {type: 'Identifier', name: '_importMetaUrl'}\n      },\n      consequent: {\n        type: 'ThrowStatement',\n        argument: {\n          type: 'NewExpression',\n          callee: {type: 'Identifier', name: 'Error'},\n          arguments: [\n            {\n              type: 'Literal',\n              value:\n                'Unexpected missing `options.baseUrl` needed to support `export … from`, `import`, or `import.meta.url` when generating `function-body`'\n            }\n          ]\n        }\n      },\n      alternate: null\n    }\n  ]\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1keC1qcyttZHhAMy4wLjEvbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi9wbHVnaW4vcmVjbWEtZG9jdW1lbnQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBLGFBQWEscUNBQXFDO0FBQ2xELGFBQWEsZ0NBQWdDO0FBQzdDLGFBQWEsMkNBQTJDO0FBQ3hELGFBQWEsK0NBQStDO0FBQzVELGFBQWEsNkNBQTZDO0FBQzFELGFBQWEsc0NBQXNDO0FBQ25ELGFBQWEsaUNBQWlDO0FBQzlDLGFBQWEsMENBQTBDO0FBQ3ZELGFBQWEsaUNBQWlDO0FBQzlDLGFBQWEsd0NBQXdDO0FBQ3JELGFBQWEsNkNBQTZDO0FBQzFELGFBQWEsdUNBQXVDO0FBQ3BELGFBQWEsc0NBQXNDO0FBQ25ELGFBQWEsaUNBQWlDO0FBQzlDLGFBQWEsa0NBQWtDO0FBQy9DLGFBQWEsOEJBQThCO0FBQzNDLGFBQWEsd0NBQXdDO0FBQ3JELGFBQWEsMkJBQTJCO0FBQ3hDLGFBQWEsOEJBQThCO0FBQzNDLGFBQWEsK0JBQStCO0FBQzVDLGFBQWEsb0NBQW9DO0FBQ2pELGFBQWEsb0NBQW9DO0FBQ2pELGFBQWEsZ0NBQWdDO0FBQzdDLGFBQWEseUNBQXlDO0FBQ3REO0FBQ0EsYUFBYSx1QkFBdUI7QUFDcEM7QUFDQSxhQUFhLHVDQUF1QztBQUNwRDs7QUFFbUM7QUFDRDtBQUNBO0FBQ2dDO0FBQ0g7QUFDWDtBQUNvQztBQUNyQjtBQUN1QjtBQUNGOztBQUV4RjtBQUNBO0FBQ0E7QUFDQSxXQUFXLDRCQUE0QjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxhQUFhLFNBQVM7QUFDdEI7QUFDQSxhQUFhLE9BQU87QUFDcEI7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0EsZUFBZSxrQ0FBa0M7QUFDakQ7QUFDQSxlQUFlLGtEQUFrRDtBQUNqRTtBQUNBO0FBQ0EsZUFBZSx3REFBd0Q7QUFDdkU7QUFDQSxlQUFlLHFCQUFxQjtBQUNwQztBQUNBLGVBQWUsTUFBTTtBQUNyQjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsb0JBQW9CO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxnRkFBaUIsQ0FBQyxtRkFBa0I7QUFDbEQ7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLG1GQUFrQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLHNDQUFzQztBQUN6RCxvQkFBb0Isa0ZBQWE7QUFDakMsa0JBQWtCLHVHQUF1QjtBQUN6QztBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLGlCQUFpQixXQUFXO0FBQzVCO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxlQUFlOztBQUVqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsZ0ZBQWlCLENBQUMsbUZBQWtCO0FBQ3REO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixtRkFBa0I7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLHVCQUF1QixpREFBaUQ7QUFDeEU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEIsZUFBZTtBQUNmLGNBQWM7QUFDZCx5QkFBeUIsaUJBQWlCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBLGNBQWMsb0VBQU07QUFDcEI7QUFDQTs7QUFFQSx1QkFBdUIsU0FBUztBQUNoQywwQkFBMEI7QUFDMUIsWUFBWSxvRUFBTTs7QUFFbEIsdUJBQXVCLG1CQUFtQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxvRUFBTTtBQUNsQjs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLHVCQUF1QjtBQUNsRDtBQUNBLHlCQUF5QixXQUFXO0FBQ3BDO0FBQ0EseUJBQXlCLFFBQVE7QUFDakM7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsVUFBVTtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxNQUFNLG1EQUFJO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSwwQ0FBTTs7QUFFbEI7QUFDQTtBQUNBLFlBQVksMkNBQU07O0FBRWxCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7O0FBRUEsdUJBQXVCLGVBQWU7QUFDdEMsaUNBQWlDO0FBQ2pDLFlBQVksb0VBQU07QUFDbEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx1QkFBdUIsZ0JBQWdCO0FBQ3ZDO0FBQ0E7QUFDQSx1QkFBdUIsd0RBQXdEO0FBQy9FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixZQUFZO0FBQ25DLGlDQUFpQztBQUNqQyxZQUFZLG9FQUFNO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2YsZUFBZTtBQUNmO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE1BQU0sMENBQU07QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZUFBZSwrQ0FBK0M7QUFDOUQ7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsbURBQU87QUFDdEI7QUFDQTs7QUFFQTtBQUNBLG1CQUFtQjtBQUNuQixtQkFBbUIsV0FBVztBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxlQUFlLG1FQUFtRTtBQUNsRjtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsMkNBQTJDO0FBQzVEO0FBQ0EsaUJBQWlCLFlBQVk7QUFDN0I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSwwQ0FBTTs7QUFFaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsWUFBWTtBQUNyQyxxQkFBcUIsV0FBVztBQUNoQyx5QkFBeUIsU0FBUztBQUNsQztBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsa0JBQWtCO0FBQ3ZDLDRCQUE0QjtBQUM1QixVQUFVLG9FQUFNO0FBQ2hCLGtCQUFrQjs7QUFFbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IseUdBQXdCO0FBQzVDO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQSxVQUFVO0FBQ1YscUJBQXFCLDJCQUEyQjtBQUNoRDtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGFBQWEsa0NBQWtDO0FBQy9DO0FBQ0EsYUFBYSw2QkFBNkI7QUFDMUM7QUFDQSxhQUFhLHFCQUFxQjtBQUNsQztBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQSxlQUFlLFlBQVk7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLHlDQUF5QztBQUN4RDtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxlQUFlO0FBQ2YsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsaURBQWlEO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw0QkFBNEIsWUFBWTs7QUFFeEM7QUFDQTtBQUNBO0FBQ0EsZUFBZSxzQ0FBc0M7QUFDckQ7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLDhDQUE4QztBQUNqRSx1QkFBdUIsa0NBQWtDO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpQkFBaUIsOENBQThDO0FBQy9ELG9CQUFvQjtBQUNwQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLElBQUksb0RBQUk7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUwsZUFBZSxxQkFBcUI7QUFDcEM7QUFDQTtBQUNBLFdBQVcsdUNBQXVDO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixrQ0FBa0M7QUFDbkQsa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLDBDQUEwQztBQUMxRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSw4Q0FBOEM7QUFDM0Qsa0JBQWtCLGtDQUFrQztBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxZQUFZO0FBQy9DO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFdBQVcsU0FBUztBQUNwQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYLEdBQUc7QUFDSDs7QUFFQTtBQUNBLFdBQVcsWUFBWTtBQUN2QixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLHdEQUF3RDtBQUNqRTtBQUNBO0FBQ0EsY0FBYyw4QkFBOEI7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QixhQUFhO0FBQ2I7QUFDQSxvQkFBb0I7QUFDcEIsV0FBVztBQUNYO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkIsV0FBVztBQUNYO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsZ0NBQWdDO0FBQzNELCtCQUErQiw4QkFBOEI7QUFDN0Q7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQixXQUFXO0FBQ1g7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLDhCQUE4QjtBQUMxRDtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCLGNBQWM7QUFDZDtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHVHQUFzQjtBQUM5Qyw2QkFBNkIsNEJBQTRCO0FBQ3pEO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix1R0FBc0I7QUFDOUMsNkJBQTZCLDZCQUE2QjtBQUMxRDtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQix1R0FBc0I7QUFDNUMsMkJBQTJCLDhCQUE4QjtBQUN6RDtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixnQ0FBZ0M7QUFDekQsNkJBQTZCLDhCQUE4QjtBQUMzRCxlQUFlO0FBQ2YseUJBQXlCLGlDQUFpQztBQUMxRDtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLDJDQUEyQztBQUMxRCxnQkFBZ0IsdUdBQXNCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkIsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLGtDQUFrQztBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2JtXzIwMjQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1keC1qcyttZHhAMy4wLjEvbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi9wbHVnaW4vcmVjbWEtZG9jdW1lbnQuanM/MDRjNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2VzdHJlZS1qc3gnKS5DYWxsRXhwcmVzc2lvbn0gQ2FsbEV4cHJlc3Npb25cbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2VzdHJlZS1qc3gnKS5EaXJlY3RpdmV9IERpcmVjdGl2ZVxuICogQHR5cGVkZWYge2ltcG9ydCgnZXN0cmVlLWpzeCcpLkV4cG9ydEFsbERlY2xhcmF0aW9ufSBFeHBvcnRBbGxEZWNsYXJhdGlvblxuICogQHR5cGVkZWYge2ltcG9ydCgnZXN0cmVlLWpzeCcpLkV4cG9ydERlZmF1bHREZWNsYXJhdGlvbn0gRXhwb3J0RGVmYXVsdERlY2xhcmF0aW9uXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdlc3RyZWUtanN4JykuRXhwb3J0TmFtZWREZWNsYXJhdGlvbn0gRXhwb3J0TmFtZWREZWNsYXJhdGlvblxuICogQHR5cGVkZWYge2ltcG9ydCgnZXN0cmVlLWpzeCcpLkV4cG9ydFNwZWNpZmllcn0gRXhwb3J0U3BlY2lmaWVyXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdlc3RyZWUtanN4JykuRXhwcmVzc2lvbn0gRXhwcmVzc2lvblxuICogQHR5cGVkZWYge2ltcG9ydCgnZXN0cmVlLWpzeCcpLkZ1bmN0aW9uRGVjbGFyYXRpb259IEZ1bmN0aW9uRGVjbGFyYXRpb25cbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2VzdHJlZS1qc3gnKS5JZGVudGlmaWVyfSBJZGVudGlmaWVyXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdlc3RyZWUtanN4JykuSW1wb3J0RGVjbGFyYXRpb259IEltcG9ydERlY2xhcmF0aW9uXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdlc3RyZWUtanN4JykuSW1wb3J0RGVmYXVsdFNwZWNpZmllcn0gSW1wb3J0RGVmYXVsdFNwZWNpZmllclxuICogQHR5cGVkZWYge2ltcG9ydCgnZXN0cmVlLWpzeCcpLkltcG9ydEV4cHJlc3Npb259IEltcG9ydEV4cHJlc3Npb25cbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2VzdHJlZS1qc3gnKS5JbXBvcnRTcGVjaWZpZXJ9IEltcG9ydFNwZWNpZmllclxuICogQHR5cGVkZWYge2ltcG9ydCgnZXN0cmVlLWpzeCcpLkpTWEVsZW1lbnR9IEpTWEVsZW1lbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2VzdHJlZS1qc3gnKS5KU1hGcmFnbWVudH0gSlNYRnJhZ21lbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2VzdHJlZS1qc3gnKS5MaXRlcmFsfSBMaXRlcmFsXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdlc3RyZWUtanN4JykuTW9kdWxlRGVjbGFyYXRpb259IE1vZHVsZURlY2xhcmF0aW9uXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdlc3RyZWUtanN4JykuTm9kZX0gTm9kZVxuICogQHR5cGVkZWYge2ltcG9ydCgnZXN0cmVlLWpzeCcpLlByb2dyYW19IFByb2dyYW1cbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2VzdHJlZS1qc3gnKS5Qcm9wZXJ0eX0gUHJvcGVydHlcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2VzdHJlZS1qc3gnKS5TaW1wbGVMaXRlcmFsfSBTaW1wbGVMaXRlcmFsXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdlc3RyZWUtanN4JykuU3ByZWFkRWxlbWVudH0gU3ByZWFkRWxlbWVudFxuICogQHR5cGVkZWYge2ltcG9ydCgnZXN0cmVlLWpzeCcpLlN0YXRlbWVudH0gU3RhdGVtZW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdlc3RyZWUtanN4JykuVmFyaWFibGVEZWNsYXJhdG9yfSBWYXJpYWJsZURlY2xhcmF0b3JcbiAqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCd2ZmlsZScpLlZGaWxlfSBWRmlsZVxuICpcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL2NvcmUuanMnKS5Qcm9jZXNzb3JPcHRpb25zfSBQcm9jZXNzb3JPcHRpb25zXG4gKi9cblxuaW1wb3J0IHtvayBhcyBhc3NlcnR9IGZyb20gJ2RldmxvcCdcbmltcG9ydCB7d2Fsa30gZnJvbSAnZXN0cmVlLXdhbGtlcidcbmltcG9ydCB7YW5hbHl6ZX0gZnJvbSAncGVyaXNjb3BpYydcbmltcG9ydCB7cG9zaXRpb25Gcm9tRXN0cmVlfSBmcm9tICd1bmlzdC11dGlsLXBvc2l0aW9uLWZyb20tZXN0cmVlJ1xuaW1wb3J0IHtzdHJpbmdpZnlQb3NpdGlvbn0gZnJvbSAndW5pc3QtdXRpbC1zdHJpbmdpZnktcG9zaXRpb24nXG5pbXBvcnQge2NyZWF0ZX0gZnJvbSAnLi4vdXRpbC9lc3RyZWUtdXRpbC1jcmVhdGUuanMnXG5pbXBvcnQge2RlY2xhcmF0aW9uVG9FeHByZXNzaW9ufSBmcm9tICcuLi91dGlsL2VzdHJlZS11dGlsLWRlY2xhcmF0aW9uLXRvLWV4cHJlc3Npb24uanMnXG5pbXBvcnQge2lzRGVjbGFyYXRpb259IGZyb20gJy4uL3V0aWwvZXN0cmVlLXV0aWwtaXMtZGVjbGFyYXRpb24uanMnXG5pbXBvcnQge3NwZWNpZmllcnNUb0RlY2xhcmF0aW9uc30gZnJvbSAnLi4vdXRpbC9lc3RyZWUtdXRpbC1zcGVjaWZpZXJzLXRvLWRlY2xhcmF0aW9ucy5qcydcbmltcG9ydCB7dG9JZE9yTWVtYmVyRXhwcmVzc2lvbn0gZnJvbSAnLi4vdXRpbC9lc3RyZWUtdXRpbC10by1pZC1vci1tZW1iZXItZXhwcmVzc2lvbi5qcydcblxuLyoqXG4gKiBXcmFwIHRoZSBlc3RyZWUgaW4gYE1EWENvbnRlbnRgLlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8UHJvY2Vzc29yT3B0aW9ucz59IG9wdGlvbnNcbiAqICAgQ29uZmlndXJhdGlvbi5cbiAqIEByZXR1cm5zXG4gKiAgIFRyYW5zZm9ybS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlY21hRG9jdW1lbnQob3B0aW9ucykge1xuICBjb25zdCBiYXNlVXJsID0gb3B0aW9ucy5iYXNlVXJsIHx8IHVuZGVmaW5lZFxuICBjb25zdCBiYXNlSHJlZiA9IHR5cGVvZiBiYXNlVXJsID09PSAnb2JqZWN0JyA/IGJhc2VVcmwuaHJlZiA6IGJhc2VVcmxcbiAgY29uc3Qgb3V0cHV0Rm9ybWF0ID0gb3B0aW9ucy5vdXRwdXRGb3JtYXQgfHwgJ3Byb2dyYW0nXG4gIGNvbnN0IHByYWdtYSA9XG4gICAgb3B0aW9ucy5wcmFnbWEgPT09IHVuZGVmaW5lZCA/ICdSZWFjdC5jcmVhdGVFbGVtZW50JyA6IG9wdGlvbnMucHJhZ21hXG4gIGNvbnN0IHByYWdtYUZyYWcgPVxuICAgIG9wdGlvbnMucHJhZ21hRnJhZyA9PT0gdW5kZWZpbmVkID8gJ1JlYWN0LkZyYWdtZW50JyA6IG9wdGlvbnMucHJhZ21hRnJhZ1xuICBjb25zdCBwcmFnbWFJbXBvcnRTb3VyY2UgPSBvcHRpb25zLnByYWdtYUltcG9ydFNvdXJjZSB8fCAncmVhY3QnXG4gIGNvbnN0IGpzeEltcG9ydFNvdXJjZSA9IG9wdGlvbnMuanN4SW1wb3J0U291cmNlIHx8ICdyZWFjdCdcbiAgY29uc3QganN4UnVudGltZSA9IG9wdGlvbnMuanN4UnVudGltZSB8fCAnYXV0b21hdGljJ1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1Byb2dyYW19IHRyZWVcbiAgICogICBUcmVlLlxuICAgKiBAcGFyYW0ge1ZGaWxlfSBmaWxlXG4gICAqICAgRmlsZS5cbiAgICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAgICogICBOb3RoaW5nLlxuICAgKi9cbiAgcmV0dXJuIGZ1bmN0aW9uICh0cmVlLCBmaWxlKSB7XG4gICAgLyoqIEB0eXBlIHtBcnJheTxbc3RyaW5nLCBzdHJpbmddIHwgc3RyaW5nPn0gKi9cbiAgICBjb25zdCBleHBvcnRlZElkZW50aWZpZXJzID0gW11cbiAgICAvKiogQHR5cGUge0FycmF5PERpcmVjdGl2ZSB8IE1vZHVsZURlY2xhcmF0aW9uIHwgU3RhdGVtZW50Pn0gKi9cbiAgICBjb25zdCByZXBsYWNlbWVudCA9IFtdXG4gICAgbGV0IGV4cG9ydEFsbENvdW50ID0gMFxuICAgIC8qKiBAdHlwZSB7RXhwb3J0RGVmYXVsdERlY2xhcmF0aW9uIHwgRXhwb3J0U3BlY2lmaWVyIHwgdW5kZWZpbmVkfSAqL1xuICAgIGxldCBsYXlvdXRcbiAgICAvKiogQHR5cGUge2Jvb2xlYW4gfCB1bmRlZmluZWR9ICovXG4gICAgbGV0IGNvbnRlbnRcbiAgICAvKiogQHR5cGUge05vZGV9ICovXG4gICAgbGV0IGNoaWxkXG5cbiAgICBpZiAoanN4UnVudGltZSA9PT0gJ2NsYXNzaWMnICYmIHByYWdtYUZyYWcpIHtcbiAgICAgIGluamVjdFByYWdtYSh0cmVlLCAnQGpzeEZyYWcnLCBwcmFnbWFGcmFnKVxuICAgIH1cblxuICAgIGlmIChqc3hSdW50aW1lID09PSAnY2xhc3NpYycgJiYgcHJhZ21hKSB7XG4gICAgICBpbmplY3RQcmFnbWEodHJlZSwgJ0Bqc3gnLCBwcmFnbWEpXG4gICAgfVxuXG4gICAgaWYgKGpzeFJ1bnRpbWUgPT09ICdhdXRvbWF0aWMnICYmIGpzeEltcG9ydFNvdXJjZSkge1xuICAgICAgaW5qZWN0UHJhZ21hKHRyZWUsICdAanN4SW1wb3J0U291cmNlJywganN4SW1wb3J0U291cmNlKVxuICAgIH1cblxuICAgIGlmIChqc3hSdW50aW1lKSB7XG4gICAgICBpbmplY3RQcmFnbWEodHJlZSwgJ0Bqc3hSdW50aW1lJywganN4UnVudGltZSlcbiAgICB9XG5cbiAgICBpZiAoanN4UnVudGltZSA9PT0gJ2NsYXNzaWMnICYmIHByYWdtYUltcG9ydFNvdXJjZSkge1xuICAgICAgaWYgKCFwcmFnbWEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdNaXNzaW5nIGBwcmFnbWFgIGluIGNsYXNzaWMgcnVudGltZSB3aXRoIGBwcmFnbWFJbXBvcnRTb3VyY2VgJ1xuICAgICAgICApXG4gICAgICB9XG5cbiAgICAgIGhhbmRsZUVzbSh7XG4gICAgICAgIHR5cGU6ICdJbXBvcnREZWNsYXJhdGlvbicsXG4gICAgICAgIHNwZWNpZmllcnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICB0eXBlOiAnSW1wb3J0RGVmYXVsdFNwZWNpZmllcicsXG4gICAgICAgICAgICBsb2NhbDoge3R5cGU6ICdJZGVudGlmaWVyJywgbmFtZTogcHJhZ21hLnNwbGl0KCcuJylbMF19XG4gICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBzb3VyY2U6IHt0eXBlOiAnTGl0ZXJhbCcsIHZhbHVlOiBwcmFnbWFJbXBvcnRTb3VyY2V9XG4gICAgICB9KVxuICAgIH1cblxuICAgIC8vIEZpbmQgdGhlIGBleHBvcnQgZGVmYXVsdGAsIHRoZSBKU1ggZXhwcmVzc2lvbiwgYW5kIGxlYXZlIHRoZSByZXN0XG4gICAgLy8gKGltcG9ydC9leHBvcnRzKSBhcyB0aGV5IGFyZS5cbiAgICBmb3IgKGNoaWxkIG9mIHRyZWUuYm9keSkge1xuICAgICAgLy8gYGBgdHN4XG4gICAgICAvLyBleHBvcnQgZGVmYXVsdCBwcm9wZXJ0aWVzID0+IDw+e3Byb3BlcnRpZXMuY2hpbGRyZW59PC8+XG4gICAgICAvLyBgYGBcbiAgICAgIC8vXG4gICAgICAvLyBUcmVhdCBpdCBhcyBhbiBpbmxpbmUgbGF5b3V0IGRlY2xhcmF0aW9uLlxuICAgICAgaWYgKGNoaWxkLnR5cGUgPT09ICdFeHBvcnREZWZhdWx0RGVjbGFyYXRpb24nKSB7XG4gICAgICAgIGlmIChsYXlvdXQpIHtcbiAgICAgICAgICBmaWxlLmZhaWwoXG4gICAgICAgICAgICAnVW5leHBlY3RlZCBkdXBsaWNhdGUgbGF5b3V0LCBleHBlY3RlZCBhIHNpbmdsZSBsYXlvdXQgKHByZXZpb3VzOiAnICtcbiAgICAgICAgICAgICAgc3RyaW5naWZ5UG9zaXRpb24ocG9zaXRpb25Gcm9tRXN0cmVlKGxheW91dCkpICtcbiAgICAgICAgICAgICAgJyknLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBhbmNlc3RvcnM6IFt0cmVlLCBjaGlsZF0sXG4gICAgICAgICAgICAgIHBsYWNlOiBwb3NpdGlvbkZyb21Fc3RyZWUoY2hpbGQpLFxuICAgICAgICAgICAgICBydWxlSWQ6ICdkdXBsaWNhdGUtbGF5b3V0JyxcbiAgICAgICAgICAgICAgc291cmNlOiAncmVjbWEtZG9jdW1lbnQnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgKVxuICAgICAgICB9XG5cbiAgICAgICAgbGF5b3V0ID0gY2hpbGRcbiAgICAgICAgcmVwbGFjZW1lbnQucHVzaCh7XG4gICAgICAgICAgdHlwZTogJ1ZhcmlhYmxlRGVjbGFyYXRpb24nLFxuICAgICAgICAgIGtpbmQ6ICdjb25zdCcsXG4gICAgICAgICAgZGVjbGFyYXRpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHR5cGU6ICdWYXJpYWJsZURlY2xhcmF0b3InLFxuICAgICAgICAgICAgICBpZDoge3R5cGU6ICdJZGVudGlmaWVyJywgbmFtZTogJ01EWExheW91dCd9LFxuICAgICAgICAgICAgICBpbml0OiBpc0RlY2xhcmF0aW9uKGNoaWxkLmRlY2xhcmF0aW9uKVxuICAgICAgICAgICAgICAgID8gZGVjbGFyYXRpb25Ub0V4cHJlc3Npb24oY2hpbGQuZGVjbGFyYXRpb24pXG4gICAgICAgICAgICAgICAgOiBjaGlsZC5kZWNsYXJhdGlvblxuICAgICAgICAgICAgfVxuICAgICAgICAgIF1cbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICAgIC8vIGBgYHRzeFxuICAgICAgLy8gZXhwb3J0IHthLCBiIGFzIGN9IGZyb20gJ2QnXG4gICAgICAvLyBgYGBcbiAgICAgIGVsc2UgaWYgKGNoaWxkLnR5cGUgPT09ICdFeHBvcnROYW1lZERlY2xhcmF0aW9uJyAmJiBjaGlsZC5zb3VyY2UpIHtcbiAgICAgICAgLy8gQ2FzdCBiZWNhdXNlIGFsd2F5cyBzaW1wbGUuXG4gICAgICAgIGNvbnN0IHNvdXJjZSA9IC8qKiBAdHlwZSB7U2ltcGxlTGl0ZXJhbH0gKi8gKGNoaWxkLnNvdXJjZSlcblxuICAgICAgICAvLyBSZW1vdmUgYGRlZmF1bHRgIG9yIGBhcyBkZWZhdWx0YCwgYnV0IG5vdCBgZGVmYXVsdCBhc2AsIHNwZWNpZmllci5cbiAgICAgICAgY2hpbGQuc3BlY2lmaWVycyA9IGNoaWxkLnNwZWNpZmllcnMuZmlsdGVyKGZ1bmN0aW9uIChzcGVjaWZpZXIpIHtcbiAgICAgICAgICBpZiAoc3BlY2lmaWVyLmV4cG9ydGVkLm5hbWUgPT09ICdkZWZhdWx0Jykge1xuICAgICAgICAgICAgaWYgKGxheW91dCkge1xuICAgICAgICAgICAgICBmaWxlLmZhaWwoXG4gICAgICAgICAgICAgICAgJ1VuZXhwZWN0ZWQgZHVwbGljYXRlIGxheW91dCwgZXhwZWN0ZWQgYSBzaW5nbGUgbGF5b3V0IChwcmV2aW91czogJyArXG4gICAgICAgICAgICAgICAgICBzdHJpbmdpZnlQb3NpdGlvbihwb3NpdGlvbkZyb21Fc3RyZWUobGF5b3V0KSkgK1xuICAgICAgICAgICAgICAgICAgJyknLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIGFuY2VzdG9yczogW3RyZWUsIGNoaWxkLCBzcGVjaWZpZXJdLFxuICAgICAgICAgICAgICAgICAgcGxhY2U6IHBvc2l0aW9uRnJvbUVzdHJlZShjaGlsZCksXG4gICAgICAgICAgICAgICAgICBydWxlSWQ6ICdkdXBsaWNhdGUtbGF5b3V0JyxcbiAgICAgICAgICAgICAgICAgIHNvdXJjZTogJ3JlY21hLWRvY3VtZW50J1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsYXlvdXQgPSBzcGVjaWZpZXJcblxuICAgICAgICAgICAgLy8gTWFrZSBpdCBqdXN0IGFuIGltcG9ydDogYGltcG9ydCBNRFhMYXlvdXQgZnJvbSAn4oCmJ2AuXG4gICAgICAgICAgICAvKiogQHR5cGUge0FycmF5PEltcG9ydERlZmF1bHRTcGVjaWZpZXIgfCBJbXBvcnRTcGVjaWZpZXI+fSAqL1xuICAgICAgICAgICAgY29uc3Qgc3BlY2lmaWVycyA9IFtdXG5cbiAgICAgICAgICAgIC8vIERlZmF1bHQgYXMgZGVmYXVsdCAvIHNvbWV0aGluZyBlbHNlIGFzIGRlZmF1bHQuXG4gICAgICAgICAgICBpZiAoc3BlY2lmaWVyLmxvY2FsLm5hbWUgPT09ICdkZWZhdWx0Jykge1xuICAgICAgICAgICAgICBzcGVjaWZpZXJzLnB1c2goe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdJbXBvcnREZWZhdWx0U3BlY2lmaWVyJyxcbiAgICAgICAgICAgICAgICBsb2NhbDoge3R5cGU6ICdJZGVudGlmaWVyJywgbmFtZTogJ01EWExheW91dCd9XG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvKiogQHR5cGUge0ltcG9ydFNwZWNpZmllcn0gKi9cbiAgICAgICAgICAgICAgY29uc3QgaW1wb3J0U3BlY2lmaWVyID0ge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdJbXBvcnRTcGVjaWZpZXInLFxuICAgICAgICAgICAgICAgIGltcG9ydGVkOiBzcGVjaWZpZXIubG9jYWwsXG4gICAgICAgICAgICAgICAgbG9jYWw6IHt0eXBlOiAnSWRlbnRpZmllcicsIG5hbWU6ICdNRFhMYXlvdXQnfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNyZWF0ZShzcGVjaWZpZXIubG9jYWwsIGltcG9ydFNwZWNpZmllcilcbiAgICAgICAgICAgICAgc3BlY2lmaWVycy5wdXNoKGltcG9ydFNwZWNpZmllcilcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqIEB0eXBlIHtMaXRlcmFsfSAqL1xuICAgICAgICAgICAgY29uc3QgZnJvbSA9IHt0eXBlOiAnTGl0ZXJhbCcsIHZhbHVlOiBzb3VyY2UudmFsdWV9XG4gICAgICAgICAgICBjcmVhdGUoc291cmNlLCBmcm9tKVxuXG4gICAgICAgICAgICAvKiogQHR5cGUge0ltcG9ydERlY2xhcmF0aW9ufSAqL1xuICAgICAgICAgICAgY29uc3QgZGVjbGFyYXRpb24gPSB7XG4gICAgICAgICAgICAgIHR5cGU6ICdJbXBvcnREZWNsYXJhdGlvbicsXG4gICAgICAgICAgICAgIHNwZWNpZmllcnMsXG4gICAgICAgICAgICAgIHNvdXJjZTogZnJvbVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3JlYXRlKHNwZWNpZmllciwgZGVjbGFyYXRpb24pXG4gICAgICAgICAgICBoYW5kbGVFc20oZGVjbGFyYXRpb24pXG5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH0pXG5cbiAgICAgICAgLy8gSWYgdGhlcmUgYXJlIG90aGVyIHRoaW5ncyBpbXBvcnRlZCwga2VlcCBpdC5cbiAgICAgICAgaWYgKGNoaWxkLnNwZWNpZmllcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGhhbmRsZUV4cG9ydChjaGlsZClcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gYGBgdHN4XG4gICAgICAvLyBleHBvcnQge2EsIGIgYXMgY31cbiAgICAgIC8vIGV4cG9ydCAqIGZyb20gJ2EnXG4gICAgICAvLyBgYGBcbiAgICAgIGVsc2UgaWYgKFxuICAgICAgICBjaGlsZC50eXBlID09PSAnRXhwb3J0TmFtZWREZWNsYXJhdGlvbicgfHxcbiAgICAgICAgY2hpbGQudHlwZSA9PT0gJ0V4cG9ydEFsbERlY2xhcmF0aW9uJ1xuICAgICAgKSB7XG4gICAgICAgIGhhbmRsZUV4cG9ydChjaGlsZClcbiAgICAgIH0gZWxzZSBpZiAoY2hpbGQudHlwZSA9PT0gJ0ltcG9ydERlY2xhcmF0aW9uJykge1xuICAgICAgICBoYW5kbGVFc20oY2hpbGQpXG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICBjaGlsZC50eXBlID09PSAnRXhwcmVzc2lvblN0YXRlbWVudCcgJiZcbiAgICAgICAgKGNoaWxkLmV4cHJlc3Npb24udHlwZSA9PT0gJ0pTWEVsZW1lbnQnIHx8XG4gICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogYGVzdHJlZS1qc3hgIGRvZXMgbm90IHJlZ2lzdGVyIGBKU1hGcmFnbWVudGAgYXMgYW4gZXhwcmVzc2lvbi5cbiAgICAgICAgICBjaGlsZC5leHByZXNzaW9uLnR5cGUgPT09ICdKU1hGcmFnbWVudCcpXG4gICAgICApIHtcbiAgICAgICAgY29udGVudCA9IHRydWVcbiAgICAgICAgcmVwbGFjZW1lbnQucHVzaChcbiAgICAgICAgICAuLi5jcmVhdGVNZHhDb250ZW50KGNoaWxkLmV4cHJlc3Npb24sIG91dHB1dEZvcm1hdCwgQm9vbGVhbihsYXlvdXQpKVxuICAgICAgICApXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBUaGlzIGNhdGNoLWFsbCBicmFuY2ggaXMgYmVjYXVzZSBwbHVnaW5zIG1pZ2h0IGFkZCBvdGhlciB0aGluZ3MuXG4gICAgICAgIC8vIE5vcm1hbGx5LCB3ZSBvbmx5IGhhdmUgaW1wb3J0L2V4cG9ydC9qc3gsIGJ1dCBqdXN0IGFkZCB3aGF0ZXZlcuKAmXNcbiAgICAgICAgLy8gdGhlcmUuXG4gICAgICAgIHJlcGxhY2VtZW50LnB1c2goY2hpbGQpXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlcmUgd2FzIG5vIEpTWCBjb250ZW50IGF0IGFsbCwgYWRkIGFuIGVtcHR5IGZ1bmN0aW9uLlxuICAgIGlmICghY29udGVudCkge1xuICAgICAgcmVwbGFjZW1lbnQucHVzaChcbiAgICAgICAgLi4uY3JlYXRlTWR4Q29udGVudCh1bmRlZmluZWQsIG91dHB1dEZvcm1hdCwgQm9vbGVhbihsYXlvdXQpKVxuICAgICAgKVxuICAgIH1cblxuICAgIGV4cG9ydGVkSWRlbnRpZmllcnMucHVzaChbJ01EWENvbnRlbnQnLCAnZGVmYXVsdCddKVxuXG4gICAgaWYgKG91dHB1dEZvcm1hdCA9PT0gJ2Z1bmN0aW9uLWJvZHknKSB7XG4gICAgICByZXBsYWNlbWVudC5wdXNoKHtcbiAgICAgICAgdHlwZTogJ1JldHVyblN0YXRlbWVudCcsXG4gICAgICAgIGFyZ3VtZW50OiB7XG4gICAgICAgICAgdHlwZTogJ09iamVjdEV4cHJlc3Npb24nLFxuICAgICAgICAgIHByb3BlcnRpZXM6IFtcbiAgICAgICAgICAgIC4uLkFycmF5LmZyb20oe2xlbmd0aDogZXhwb3J0QWxsQ291bnR9KS5tYXAoXG4gICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgKiBAcGFyYW0ge3VuZGVmaW5lZH0gX1xuICAgICAgICAgICAgICAgKiAgIE5vdGhpbmcuXG4gICAgICAgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICAgICAgICAgICAgICAgKiAgIEluZGV4LlxuICAgICAgICAgICAgICAgKiBAcmV0dXJucyB7U3ByZWFkRWxlbWVudH1cbiAgICAgICAgICAgICAgICogICBOb2RlLlxuICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgZnVuY3Rpb24gKF8sIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgIHR5cGU6ICdTcHJlYWRFbGVtZW50JyxcbiAgICAgICAgICAgICAgICAgIGFyZ3VtZW50OiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdJZGVudGlmaWVyJyxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ19leHBvcnRBbGwnICsgKGluZGV4ICsgMSlcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICksXG4gICAgICAgICAgICAuLi5leHBvcnRlZElkZW50aWZpZXJzLm1hcChmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAvKiogQHR5cGUge1Byb3BlcnR5fSAqL1xuICAgICAgICAgICAgICBjb25zdCBwcm9wZXJ0eSA9IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnUHJvcGVydHknLFxuICAgICAgICAgICAgICAgIGtpbmQ6ICdpbml0JyxcbiAgICAgICAgICAgICAgICBtZXRob2Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGNvbXB1dGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzaG9ydGhhbmQ6IHR5cGVvZiBkID09PSAnc3RyaW5nJyxcbiAgICAgICAgICAgICAgICBrZXk6IHtcbiAgICAgICAgICAgICAgICAgIHR5cGU6ICdJZGVudGlmaWVyJyxcbiAgICAgICAgICAgICAgICAgIG5hbWU6IHR5cGVvZiBkID09PSAnc3RyaW5nJyA/IGQgOiBkWzFdXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgICAgICAgdHlwZTogJ0lkZW50aWZpZXInLFxuICAgICAgICAgICAgICAgICAgbmFtZTogdHlwZW9mIGQgPT09ICdzdHJpbmcnID8gZCA6IGRbMF1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICByZXR1cm4gcHJvcGVydHlcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgXVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cblxuICAgIHRyZWUuYm9keSA9IHJlcGxhY2VtZW50XG5cbiAgICBsZXQgdXNlc0ltcG9ydE1ldGFVcmxWYXJpYWJsZSA9IGZhbHNlXG4gICAgbGV0IHVzZXNSZXNvbHZlRHluYW1pY0hlbHBlciA9IGZhbHNlXG5cbiAgICBpZiAoYmFzZUhyZWYgfHwgb3V0cHV0Rm9ybWF0ID09PSAnZnVuY3Rpb24tYm9keScpIHtcbiAgICAgIHdhbGsodHJlZSwge1xuICAgICAgICBlbnRlcihub2RlKSB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgKG5vZGUudHlwZSA9PT0gJ0V4cG9ydEFsbERlY2xhcmF0aW9uJyB8fFxuICAgICAgICAgICAgICBub2RlLnR5cGUgPT09ICdFeHBvcnROYW1lZERlY2xhcmF0aW9uJyB8fFxuICAgICAgICAgICAgICBub2RlLnR5cGUgPT09ICdJbXBvcnREZWNsYXJhdGlvbicpICYmXG4gICAgICAgICAgICBub2RlLnNvdXJjZVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgLy8gV2UgbmV2ZXIgaGl0IHRoaXMgYnJhbmNoIHdoZW4gZ2VuZXJhdGluZyBmdW5jdGlvbiBib2RpZXMsIGFzXG4gICAgICAgICAgICAvLyBzdGF0ZW1lbnRzIGFyZSBhbHJlYWR5IGNvbXBpbGVkIGF3YXkgaW50byBpbXBvcnQgZXhwcmVzc2lvbnMuXG4gICAgICAgICAgICBhc3NlcnQoYmFzZUhyZWYsICd1bmV4cGVjdGVkIG1pc3NpbmcgYGJhc2VIcmVmYCBpbiBicmFuY2gnKVxuXG4gICAgICAgICAgICBsZXQgdmFsdWUgPSBub2RlLnNvdXJjZS52YWx1ZVxuICAgICAgICAgICAgLy8gVGhlIGxpdGVyYWwgc291cmNlIGZvciBzdGF0ZW1lbnRzIGNhbiBvbmx5IGJlIHN0cmluZy5cbiAgICAgICAgICAgIGFzc2VydCh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnLCAnZXhwZWN0ZWQgc3RyaW5nIHNvdXJjZScpXG5cbiAgICAgICAgICAgIC8vIFJlc29sdmUgYSBzcGVjaWZpZXIuXG4gICAgICAgICAgICAvLyBUaGlzIGlzIHRoZSBzYW1lIGFzIGBfcmVzb2x2ZUR5bmFtaWNNZHhTcGVjaWZpZXJgLCB3aGljaCBoYXMgdG9cbiAgICAgICAgICAgIC8vIGJlIGluamVjdGVkIHRvIHdvcmsgd2l0aCBleHByZXNzaW9ucyBhdCBydW50aW1lLCBidXQgYXMgd2UgaGF2ZVxuICAgICAgICAgICAgLy8gYGJhc2VIcmVmYCBhdCBjb21waWxlIHRpbWUgaGVyZSBhbmQgc3RhdGVtZW50cyBhcmUgc3RhdGljXG4gICAgICAgICAgICAvLyBzdHJpbmdzLCB3ZSBjYW4gZG8gaXQgbm93LlxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgLy8gVG8gZG86IHVzZSBgVVJMLmNhblBhcnNlYCBuZXh0IG1ham9yLlxuICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3XG4gICAgICAgICAgICAgIG5ldyBVUkwodmFsdWUpXG4gICAgICAgICAgICAgIC8vIEZpbmU6IGEgZnVsbCBVUkwuXG4gICAgICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIHZhbHVlLnN0YXJ0c1dpdGgoJy8nKSB8fFxuICAgICAgICAgICAgICAgIHZhbHVlLnN0YXJ0c1dpdGgoJy4vJykgfHxcbiAgICAgICAgICAgICAgICB2YWx1ZS5zdGFydHNXaXRoKCcuLi8nKVxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IG5ldyBVUkwodmFsdWUsIGJhc2VIcmVmKS5ocmVmXG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gRmluZTogYXJlIGJhcmUgc3BlY2lmaWVyLlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKiBAdHlwZSB7U2ltcGxlTGl0ZXJhbH0gKi9cbiAgICAgICAgICAgIGNvbnN0IHJlcGxhY2VtZW50ID0ge3R5cGU6ICdMaXRlcmFsJywgdmFsdWV9XG4gICAgICAgICAgICBjcmVhdGUobm9kZS5zb3VyY2UsIHJlcGxhY2VtZW50KVxuICAgICAgICAgICAgbm9kZS5zb3VyY2UgPSByZXBsYWNlbWVudFxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKG5vZGUudHlwZSA9PT0gJ0ltcG9ydEV4cHJlc3Npb24nKSB7XG4gICAgICAgICAgICB1c2VzUmVzb2x2ZUR5bmFtaWNIZWxwZXIgPSB0cnVlXG4gICAgICAgICAgICAvKiogQHR5cGUge0NhbGxFeHByZXNzaW9ufSAqL1xuICAgICAgICAgICAgY29uc3QgcmVwbGFjZW1lbnQgPSB7XG4gICAgICAgICAgICAgIHR5cGU6ICdDYWxsRXhwcmVzc2lvbicsXG4gICAgICAgICAgICAgIGNhbGxlZToge3R5cGU6ICdJZGVudGlmaWVyJywgbmFtZTogJ19yZXNvbHZlRHluYW1pY01keFNwZWNpZmllcid9LFxuICAgICAgICAgICAgICBhcmd1bWVudHM6IFtub2RlLnNvdXJjZV0sXG4gICAgICAgICAgICAgIG9wdGlvbmFsOiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbm9kZS5zb3VyY2UgPSByZXBsYWNlbWVudFxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gVG8gZG86IGFkZCBzdXBwb3J0IGZvciBgaW1wb3J0Lm1ldGEucmVzb2x2ZWAuXG5cbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBub2RlLnR5cGUgPT09ICdNZW1iZXJFeHByZXNzaW9uJyAmJlxuICAgICAgICAgICAgJ29iamVjdCcgaW4gbm9kZSAmJlxuICAgICAgICAgICAgbm9kZS5vYmplY3QudHlwZSA9PT0gJ01ldGFQcm9wZXJ0eScgJiZcbiAgICAgICAgICAgIG5vZGUucHJvcGVydHkudHlwZSA9PT0gJ0lkZW50aWZpZXInICYmXG4gICAgICAgICAgICBub2RlLm9iamVjdC5tZXRhLm5hbWUgPT09ICdpbXBvcnQnICYmXG4gICAgICAgICAgICBub2RlLm9iamVjdC5wcm9wZXJ0eS5uYW1lID09PSAnbWV0YScgJiZcbiAgICAgICAgICAgIG5vZGUucHJvcGVydHkubmFtZSA9PT0gJ3VybCdcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHVzZXNJbXBvcnRNZXRhVXJsVmFyaWFibGUgPSB0cnVlXG4gICAgICAgICAgICAvKiogQHR5cGUge0lkZW50aWZpZXJ9ICovXG4gICAgICAgICAgICBjb25zdCByZXBsYWNlbWVudCA9IHt0eXBlOiAnSWRlbnRpZmllcicsIG5hbWU6ICdfaW1wb3J0TWV0YVVybCd9XG4gICAgICAgICAgICBjcmVhdGUobm9kZSwgcmVwbGFjZW1lbnQpXG4gICAgICAgICAgICB0aGlzLnJlcGxhY2UocmVwbGFjZW1lbnQpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cblxuICAgIGlmICh1c2VzUmVzb2x2ZUR5bmFtaWNIZWxwZXIpIHtcbiAgICAgIGlmICghYmFzZUhyZWYpIHtcbiAgICAgICAgdXNlc0ltcG9ydE1ldGFVcmxWYXJpYWJsZSA9IHRydWVcbiAgICAgIH1cblxuICAgICAgdHJlZS5ib2R5LnB1c2goXG4gICAgICAgIHJlc29sdmVEeW5hbWljTWR4U3BlY2lmaWVyKFxuICAgICAgICAgIGJhc2VIcmVmXG4gICAgICAgICAgICA/IHt0eXBlOiAnTGl0ZXJhbCcsIHZhbHVlOiBiYXNlSHJlZn1cbiAgICAgICAgICAgIDoge3R5cGU6ICdJZGVudGlmaWVyJywgbmFtZTogJ19pbXBvcnRNZXRhVXJsJ31cbiAgICAgICAgKVxuICAgICAgKVxuICAgIH1cblxuICAgIGlmICh1c2VzSW1wb3J0TWV0YVVybFZhcmlhYmxlKSB7XG4gICAgICBhc3NlcnQoXG4gICAgICAgIG91dHB1dEZvcm1hdCA9PT0gJ2Z1bmN0aW9uLWJvZHknLFxuICAgICAgICAnZXhwZWN0ZWQgYGZ1bmN0aW9uLWJvZHlgIHdoZW4gdXNpbmcgZHluYW1pYyB1cmwgaW5qZWN0aW9uJ1xuICAgICAgKVxuICAgICAgdHJlZS5ib2R5LnVuc2hpZnQoLi4uY3JlYXRlSW1wb3J0TWV0YVVybFZhcmlhYmxlKCkpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtFeHBvcnRBbGxEZWNsYXJhdGlvbiB8IEV4cG9ydE5hbWVkRGVjbGFyYXRpb259IG5vZGVcbiAgICAgKiAgIEV4cG9ydCBub2RlLlxuICAgICAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gICAgICogICBOb3RoaW5nLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhbmRsZUV4cG9ydChub2RlKSB7XG4gICAgICBpZiAobm9kZS50eXBlID09PSAnRXhwb3J0TmFtZWREZWNsYXJhdGlvbicpIHtcbiAgICAgICAgLy8gYGBgdHN4XG4gICAgICAgIC8vIGV4cG9ydCBmdW5jdGlvbiBhKCkge31cbiAgICAgICAgLy8gZXhwb3J0IGNsYXNzIEEge31cbiAgICAgICAgLy8gZXhwb3J0IHZhciBhID0gMVxuICAgICAgICAvLyBgYGBcbiAgICAgICAgaWYgKG5vZGUuZGVjbGFyYXRpb24pIHtcbiAgICAgICAgICBleHBvcnRlZElkZW50aWZpZXJzLnB1c2goXG4gICAgICAgICAgICAuLi5hbmFseXplKG5vZGUuZGVjbGFyYXRpb24pLnNjb3BlLmRlY2xhcmF0aW9ucy5rZXlzKClcbiAgICAgICAgICApXG4gICAgICAgIH1cblxuICAgICAgICAvLyBgYGB0c3hcbiAgICAgICAgLy8gZXhwb3J0IHthLCBiIGFzIGN9XG4gICAgICAgIC8vIGV4cG9ydCB7YSwgYiBhcyBjfSBmcm9tICdkJ1xuICAgICAgICAvLyBgYGBcbiAgICAgICAgZm9yIChjaGlsZCBvZiBub2RlLnNwZWNpZmllcnMpIHtcbiAgICAgICAgICBleHBvcnRlZElkZW50aWZpZXJzLnB1c2goY2hpbGQuZXhwb3J0ZWQubmFtZSlcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBoYW5kbGVFc20obm9kZSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0V4cG9ydEFsbERlY2xhcmF0aW9uIHwgRXhwb3J0TmFtZWREZWNsYXJhdGlvbiB8IEltcG9ydERlY2xhcmF0aW9ufSBub2RlXG4gICAgICogICBFeHBvcnQgb3IgaW1wb3J0IG5vZGUuXG4gICAgICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAgICAgKiAgIE5vdGhpbmcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFuZGxlRXNtKG5vZGUpIHtcbiAgICAgIC8qKiBAdHlwZSB7TW9kdWxlRGVjbGFyYXRpb24gfCBTdGF0ZW1lbnQgfCB1bmRlZmluZWR9ICovXG4gICAgICBsZXQgcmVwbGFjZVxuICAgICAgLyoqIEB0eXBlIHtFeHByZXNzaW9ufSAqL1xuICAgICAgbGV0IGluaXRcblxuICAgICAgaWYgKG91dHB1dEZvcm1hdCA9PT0gJ2Z1bmN0aW9uLWJvZHknKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAvLyBBbHdheXMgaGF2ZSBhIHNvdXJjZTpcbiAgICAgICAgICBub2RlLnR5cGUgPT09ICdJbXBvcnREZWNsYXJhdGlvbicgfHxcbiAgICAgICAgICBub2RlLnR5cGUgPT09ICdFeHBvcnRBbGxEZWNsYXJhdGlvbicgfHxcbiAgICAgICAgICAvLyBTb3VyY2Ugb3B0aW9uYWw6XG4gICAgICAgICAgKG5vZGUudHlwZSA9PT0gJ0V4cG9ydE5hbWVkRGVjbGFyYXRpb24nICYmIG5vZGUuc291cmNlKVxuICAgICAgICApIHtcbiAgICAgICAgICAvLyBXZSBhbHdheXMgaGF2ZSBhIHNvdXJjZSwgYnV0IHR5cGVzIHNheSB0aGV5IGNhbiBiZSBtaXNzaW5nLlxuICAgICAgICAgIGFzc2VydChub2RlLnNvdXJjZSwgJ2V4cGVjdGVkIGBub2RlLnNvdXJjZWAgdG8gYmUgZGVmaW5lZCcpXG5cbiAgICAgICAgICAvLyBgYGBcbiAgICAgICAgICAvLyBpbXBvcnQgJ2EnXG4gICAgICAgICAgLy8gLy89PiBhd2FpdCBpbXBvcnQoJ2EnKVxuICAgICAgICAgIC8vIGltcG9ydCBhIGZyb20gJ2InXG4gICAgICAgICAgLy8gLy89PiBjb25zdCB7ZGVmYXVsdDogYX0gPSBhd2FpdCBpbXBvcnQoJ2InKVxuICAgICAgICAgIC8vIGV4cG9ydCB7YSwgYiBhcyBjfSBmcm9tICdkJ1xuICAgICAgICAgIC8vIC8vPT4gY29uc3Qge2EsIGM6IGJ9ID0gYXdhaXQgaW1wb3J0KCdkJylcbiAgICAgICAgICAvLyBleHBvcnQgKiBmcm9tICdhJ1xuICAgICAgICAgIC8vIC8vPT4gY29uc3QgX2V4cG9ydEFsbDAgPSBhd2FpdCBpbXBvcnQoJ2EnKVxuICAgICAgICAgIC8vIGBgYFxuICAgICAgICAgIC8qKiBAdHlwZSB7SW1wb3J0RXhwcmVzc2lvbn0gKi9cbiAgICAgICAgICBjb25zdCBhcmd1bWVudCA9IHt0eXBlOiAnSW1wb3J0RXhwcmVzc2lvbicsIHNvdXJjZTogbm9kZS5zb3VyY2V9XG4gICAgICAgICAgY3JlYXRlKG5vZGUsIGFyZ3VtZW50KVxuICAgICAgICAgIGluaXQgPSB7dHlwZTogJ0F3YWl0RXhwcmVzc2lvbicsIGFyZ3VtZW50fVxuXG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgKG5vZGUudHlwZSA9PT0gJ0ltcG9ydERlY2xhcmF0aW9uJyB8fFxuICAgICAgICAgICAgICBub2RlLnR5cGUgPT09ICdFeHBvcnROYW1lZERlY2xhcmF0aW9uJykgJiZcbiAgICAgICAgICAgIG5vZGUuc3BlY2lmaWVycy5sZW5ndGggPT09IDBcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHJlcGxhY2UgPSB7dHlwZTogJ0V4cHJlc3Npb25TdGF0ZW1lbnQnLCBleHByZXNzaW9uOiBpbml0fVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXBsYWNlID0ge1xuICAgICAgICAgICAgICB0eXBlOiAnVmFyaWFibGVEZWNsYXJhdGlvbicsXG4gICAgICAgICAgICAgIGtpbmQ6ICdjb25zdCcsXG4gICAgICAgICAgICAgIGRlY2xhcmF0aW9uczpcbiAgICAgICAgICAgICAgICBub2RlLnR5cGUgPT09ICdFeHBvcnRBbGxEZWNsYXJhdGlvbidcbiAgICAgICAgICAgICAgICAgID8gW1xuICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdWYXJpYWJsZURlY2xhcmF0b3InLFxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ0lkZW50aWZpZXInLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnX2V4cG9ydEFsbCcgKyArK2V4cG9ydEFsbENvdW50XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5pdFxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgOiBzcGVjaWZpZXJzVG9EZWNsYXJhdGlvbnMobm9kZS5zcGVjaWZpZXJzLCBpbml0KVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChub2RlLmRlY2xhcmF0aW9uKSB7XG4gICAgICAgICAgcmVwbGFjZSA9IG5vZGUuZGVjbGFyYXRpb25cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvKiogQHR5cGUge0FycmF5PFZhcmlhYmxlRGVjbGFyYXRvcj59ICovXG4gICAgICAgICAgY29uc3QgZGVjbGFyYXRvcnMgPSBub2RlLnNwZWNpZmllcnNcbiAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKHNwZWNpZmllcikge1xuICAgICAgICAgICAgICByZXR1cm4gc3BlY2lmaWVyLmxvY2FsLm5hbWUgIT09IHNwZWNpZmllci5leHBvcnRlZC5uYW1lXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAoc3BlY2lmaWVyKSB7XG4gICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ1ZhcmlhYmxlRGVjbGFyYXRvcicsXG4gICAgICAgICAgICAgICAgaWQ6IHNwZWNpZmllci5leHBvcnRlZCxcbiAgICAgICAgICAgICAgICBpbml0OiBzcGVjaWZpZXIubG9jYWxcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcblxuICAgICAgICAgIGlmIChkZWNsYXJhdG9ycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByZXBsYWNlID0ge1xuICAgICAgICAgICAgICB0eXBlOiAnVmFyaWFibGVEZWNsYXJhdGlvbicsXG4gICAgICAgICAgICAgIGtpbmQ6ICdjb25zdCcsXG4gICAgICAgICAgICAgIGRlY2xhcmF0aW9uczogZGVjbGFyYXRvcnNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlcGxhY2UgPSBub2RlXG4gICAgICB9XG5cbiAgICAgIGlmIChyZXBsYWNlKSB7XG4gICAgICAgIHJlcGxhY2VtZW50LnB1c2gocmVwbGFjZSlcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtSZWFkb25seTxFeHByZXNzaW9uPiB8IHVuZGVmaW5lZH0gY29udGVudFxuICAgKiAgIENvbnRlbnQuXG4gICAqIEBwYXJhbSB7J2Z1bmN0aW9uLWJvZHknIHwgJ3Byb2dyYW0nfSBvdXRwdXRGb3JtYXRcbiAgICogICBPdXRwdXQgZm9ybWF0LlxuICAgKiBAcGFyYW0ge2Jvb2xlYW4gfCB1bmRlZmluZWR9IFtoYXNJbnRlcm5hbExheW91dD1mYWxzZV1cbiAgICogICBXaGV0aGVyIHRoZXJl4oCZcyBhbiBpbnRlcm5hbCBsYXlvdXQgKGRlZmF1bHQ6IGBmYWxzZWApLlxuICAgKiBAcmV0dXJucyB7QXJyYXk8RXhwb3J0RGVmYXVsdERlY2xhcmF0aW9uIHwgRnVuY3Rpb25EZWNsYXJhdGlvbj59XG4gICAqICAgRnVuY3Rpb25zLlxuICAgKi9cbiAgZnVuY3Rpb24gY3JlYXRlTWR4Q29udGVudChjb250ZW50LCBvdXRwdXRGb3JtYXQsIGhhc0ludGVybmFsTGF5b3V0KSB7XG4gICAgLyoqIEB0eXBlIHtKU1hFbGVtZW50fSAqL1xuICAgIGNvbnN0IGVsZW1lbnQgPSB7XG4gICAgICB0eXBlOiAnSlNYRWxlbWVudCcsXG4gICAgICBvcGVuaW5nRWxlbWVudDoge1xuICAgICAgICB0eXBlOiAnSlNYT3BlbmluZ0VsZW1lbnQnLFxuICAgICAgICBuYW1lOiB7dHlwZTogJ0pTWElkZW50aWZpZXInLCBuYW1lOiAnTURYTGF5b3V0J30sXG4gICAgICAgIGF0dHJpYnV0ZXM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICB0eXBlOiAnSlNYU3ByZWFkQXR0cmlidXRlJyxcbiAgICAgICAgICAgIGFyZ3VtZW50OiB7dHlwZTogJ0lkZW50aWZpZXInLCBuYW1lOiAncHJvcHMnfVxuICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgc2VsZkNsb3Npbmc6IGZhbHNlXG4gICAgICB9LFxuICAgICAgY2xvc2luZ0VsZW1lbnQ6IHtcbiAgICAgICAgdHlwZTogJ0pTWENsb3NpbmdFbGVtZW50JyxcbiAgICAgICAgbmFtZToge3R5cGU6ICdKU1hJZGVudGlmaWVyJywgbmFtZTogJ01EWExheW91dCd9XG4gICAgICB9LFxuICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6ICdKU1hFbGVtZW50JyxcbiAgICAgICAgICBvcGVuaW5nRWxlbWVudDoge1xuICAgICAgICAgICAgdHlwZTogJ0pTWE9wZW5pbmdFbGVtZW50JyxcbiAgICAgICAgICAgIG5hbWU6IHt0eXBlOiAnSlNYSWRlbnRpZmllcicsIG5hbWU6ICdfY3JlYXRlTWR4Q29udGVudCd9LFxuICAgICAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ0pTWFNwcmVhZEF0dHJpYnV0ZScsXG4gICAgICAgICAgICAgICAgYXJndW1lbnQ6IHt0eXBlOiAnSWRlbnRpZmllcicsIG5hbWU6ICdwcm9wcyd9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBzZWxmQ2xvc2luZzogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgY2xvc2luZ0VsZW1lbnQ6IG51bGwsXG4gICAgICAgICAgY2hpbGRyZW46IFtdXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0ID0gLyoqIEB0eXBlIHtFeHByZXNzaW9ufSAqLyAoZWxlbWVudClcblxuICAgIGlmICghaGFzSW50ZXJuYWxMYXlvdXQpIHtcbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgdHlwZTogJ0NvbmRpdGlvbmFsRXhwcmVzc2lvbicsXG4gICAgICAgIHRlc3Q6IHt0eXBlOiAnSWRlbnRpZmllcicsIG5hbWU6ICdNRFhMYXlvdXQnfSxcbiAgICAgICAgY29uc2VxdWVudDogcmVzdWx0LFxuICAgICAgICBhbHRlcm5hdGU6IHtcbiAgICAgICAgICB0eXBlOiAnQ2FsbEV4cHJlc3Npb24nLFxuICAgICAgICAgIGNhbGxlZToge3R5cGU6ICdJZGVudGlmaWVyJywgbmFtZTogJ19jcmVhdGVNZHhDb250ZW50J30sXG4gICAgICAgICAgYXJndW1lbnRzOiBbe3R5cGU6ICdJZGVudGlmaWVyJywgbmFtZTogJ3Byb3BzJ31dLFxuICAgICAgICAgIG9wdGlvbmFsOiBmYWxzZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IGFyZ3VtZW50ID1cbiAgICAgIC8vIENhc3QgYmVjYXVzZSBUUyBvdGhlcndpc2UgZG9lcyBub3QgdGhpbmsgYEpTWEZyYWdtZW50YHMgYXJlIGV4cHJlc3Npb25zLlxuICAgICAgLyoqIEB0eXBlIHtSZWFkb25seTxFeHByZXNzaW9uPiB8IFJlYWRvbmx5PEpTWEZyYWdtZW50Pn0gKi8gKFxuICAgICAgICBjb250ZW50IHx8IHt0eXBlOiAnSWRlbnRpZmllcicsIG5hbWU6ICd1bmRlZmluZWQnfVxuICAgICAgKVxuXG4gICAgLy8gVW53cmFwIGEgZnJhZ21lbnQgb2YgYSBzaW5nbGUgZWxlbWVudC5cbiAgICBpZiAoXG4gICAgICBhcmd1bWVudC50eXBlID09PSAnSlNYRnJhZ21lbnQnICYmXG4gICAgICBhcmd1bWVudC5jaGlsZHJlbi5sZW5ndGggPT09IDEgJiZcbiAgICAgIGFyZ3VtZW50LmNoaWxkcmVuWzBdLnR5cGUgPT09ICdKU1hFbGVtZW50J1xuICAgICkge1xuICAgICAgYXJndW1lbnQgPSBhcmd1bWVudC5jaGlsZHJlblswXVxuICAgIH1cblxuICAgIGxldCBhd2FpdEV4cHJlc3Npb24gPSBmYWxzZVxuXG4gICAgd2Fsayhhcmd1bWVudCwge1xuICAgICAgZW50ZXIobm9kZSkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgbm9kZS50eXBlID09PSAnQXJyb3dGdW5jdGlvbkV4cHJlc3Npb24nIHx8XG4gICAgICAgICAgbm9kZS50eXBlID09PSAnRnVuY3Rpb25EZWNsYXJhdGlvbicgfHxcbiAgICAgICAgICBub2RlLnR5cGUgPT09ICdGdW5jdGlvbkV4cHJlc3Npb24nXG4gICAgICAgICkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnNraXAoKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgIG5vZGUudHlwZSA9PT0gJ0F3YWl0RXhwcmVzc2lvbicgfHxcbiAgICAgICAgICAvKiBjOCBpZ25vcmUgbmV4dCAyIC0tIGNhbiBvbmx5IG9jY3VyIGluIGEgZnVuY3Rpb24gKHdoaWNoIHRoZW4gY2FuXG4gICAgICAgICAgICogb25seSBiZSBhc3luYywgc28gc2tpcHBlZCBpdCkgKi9cbiAgICAgICAgICAobm9kZS50eXBlID09PSAnRm9yT2ZTdGF0ZW1lbnQnICYmIG5vZGUuYXdhaXQpXG4gICAgICAgICkge1xuICAgICAgICAgIGF3YWl0RXhwcmVzc2lvbiA9IHRydWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG5cbiAgICAvKiogQHR5cGUge0Z1bmN0aW9uRGVjbGFyYXRpb259ICovXG4gICAgY29uc3QgZGVjbGFyYXRpb24gPSB7XG4gICAgICB0eXBlOiAnRnVuY3Rpb25EZWNsYXJhdGlvbicsXG4gICAgICBpZDoge3R5cGU6ICdJZGVudGlmaWVyJywgbmFtZTogJ01EWENvbnRlbnQnfSxcbiAgICAgIHBhcmFtczogW1xuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogJ0Fzc2lnbm1lbnRQYXR0ZXJuJyxcbiAgICAgICAgICBsZWZ0OiB7dHlwZTogJ0lkZW50aWZpZXInLCBuYW1lOiAncHJvcHMnfSxcbiAgICAgICAgICByaWdodDoge3R5cGU6ICdPYmplY3RFeHByZXNzaW9uJywgcHJvcGVydGllczogW119XG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBib2R5OiB7XG4gICAgICAgIHR5cGU6ICdCbG9ja1N0YXRlbWVudCcsXG4gICAgICAgIGJvZHk6IFt7dHlwZTogJ1JldHVyblN0YXRlbWVudCcsIGFyZ3VtZW50OiByZXN1bHR9XVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBbXG4gICAgICB7XG4gICAgICAgIHR5cGU6ICdGdW5jdGlvbkRlY2xhcmF0aW9uJyxcbiAgICAgICAgYXN5bmM6IGF3YWl0RXhwcmVzc2lvbixcbiAgICAgICAgaWQ6IHt0eXBlOiAnSWRlbnRpZmllcicsIG5hbWU6ICdfY3JlYXRlTWR4Q29udGVudCd9LFxuICAgICAgICBwYXJhbXM6IFt7dHlwZTogJ0lkZW50aWZpZXInLCBuYW1lOiAncHJvcHMnfV0sXG4gICAgICAgIGJvZHk6IHtcbiAgICAgICAgICB0eXBlOiAnQmxvY2tTdGF0ZW1lbnQnLFxuICAgICAgICAgIGJvZHk6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgdHlwZTogJ1JldHVyblN0YXRlbWVudCcsXG4gICAgICAgICAgICAgIC8vIENhc3QgYmVjYXVzZSBUUyBkb2VzbuKAmXQgdGhpbmsgYEpTWEZyYWdtZW50YCBpcyBhbiBleHByZXNzaW9uLlxuICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgb2JqZWN0LXNob3J0aGFuZFxuICAgICAgICAgICAgICBhcmd1bWVudDogLyoqIEB0eXBlIHtFeHByZXNzaW9ufSAqLyAoYXJndW1lbnQpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgXVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb3V0cHV0Rm9ybWF0ID09PSAncHJvZ3JhbSdcbiAgICAgICAgPyB7dHlwZTogJ0V4cG9ydERlZmF1bHREZWNsYXJhdGlvbicsIGRlY2xhcmF0aW9ufVxuICAgICAgICA6IGRlY2xhcmF0aW9uXG4gICAgXVxuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtQcm9ncmFtfSB0cmVlXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICovXG5mdW5jdGlvbiBpbmplY3RQcmFnbWEodHJlZSwgbmFtZSwgdmFsdWUpIHtcbiAgdHJlZS5jb21tZW50cz8udW5zaGlmdCh7XG4gICAgdHlwZTogJ0Jsb2NrJyxcbiAgICB2YWx1ZTogbmFtZSArICcgJyArIHZhbHVlLFxuICAgIGRhdGE6IHtfbWR4SXNQcmFnbWFDb21tZW50OiB0cnVlfVxuICB9KVxufVxuXG4vKipcbiAqIEBwYXJhbSB7RXhwcmVzc2lvbn0gaW1wb3J0TWV0YVVybFxuICogQHJldHVybnMge0Z1bmN0aW9uRGVjbGFyYXRpb259XG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVEeW5hbWljTWR4U3BlY2lmaWVyKGltcG9ydE1ldGFVcmwpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnRnVuY3Rpb25EZWNsYXJhdGlvbicsXG4gICAgaWQ6IHt0eXBlOiAnSWRlbnRpZmllcicsIG5hbWU6ICdfcmVzb2x2ZUR5bmFtaWNNZHhTcGVjaWZpZXInfSxcbiAgICBnZW5lcmF0b3I6IGZhbHNlLFxuICAgIGFzeW5jOiBmYWxzZSxcbiAgICBwYXJhbXM6IFt7dHlwZTogJ0lkZW50aWZpZXInLCBuYW1lOiAnZCd9XSxcbiAgICBib2R5OiB7XG4gICAgICB0eXBlOiAnQmxvY2tTdGF0ZW1lbnQnLFxuICAgICAgYm9keTogW1xuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogJ0lmU3RhdGVtZW50JyxcbiAgICAgICAgICB0ZXN0OiB7XG4gICAgICAgICAgICB0eXBlOiAnQmluYXJ5RXhwcmVzc2lvbicsXG4gICAgICAgICAgICBsZWZ0OiB7XG4gICAgICAgICAgICAgIHR5cGU6ICdVbmFyeUV4cHJlc3Npb24nLFxuICAgICAgICAgICAgICBvcGVyYXRvcjogJ3R5cGVvZicsXG4gICAgICAgICAgICAgIHByZWZpeDogdHJ1ZSxcbiAgICAgICAgICAgICAgYXJndW1lbnQ6IHt0eXBlOiAnSWRlbnRpZmllcicsIG5hbWU6ICdkJ31cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvcGVyYXRvcjogJyE9PScsXG4gICAgICAgICAgICByaWdodDoge3R5cGU6ICdMaXRlcmFsJywgdmFsdWU6ICdzdHJpbmcnfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgY29uc2VxdWVudDoge1xuICAgICAgICAgICAgdHlwZTogJ1JldHVyblN0YXRlbWVudCcsXG4gICAgICAgICAgICBhcmd1bWVudDoge3R5cGU6ICdJZGVudGlmaWVyJywgbmFtZTogJ2QnfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgYWx0ZXJuYXRlOiBudWxsXG4gICAgICAgIH0sXG4gICAgICAgIC8vIFRvIGRvOiB1c2UgYFVSTC5jYW5QYXJzZWAgd2hlbiB3aWRlbHkgc3VwcG9ydGVkIChzZWUgY29tbWVudGVkXG4gICAgICAgIC8vIG91dCBjb2RlIGJlbG93KS5cbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6ICdUcnlTdGF0ZW1lbnQnLFxuICAgICAgICAgIGJsb2NrOiB7XG4gICAgICAgICAgICB0eXBlOiAnQmxvY2tTdGF0ZW1lbnQnLFxuICAgICAgICAgICAgYm9keTogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ0V4cHJlc3Npb25TdGF0ZW1lbnQnLFxuICAgICAgICAgICAgICAgIGV4cHJlc3Npb246IHtcbiAgICAgICAgICAgICAgICAgIHR5cGU6ICdOZXdFeHByZXNzaW9uJyxcbiAgICAgICAgICAgICAgICAgIGNhbGxlZToge3R5cGU6ICdJZGVudGlmaWVyJywgbmFtZTogJ1VSTCd9LFxuICAgICAgICAgICAgICAgICAgYXJndW1lbnRzOiBbe3R5cGU6ICdJZGVudGlmaWVyJywgbmFtZTogJ2QnfV1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnUmV0dXJuU3RhdGVtZW50JyxcbiAgICAgICAgICAgICAgICBhcmd1bWVudDoge3R5cGU6ICdJZGVudGlmaWVyJywgbmFtZTogJ2QnfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgICAgfSxcbiAgICAgICAgICBoYW5kbGVyOiB7XG4gICAgICAgICAgICB0eXBlOiAnQ2F0Y2hDbGF1c2UnLFxuICAgICAgICAgICAgcGFyYW06IG51bGwsXG4gICAgICAgICAgICBib2R5OiB7dHlwZTogJ0Jsb2NrU3RhdGVtZW50JywgYm9keTogW119XG4gICAgICAgICAgfSxcbiAgICAgICAgICBmaW5hbGl6ZXI6IG51bGxcbiAgICAgICAgfSxcbiAgICAgICAgLy8gVG8gZG86IHVzZSBgVVJMLmNhblBhcnNlYCB3aGVuIHdpZGVseSBzdXBwb3J0ZWQuXG4gICAgICAgIC8vIHtcbiAgICAgICAgLy8gICB0eXBlOiAnSWZTdGF0ZW1lbnQnLFxuICAgICAgICAvLyAgIHRlc3Q6IHtcbiAgICAgICAgLy8gICAgIHR5cGU6ICdDYWxsRXhwcmVzc2lvbicsXG4gICAgICAgIC8vICAgICBjYWxsZWU6IHRvSWRPck1lbWJlckV4cHJlc3Npb24oWydVUkwnLCAnY2FuUGFyc2UnXSksXG4gICAgICAgIC8vICAgICBhcmd1bWVudHM6IFt7dHlwZTogJ0lkZW50aWZpZXInLCBuYW1lOiAnZCd9XSxcbiAgICAgICAgLy8gICAgIG9wdGlvbmFsOiBmYWxzZVxuICAgICAgICAvLyAgIH0sXG4gICAgICAgIC8vICAgY29uc2VxdWVudDoge1xuICAgICAgICAvLyAgICAgdHlwZTogJ1JldHVyblN0YXRlbWVudCcsXG4gICAgICAgIC8vICAgICBhcmd1bWVudDoge3R5cGU6ICdJZGVudGlmaWVyJywgbmFtZTogJ2QnfVxuICAgICAgICAvLyAgIH0sXG4gICAgICAgIC8vICAgYWx0ZXJuYXRlOiBudWxsXG4gICAgICAgIC8vIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiAnSWZTdGF0ZW1lbnQnLFxuICAgICAgICAgIHRlc3Q6IHtcbiAgICAgICAgICAgIHR5cGU6ICdMb2dpY2FsRXhwcmVzc2lvbicsXG4gICAgICAgICAgICBsZWZ0OiB7XG4gICAgICAgICAgICAgIHR5cGU6ICdMb2dpY2FsRXhwcmVzc2lvbicsXG4gICAgICAgICAgICAgIGxlZnQ6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnQ2FsbEV4cHJlc3Npb24nLFxuICAgICAgICAgICAgICAgIGNhbGxlZTogdG9JZE9yTWVtYmVyRXhwcmVzc2lvbihbJ2QnLCAnc3RhcnRzV2l0aCddKSxcbiAgICAgICAgICAgICAgICBhcmd1bWVudHM6IFt7dHlwZTogJ0xpdGVyYWwnLCB2YWx1ZTogJy8nfV0sXG4gICAgICAgICAgICAgICAgb3B0aW9uYWw6IGZhbHNlXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIG9wZXJhdG9yOiAnfHwnLFxuICAgICAgICAgICAgICByaWdodDoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdDYWxsRXhwcmVzc2lvbicsXG4gICAgICAgICAgICAgICAgY2FsbGVlOiB0b0lkT3JNZW1iZXJFeHByZXNzaW9uKFsnZCcsICdzdGFydHNXaXRoJ10pLFxuICAgICAgICAgICAgICAgIGFyZ3VtZW50czogW3t0eXBlOiAnTGl0ZXJhbCcsIHZhbHVlOiAnLi8nfV0sXG4gICAgICAgICAgICAgICAgb3B0aW9uYWw6IGZhbHNlXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvcGVyYXRvcjogJ3x8JyxcbiAgICAgICAgICAgIHJpZ2h0OiB7XG4gICAgICAgICAgICAgIHR5cGU6ICdDYWxsRXhwcmVzc2lvbicsXG4gICAgICAgICAgICAgIGNhbGxlZTogdG9JZE9yTWVtYmVyRXhwcmVzc2lvbihbJ2QnLCAnc3RhcnRzV2l0aCddKSxcbiAgICAgICAgICAgICAgYXJndW1lbnRzOiBbe3R5cGU6ICdMaXRlcmFsJywgdmFsdWU6ICcuLi8nfV0sXG4gICAgICAgICAgICAgIG9wdGlvbmFsOiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgY29uc2VxdWVudDoge1xuICAgICAgICAgICAgdHlwZTogJ1JldHVyblN0YXRlbWVudCcsXG4gICAgICAgICAgICBhcmd1bWVudDoge1xuICAgICAgICAgICAgICB0eXBlOiAnTWVtYmVyRXhwcmVzc2lvbicsXG4gICAgICAgICAgICAgIG9iamVjdDoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdOZXdFeHByZXNzaW9uJyxcbiAgICAgICAgICAgICAgICBjYWxsZWU6IHt0eXBlOiAnSWRlbnRpZmllcicsIG5hbWU6ICdVUkwnfSxcbiAgICAgICAgICAgICAgICBhcmd1bWVudHM6IFt7dHlwZTogJ0lkZW50aWZpZXInLCBuYW1lOiAnZCd9LCBpbXBvcnRNZXRhVXJsXVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBwcm9wZXJ0eToge3R5cGU6ICdJZGVudGlmaWVyJywgbmFtZTogJ2hyZWYnfSxcbiAgICAgICAgICAgICAgY29tcHV0ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICBvcHRpb25hbDogZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIGFsdGVybmF0ZTogbnVsbFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogJ1JldHVyblN0YXRlbWVudCcsXG4gICAgICAgICAgYXJndW1lbnQ6IHt0eXBlOiAnSWRlbnRpZmllcicsIG5hbWU6ICdkJ31cbiAgICAgICAgfVxuICAgICAgXVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEByZXR1cm5zIHtBcnJheTxTdGF0ZW1lbnQ+fVxuICovXG5mdW5jdGlvbiBjcmVhdGVJbXBvcnRNZXRhVXJsVmFyaWFibGUoKSB7XG4gIHJldHVybiBbXG4gICAge1xuICAgICAgdHlwZTogJ1ZhcmlhYmxlRGVjbGFyYXRpb24nLFxuICAgICAgZGVjbGFyYXRpb25zOiBbXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiAnVmFyaWFibGVEZWNsYXJhdG9yJyxcbiAgICAgICAgICBpZDoge3R5cGU6ICdJZGVudGlmaWVyJywgbmFtZTogJ19pbXBvcnRNZXRhVXJsJ30sXG4gICAgICAgICAgaW5pdDogdG9JZE9yTWVtYmVyRXhwcmVzc2lvbihbJ2FyZ3VtZW50cycsIDAsICdiYXNlVXJsJ10pXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBraW5kOiAnY29uc3QnXG4gICAgfSxcbiAgICB7XG4gICAgICB0eXBlOiAnSWZTdGF0ZW1lbnQnLFxuICAgICAgdGVzdDoge1xuICAgICAgICB0eXBlOiAnVW5hcnlFeHByZXNzaW9uJyxcbiAgICAgICAgb3BlcmF0b3I6ICchJyxcbiAgICAgICAgcHJlZml4OiB0cnVlLFxuICAgICAgICBhcmd1bWVudDoge3R5cGU6ICdJZGVudGlmaWVyJywgbmFtZTogJ19pbXBvcnRNZXRhVXJsJ31cbiAgICAgIH0sXG4gICAgICBjb25zZXF1ZW50OiB7XG4gICAgICAgIHR5cGU6ICdUaHJvd1N0YXRlbWVudCcsXG4gICAgICAgIGFyZ3VtZW50OiB7XG4gICAgICAgICAgdHlwZTogJ05ld0V4cHJlc3Npb24nLFxuICAgICAgICAgIGNhbGxlZToge3R5cGU6ICdJZGVudGlmaWVyJywgbmFtZTogJ0Vycm9yJ30sXG4gICAgICAgICAgYXJndW1lbnRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHR5cGU6ICdMaXRlcmFsJyxcbiAgICAgICAgICAgICAgdmFsdWU6XG4gICAgICAgICAgICAgICAgJ1VuZXhwZWN0ZWQgbWlzc2luZyBgb3B0aW9ucy5iYXNlVXJsYCBuZWVkZWQgdG8gc3VwcG9ydCBgZXhwb3J0IOKApiBmcm9tYCwgYGltcG9ydGAsIG9yIGBpbXBvcnQubWV0YS51cmxgIHdoZW4gZ2VuZXJhdGluZyBgZnVuY3Rpb24tYm9keWAnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgXVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgYWx0ZXJuYXRlOiBudWxsXG4gICAgfVxuICBdXG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/recma-document.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/recma-jsx-build.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/recma-jsx-build.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   recmaJsxBuild: () => (/* binding */ recmaJsxBuild)\n/* harmony export */ });\n/* harmony import */ var estree_util_build_jsx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! estree-util-build-jsx */ \"(ssr)/./node_modules/.pnpm/estree-util-build-jsx@3.0.1/node_modules/estree-util-build-jsx/lib/index.js\");\n/* harmony import */ var _util_estree_util_specifiers_to_declarations_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/estree-util-specifiers-to-declarations.js */ \"(ssr)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-specifiers-to-declarations.js\");\n/* harmony import */ var _util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/estree-util-to-id-or-member-expression.js */ \"(ssr)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-to-id-or-member-expression.js\");\n/**\n * @typedef {import('estree-jsx').Program} Program\n * @typedef {import('estree-util-build-jsx').Options} BuildJsxOptions\n * @typedef {import('vfile').VFile} VFile\n */ /**\n * @typedef ExtraOptions\n *   Configuration for internal plugin `recma-jsx-build`.\n * @property {'function-body' | 'program' | null | undefined} [outputFormat='program']\n *   Whether to keep the import of the automatic runtime or get it from\n *   `arguments[0]` instead (default: `'program'`).\n *\n * @typedef {BuildJsxOptions & ExtraOptions} Options\n *   Options.\n */ \n\n\n/**\n * A plugin to build JSX into function calls.\n * `estree-util-build-jsx` does all the work for us!\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns\n *   Transform.\n */ function recmaJsxBuild(options) {\n    /* c8 ignore next -- always given in `@mdx-js/mdx` */ const { development, outputFormat } = options || {};\n    /**\n   * @param {Program} tree\n   *   Tree.\n   * @param {VFile} file\n   *   File.\n   * @returns {undefined}\n   *   Nothing.\n   */ return function(tree, file) {\n        (0,estree_util_build_jsx__WEBPACK_IMPORTED_MODULE_0__.buildJsx)(tree, {\n            development,\n            filePath: file.history[0]\n        });\n        // Remove the pragma comment that we injected ourselves as it is no longer\n        // needed.\n        if (tree.comments) {\n            tree.comments = tree.comments.filter(function(d) {\n                return !d.data?._mdxIsPragmaComment;\n            });\n        }\n        // When compiling to a function body, replace the import that was just\n        // generated, and get `jsx`, `jsxs`, and `Fragment` from `arguments[0]`\n        // instead.\n        if (outputFormat === \"function-body\") {\n            let index = 0;\n            // Skip directives: JS currently only has `use strict`, but Acorn allows\n            // arbitrary ones.\n            // Practically things like `use client` could be used?\n            while(index < tree.body.length){\n                const child = tree.body[index];\n                if (\"directive\" in child && child.directive) {\n                    index++;\n                } else {\n                    break;\n                }\n            }\n            const declaration = tree.body[index];\n            if (declaration && declaration.type === \"ImportDeclaration\" && typeof declaration.source.value === \"string\" && /\\/jsx-(dev-)?runtime$/.test(declaration.source.value)) {\n                tree.body[index] = {\n                    type: \"VariableDeclaration\",\n                    kind: \"const\",\n                    declarations: (0,_util_estree_util_specifiers_to_declarations_js__WEBPACK_IMPORTED_MODULE_1__.specifiersToDeclarations)(declaration.specifiers, (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_2__.toIdOrMemberExpression)([\n                        \"arguments\",\n                        0\n                    ]))\n                };\n            }\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1keC1qcyttZHhAMy4wLjEvbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi9wbHVnaW4vcmVjbWEtanN4LWJ1aWxkLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7OztDQUlDLEdBRUQ7Ozs7Ozs7OztDQVNDLEdBRTZDO0FBQzRDO0FBQ0Y7QUFFeEY7Ozs7Ozs7O0NBUUMsR0FDTSxTQUFTRyxjQUFjQyxPQUFPO0lBQ25DLG1EQUFtRCxHQUNuRCxNQUFNLEVBQUNDLFdBQVcsRUFBRUMsWUFBWSxFQUFDLEdBQUdGLFdBQVcsQ0FBQztJQUVoRDs7Ozs7OztHQU9DLEdBQ0QsT0FBTyxTQUFVRyxJQUFJLEVBQUVDLElBQUk7UUFDekJSLCtEQUFRQSxDQUFDTyxNQUFNO1lBQUNGO1lBQWFJLFVBQVVELEtBQUtFLE9BQU8sQ0FBQyxFQUFFO1FBQUE7UUFFdEQsMEVBQTBFO1FBQzFFLFVBQVU7UUFDVixJQUFJSCxLQUFLSSxRQUFRLEVBQUU7WUFDakJKLEtBQUtJLFFBQVEsR0FBR0osS0FBS0ksUUFBUSxDQUFDQyxNQUFNLENBQUMsU0FBVUMsQ0FBQztnQkFDOUMsT0FBTyxDQUFDQSxFQUFFQyxJQUFJLEVBQUVDO1lBQ2xCO1FBQ0Y7UUFFQSxzRUFBc0U7UUFDdEUsdUVBQXVFO1FBQ3ZFLFdBQVc7UUFDWCxJQUFJVCxpQkFBaUIsaUJBQWlCO1lBQ3BDLElBQUlVLFFBQVE7WUFFWix3RUFBd0U7WUFDeEUsa0JBQWtCO1lBQ2xCLHNEQUFzRDtZQUN0RCxNQUFPQSxRQUFRVCxLQUFLVSxJQUFJLENBQUNDLE1BQU0sQ0FBRTtnQkFDL0IsTUFBTUMsUUFBUVosS0FBS1UsSUFBSSxDQUFDRCxNQUFNO2dCQUM5QixJQUFJLGVBQWVHLFNBQVNBLE1BQU1DLFNBQVMsRUFBRTtvQkFDM0NKO2dCQUNGLE9BQU87b0JBQ0w7Z0JBQ0Y7WUFDRjtZQUVBLE1BQU1LLGNBQWNkLEtBQUtVLElBQUksQ0FBQ0QsTUFBTTtZQUVwQyxJQUNFSyxlQUNBQSxZQUFZQyxJQUFJLEtBQUssdUJBQ3JCLE9BQU9ELFlBQVlFLE1BQU0sQ0FBQ0MsS0FBSyxLQUFLLFlBQ3BDLHdCQUF3QkMsSUFBSSxDQUFDSixZQUFZRSxNQUFNLENBQUNDLEtBQUssR0FDckQ7Z0JBQ0FqQixLQUFLVSxJQUFJLENBQUNELE1BQU0sR0FBRztvQkFDakJNLE1BQU07b0JBQ05JLE1BQU07b0JBQ05DLGNBQWMxQix5R0FBd0JBLENBQ3BDb0IsWUFBWU8sVUFBVSxFQUN0QjFCLHVHQUFzQkEsQ0FBQzt3QkFBQzt3QkFBYTtxQkFBRTtnQkFFM0M7WUFDRjtRQUNGO0lBQ0Y7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2NibV8yMDI0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtZHgtanMrbWR4QDMuMC4xL25vZGVfbW9kdWxlcy9AbWR4LWpzL21keC9saWIvcGx1Z2luL3JlY21hLWpzeC1idWlsZC5qcz9jNGEzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnZXN0cmVlLWpzeCcpLlByb2dyYW19IFByb2dyYW1cbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2VzdHJlZS11dGlsLWJ1aWxkLWpzeCcpLk9wdGlvbnN9IEJ1aWxkSnN4T3B0aW9uc1xuICogQHR5cGVkZWYge2ltcG9ydCgndmZpbGUnKS5WRmlsZX0gVkZpbGVcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIEV4dHJhT3B0aW9uc1xuICogICBDb25maWd1cmF0aW9uIGZvciBpbnRlcm5hbCBwbHVnaW4gYHJlY21hLWpzeC1idWlsZGAuXG4gKiBAcHJvcGVydHkgeydmdW5jdGlvbi1ib2R5JyB8ICdwcm9ncmFtJyB8IG51bGwgfCB1bmRlZmluZWR9IFtvdXRwdXRGb3JtYXQ9J3Byb2dyYW0nXVxuICogICBXaGV0aGVyIHRvIGtlZXAgdGhlIGltcG9ydCBvZiB0aGUgYXV0b21hdGljIHJ1bnRpbWUgb3IgZ2V0IGl0IGZyb21cbiAqICAgYGFyZ3VtZW50c1swXWAgaW5zdGVhZCAoZGVmYXVsdDogYCdwcm9ncmFtJ2ApLlxuICpcbiAqIEB0eXBlZGVmIHtCdWlsZEpzeE9wdGlvbnMgJiBFeHRyYU9wdGlvbnN9IE9wdGlvbnNcbiAqICAgT3B0aW9ucy5cbiAqL1xuXG5pbXBvcnQge2J1aWxkSnN4fSBmcm9tICdlc3RyZWUtdXRpbC1idWlsZC1qc3gnXG5pbXBvcnQge3NwZWNpZmllcnNUb0RlY2xhcmF0aW9uc30gZnJvbSAnLi4vdXRpbC9lc3RyZWUtdXRpbC1zcGVjaWZpZXJzLXRvLWRlY2xhcmF0aW9ucy5qcydcbmltcG9ydCB7dG9JZE9yTWVtYmVyRXhwcmVzc2lvbn0gZnJvbSAnLi4vdXRpbC9lc3RyZWUtdXRpbC10by1pZC1vci1tZW1iZXItZXhwcmVzc2lvbi5qcydcblxuLyoqXG4gKiBBIHBsdWdpbiB0byBidWlsZCBKU1ggaW50byBmdW5jdGlvbiBjYWxscy5cbiAqIGBlc3RyZWUtdXRpbC1idWlsZC1qc3hgIGRvZXMgYWxsIHRoZSB3b3JrIGZvciB1cyFcbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5PE9wdGlvbnM+IHwgbnVsbCB8IHVuZGVmaW5lZH0gW29wdGlvbnNdXG4gKiAgIENvbmZpZ3VyYXRpb24gKG9wdGlvbmFsKS5cbiAqIEByZXR1cm5zXG4gKiAgIFRyYW5zZm9ybS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlY21hSnN4QnVpbGQob3B0aW9ucykge1xuICAvKiBjOCBpZ25vcmUgbmV4dCAtLSBhbHdheXMgZ2l2ZW4gaW4gYEBtZHgtanMvbWR4YCAqL1xuICBjb25zdCB7ZGV2ZWxvcG1lbnQsIG91dHB1dEZvcm1hdH0gPSBvcHRpb25zIHx8IHt9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7UHJvZ3JhbX0gdHJlZVxuICAgKiAgIFRyZWUuXG4gICAqIEBwYXJhbSB7VkZpbGV9IGZpbGVcbiAgICogICBGaWxlLlxuICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgKiAgIE5vdGhpbmcuXG4gICAqL1xuICByZXR1cm4gZnVuY3Rpb24gKHRyZWUsIGZpbGUpIHtcbiAgICBidWlsZEpzeCh0cmVlLCB7ZGV2ZWxvcG1lbnQsIGZpbGVQYXRoOiBmaWxlLmhpc3RvcnlbMF19KVxuXG4gICAgLy8gUmVtb3ZlIHRoZSBwcmFnbWEgY29tbWVudCB0aGF0IHdlIGluamVjdGVkIG91cnNlbHZlcyBhcyBpdCBpcyBubyBsb25nZXJcbiAgICAvLyBuZWVkZWQuXG4gICAgaWYgKHRyZWUuY29tbWVudHMpIHtcbiAgICAgIHRyZWUuY29tbWVudHMgPSB0cmVlLmNvbW1lbnRzLmZpbHRlcihmdW5jdGlvbiAoZCkge1xuICAgICAgICByZXR1cm4gIWQuZGF0YT8uX21keElzUHJhZ21hQ29tbWVudFxuICAgICAgfSlcbiAgICB9XG5cbiAgICAvLyBXaGVuIGNvbXBpbGluZyB0byBhIGZ1bmN0aW9uIGJvZHksIHJlcGxhY2UgdGhlIGltcG9ydCB0aGF0IHdhcyBqdXN0XG4gICAgLy8gZ2VuZXJhdGVkLCBhbmQgZ2V0IGBqc3hgLCBganN4c2AsIGFuZCBgRnJhZ21lbnRgIGZyb20gYGFyZ3VtZW50c1swXWBcbiAgICAvLyBpbnN0ZWFkLlxuICAgIGlmIChvdXRwdXRGb3JtYXQgPT09ICdmdW5jdGlvbi1ib2R5Jykge1xuICAgICAgbGV0IGluZGV4ID0gMFxuXG4gICAgICAvLyBTa2lwIGRpcmVjdGl2ZXM6IEpTIGN1cnJlbnRseSBvbmx5IGhhcyBgdXNlIHN0cmljdGAsIGJ1dCBBY29ybiBhbGxvd3NcbiAgICAgIC8vIGFyYml0cmFyeSBvbmVzLlxuICAgICAgLy8gUHJhY3RpY2FsbHkgdGhpbmdzIGxpa2UgYHVzZSBjbGllbnRgIGNvdWxkIGJlIHVzZWQ/XG4gICAgICB3aGlsZSAoaW5kZXggPCB0cmVlLmJvZHkubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IGNoaWxkID0gdHJlZS5ib2R5W2luZGV4XVxuICAgICAgICBpZiAoJ2RpcmVjdGl2ZScgaW4gY2hpbGQgJiYgY2hpbGQuZGlyZWN0aXZlKSB7XG4gICAgICAgICAgaW5kZXgrK1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY29uc3QgZGVjbGFyYXRpb24gPSB0cmVlLmJvZHlbaW5kZXhdXG5cbiAgICAgIGlmIChcbiAgICAgICAgZGVjbGFyYXRpb24gJiZcbiAgICAgICAgZGVjbGFyYXRpb24udHlwZSA9PT0gJ0ltcG9ydERlY2xhcmF0aW9uJyAmJlxuICAgICAgICB0eXBlb2YgZGVjbGFyYXRpb24uc291cmNlLnZhbHVlID09PSAnc3RyaW5nJyAmJlxuICAgICAgICAvXFwvanN4LShkZXYtKT9ydW50aW1lJC8udGVzdChkZWNsYXJhdGlvbi5zb3VyY2UudmFsdWUpXG4gICAgICApIHtcbiAgICAgICAgdHJlZS5ib2R5W2luZGV4XSA9IHtcbiAgICAgICAgICB0eXBlOiAnVmFyaWFibGVEZWNsYXJhdGlvbicsXG4gICAgICAgICAga2luZDogJ2NvbnN0JyxcbiAgICAgICAgICBkZWNsYXJhdGlvbnM6IHNwZWNpZmllcnNUb0RlY2xhcmF0aW9ucyhcbiAgICAgICAgICAgIGRlY2xhcmF0aW9uLnNwZWNpZmllcnMsXG4gICAgICAgICAgICB0b0lkT3JNZW1iZXJFeHByZXNzaW9uKFsnYXJndW1lbnRzJywgMF0pXG4gICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iXSwibmFtZXMiOlsiYnVpbGRKc3giLCJzcGVjaWZpZXJzVG9EZWNsYXJhdGlvbnMiLCJ0b0lkT3JNZW1iZXJFeHByZXNzaW9uIiwicmVjbWFKc3hCdWlsZCIsIm9wdGlvbnMiLCJkZXZlbG9wbWVudCIsIm91dHB1dEZvcm1hdCIsInRyZWUiLCJmaWxlIiwiZmlsZVBhdGgiLCJoaXN0b3J5IiwiY29tbWVudHMiLCJmaWx0ZXIiLCJkIiwiZGF0YSIsIl9tZHhJc1ByYWdtYUNvbW1lbnQiLCJpbmRleCIsImJvZHkiLCJsZW5ndGgiLCJjaGlsZCIsImRpcmVjdGl2ZSIsImRlY2xhcmF0aW9uIiwidHlwZSIsInNvdXJjZSIsInZhbHVlIiwidGVzdCIsImtpbmQiLCJkZWNsYXJhdGlvbnMiLCJzcGVjaWZpZXJzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/recma-jsx-build.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/recma-jsx-rewrite.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/recma-jsx-rewrite.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   recmaJsxRewrite: () => (/* binding */ recmaJsxRewrite)\n/* harmony export */ });\n/* harmony import */ var estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! estree-util-is-identifier-name */ \"(ssr)/./node_modules/.pnpm/estree-util-is-identifier-name@3.0.0/node_modules/estree-util-is-identifier-name/lib/index.js\");\n/* harmony import */ var estree_walker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! estree-walker */ \"(ssr)/./node_modules/.pnpm/estree-walker@3.0.3/node_modules/estree-walker/src/index.js\");\n/* harmony import */ var periscopic__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! periscopic */ \"(ssr)/./node_modules/.pnpm/periscopic@3.1.0/node_modules/periscopic/src/index.js\");\n/* harmony import */ var unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! unist-util-stringify-position */ \"(ssr)/./node_modules/.pnpm/unist-util-stringify-position@4.0.0/node_modules/unist-util-stringify-position/lib/index.js\");\n/* harmony import */ var unist_util_position_from_estree__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! unist-util-position-from-estree */ \"(ssr)/./node_modules/.pnpm/unist-util-position-from-estree@2.0.0/node_modules/unist-util-position-from-estree/lib/index.js\");\n/* harmony import */ var _util_estree_util_specifiers_to_declarations_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../util/estree-util-specifiers-to-declarations.js */ \"(ssr)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-specifiers-to-declarations.js\");\n/* harmony import */ var _util_estree_util_to_binary_addition_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../util/estree-util-to-binary-addition.js */ \"(ssr)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-to-binary-addition.js\");\n/* harmony import */ var _util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/estree-util-to-id-or-member-expression.js */ \"(ssr)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-to-id-or-member-expression.js\");\n/**\n * @typedef {import('estree-jsx').Expression} Expression\n * @typedef {import('estree-jsx').Function} EstreeFunction\n * @typedef {import('estree-jsx').Identifier} Identifier\n * @typedef {import('estree-jsx').ImportSpecifier} ImportSpecifier\n * @typedef {import('estree-jsx').JSXElement} JSXElement\n * @typedef {import('estree-jsx').ModuleDeclaration} ModuleDeclaration\n * @typedef {import('estree-jsx').Node} Node\n * @typedef {import('estree-jsx').ObjectPattern} ObjectPattern\n * @typedef {import('estree-jsx').Program} Program\n * @typedef {import('estree-jsx').Property} Property\n * @typedef {import('estree-jsx').SpreadElement} SpreadElement\n * @typedef {import('estree-jsx').Statement} Statement\n * @typedef {import('estree-jsx').VariableDeclarator} VariableDeclarator\n *\n * @typedef {import('periscopic').Scope} PeriscopicScope\n *\n * @typedef {import('vfile').VFile} VFile\n *\n * @typedef {import('../core.js').ProcessorOptions} ProcessorOptions\n */\n\n/**\n * @typedef {PeriscopicScope & {node: Node}} Scope\n *   Scope (with a `node`).\n *\n * @typedef StackEntry\n *   Entry.\n * @property {Array<string>} components\n *   Used components.\n * @property {Map<string, string>} idToInvalidComponentName\n *   Map of JSX identifiers which cannot be used as JS identifiers, to valid JS identifiers.\n * @property {Readonly<EstreeFunction>} node\n *   Function.\n * @property {Array<string>} objects\n *   Identifiers of used objects (such as `x` in `x.y`).\n * @property {Record<string, {node: Readonly<JSXElement>, component: boolean}>} references\n *   Map of JSX identifiers for components and objects, to where they were first used.\n * @property {Array<string>} tags\n *   Tag names.\n */\n\n\n\n\n\n\n\n\n\n\n/**\n * A plugin that rewrites JSX in functions to accept components as\n * `props.components` (when the function is called `_createMdxContent`), or from\n * a provider (if there is one).\n * It also makes sure that any undefined components are defined: either from\n * received components or as a function that throws an error.\n *\n * @param {Readonly<ProcessorOptions>} options\n *   Configuration (optional).\n * @returns\n *   Transform.\n */\nfunction recmaJsxRewrite(options) {\n  const {development, outputFormat, providerImportSource} = options\n\n  /**\n   * @param {Program} tree\n   *   Tree.\n   * @param {VFile} file\n   *   File.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  return function (tree, file) {\n    // Find everything that’s defined in the top-level scope.\n    const scopeInfo = (0,periscopic__WEBPACK_IMPORTED_MODULE_1__.analyze)(tree)\n    /** @type {Array<StackEntry>} */\n    const functionStack = []\n    let importProvider = false\n    let createErrorHelper = false\n    /** @type {Scope | undefined} */\n    let currentScope\n\n    ;(0,estree_walker__WEBPACK_IMPORTED_MODULE_0__.walk)(tree, {\n      enter(node) {\n        // Cast because we match `node`.\n        const newScope = /** @type {Scope | undefined} */ (\n          scopeInfo.map.get(node)\n        )\n\n        if (\n          node.type === 'FunctionDeclaration' ||\n          node.type === 'FunctionExpression' ||\n          node.type === 'ArrowFunctionExpression'\n        ) {\n          functionStack.push({\n            components: [],\n            idToInvalidComponentName: new Map(),\n            node,\n            objects: [],\n            references: {},\n            tags: []\n          })\n\n          // MDXContent only ever contains MDXLayout\n          if (\n            isNamedFunction(node, 'MDXContent') &&\n            newScope &&\n            !inScope(newScope, 'MDXLayout')\n          ) {\n            functionStack[0].components.push('MDXLayout')\n          }\n        }\n\n        const functionScope = functionStack[0]\n        if (\n          !functionScope ||\n          (!isNamedFunction(functionScope.node, '_createMdxContent') &&\n            !providerImportSource)\n        ) {\n          return\n        }\n\n        if (newScope) {\n          newScope.node = node\n          currentScope = newScope\n        }\n\n        if (currentScope && node.type === 'JSXElement') {\n          let name = node.openingElement.name\n\n          // `<x.y>`, `<Foo.Bar>`, `<x.y.z>`.\n          if (name.type === 'JSXMemberExpression') {\n            /** @type {Array<string>} */\n            const ids = []\n\n            // Find the left-most identifier.\n            while (name.type === 'JSXMemberExpression') {\n              ids.unshift(name.property.name)\n              name = name.object\n            }\n\n            ids.unshift(name.name)\n            const fullId = ids.join('.')\n            const id = name.name\n\n            const isInScope = inScope(currentScope, id)\n\n            if (!Object.hasOwn(functionScope.references, fullId)) {\n              // Cast because we match `node`.\n              const parentScope = /** @type {Scope | undefined} */ (\n                currentScope.parent\n              )\n              if (\n                !isInScope ||\n                // If the parent scope is `_createMdxContent`, then this\n                // references a component we can add a check statement for.\n                (parentScope &&\n                  parentScope.node.type === 'FunctionDeclaration' &&\n                  isNamedFunction(parentScope.node, '_createMdxContent'))\n              ) {\n                functionScope.references[fullId] = {component: true, node}\n              }\n            }\n\n            if (!functionScope.objects.includes(id) && !isInScope) {\n              functionScope.objects.push(id)\n            }\n          }\n          // `<xml:thing>`.\n          else if (name.type === 'JSXNamespacedName') {\n            // Ignore namespaces.\n          }\n          // If the name is a valid ES identifier, and it doesn’t start with a\n          // lowercase letter, it’s a component.\n          // For example, `$foo`, `_bar`, `Baz` are all component names.\n          // But `foo` and `b-ar` are tag names.\n          else if ((0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_2__.name)(name.name) && !/^[a-z]/.test(name.name)) {\n            const id = name.name\n\n            if (!inScope(currentScope, id)) {\n              // No need to add an error for an undefined layout — we use an\n              // `if` later.\n              if (\n                id !== 'MDXLayout' &&\n                !Object.hasOwn(functionScope.references, id)\n              ) {\n                functionScope.references[id] = {component: true, node}\n              }\n\n              if (!functionScope.components.includes(id)) {\n                functionScope.components.push(id)\n              }\n            }\n          } else if (node.data && node.data._mdxExplicitJsx) {\n            // Do not turn explicit JSX into components from `_components`.\n            // As in, a given `h1` component is used for `# heading` (next case),\n            // but not for `<h1>heading</h1>`.\n          } else {\n            const id = name.name\n\n            if (!functionScope.tags.includes(id)) {\n              functionScope.tags.push(id)\n            }\n\n            /** @type {Array<number | string>} */\n            let jsxIdExpression = ['_components', id]\n            if ((0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_2__.name)(id) === false) {\n              let invalidComponentName =\n                functionScope.idToInvalidComponentName.get(id)\n              if (invalidComponentName === undefined) {\n                invalidComponentName = `_component${functionScope.idToInvalidComponentName.size}`\n                functionScope.idToInvalidComponentName.set(\n                  id,\n                  invalidComponentName\n                )\n              }\n\n              jsxIdExpression = [invalidComponentName]\n            }\n\n            node.openingElement.name =\n              (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_3__.toJsxIdOrMemberExpression)(jsxIdExpression)\n\n            if (node.closingElement) {\n              node.closingElement.name =\n                (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_3__.toJsxIdOrMemberExpression)(jsxIdExpression)\n            }\n          }\n        }\n      },\n      leave(node) {\n        /** @type {Array<Property | SpreadElement>} */\n        const defaults = []\n        /** @type {Array<string>} */\n        const actual = []\n        /** @type {Array<Expression>} */\n        const parameters = []\n        /** @type {Array<VariableDeclarator>} */\n        const declarations = []\n\n        if (currentScope && currentScope.node === node) {\n          // Cast to patch our `node`.\n          currentScope = /** @type {Scope} */ (currentScope.parent)\n        }\n\n        if (\n          node.type === 'FunctionDeclaration' ||\n          node.type === 'FunctionExpression' ||\n          node.type === 'ArrowFunctionExpression'\n        ) {\n          const scopeNode = node\n          const scope = functionStack[functionStack.length - 1]\n          /** @type {string} */\n          let name\n\n          for (name of scope.tags.sort()) {\n            defaults.push({\n              type: 'Property',\n              kind: 'init',\n              key: (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_2__.name)(name)\n                ? {type: 'Identifier', name}\n                : {type: 'Literal', value: name},\n              value: {type: 'Literal', value: name},\n              method: false,\n              shorthand: false,\n              computed: false\n            })\n          }\n\n          actual.push(...scope.components)\n\n          for (name of scope.objects) {\n            // In some cases, a component is used directly (`<X>`) but it’s also\n            // used as an object (`<X.Y>`).\n            if (!actual.includes(name)) {\n              actual.push(name)\n            }\n          }\n\n          actual.sort()\n\n          /** @type {Array<Statement>} */\n          const statements = []\n\n          if (\n            defaults.length > 0 ||\n            actual.length > 0 ||\n            scope.idToInvalidComponentName.size > 0\n          ) {\n            if (providerImportSource) {\n              importProvider = true\n              parameters.push({\n                type: 'CallExpression',\n                callee: {type: 'Identifier', name: '_provideComponents'},\n                arguments: [],\n                optional: false\n              })\n            }\n\n            // Accept `components` as a prop if this is the `MDXContent` or\n            // `_createMdxContent` function.\n            if (\n              isNamedFunction(scope.node, 'MDXContent') ||\n              isNamedFunction(scope.node, '_createMdxContent')\n            ) {\n              parameters.push((0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_3__.toIdOrMemberExpression)(['props', 'components']))\n            }\n\n            if (defaults.length > 0 || parameters.length > 1) {\n              for (const parameter of parameters) {\n                defaults.push({type: 'SpreadElement', argument: parameter})\n              }\n            }\n\n            // If we’re getting components from several sources, merge them.\n            /** @type {Expression} */\n            let componentsInit =\n              defaults.length > 0\n                ? {type: 'ObjectExpression', properties: defaults}\n                : // If we’re only getting components from `props.components`,\n                  // make sure it’s defined.\n                  {\n                    type: 'LogicalExpression',\n                    operator: '||',\n                    left: parameters[0],\n                    right: {type: 'ObjectExpression', properties: []}\n                  }\n\n            /** @type {ObjectPattern | undefined} */\n            let componentsPattern\n\n            // Add components to scope.\n            // For `['MyComponent', 'MDXLayout']` this generates:\n            // ```tsx\n            // const {MyComponent, wrapper: MDXLayout} = _components\n            // ```\n            // Note that MDXLayout is special as it’s taken from\n            // `_components.wrapper`.\n            if (actual.length > 0) {\n              componentsPattern = {\n                type: 'ObjectPattern',\n                properties: actual.map(function (name) {\n                  return {\n                    type: 'Property',\n                    kind: 'init',\n                    key: {\n                      type: 'Identifier',\n                      name: name === 'MDXLayout' ? 'wrapper' : name\n                    },\n                    value: {type: 'Identifier', name},\n                    method: false,\n                    shorthand: name !== 'MDXLayout',\n                    computed: false\n                  }\n                })\n              }\n            }\n\n            if (scope.tags.length > 0) {\n              declarations.push({\n                type: 'VariableDeclarator',\n                id: {type: 'Identifier', name: '_components'},\n                init: componentsInit\n              })\n              componentsInit = {type: 'Identifier', name: '_components'}\n            }\n\n            if (isNamedFunction(scope.node, '_createMdxContent')) {\n              for (const [id, componentName] of [\n                ...scope.idToInvalidComponentName\n              ].sort(function ([a], [b]) {\n                return a.localeCompare(b)\n              })) {\n                // For JSX IDs that can’t be represented as JavaScript IDs (as in,\n                // those with dashes, such as `custom-element`), generate a\n                // separate variable that is a valid JS ID (such as `_component0`),\n                // and takes it from components:\n                // `const _component0 = _components['custom-element']`\n                declarations.push({\n                  type: 'VariableDeclarator',\n                  id: {\n                    type: 'Identifier',\n                    name: componentName\n                  },\n                  init: {\n                    type: 'MemberExpression',\n                    object: {type: 'Identifier', name: '_components'},\n                    property: {type: 'Literal', value: id},\n                    computed: true,\n                    optional: false\n                  }\n                })\n              }\n            }\n\n            if (componentsPattern) {\n              declarations.push({\n                type: 'VariableDeclarator',\n                id: componentsPattern,\n                init: componentsInit\n              })\n            }\n\n            if (declarations.length > 0) {\n              statements.push({\n                type: 'VariableDeclaration',\n                kind: 'const',\n                declarations\n              })\n            }\n          }\n\n          /** @type {string} */\n          let key\n\n          // Add partials (so for `x.y.z` it’d generate `x` and `x.y` too).\n          for (key in scope.references) {\n            if (Object.hasOwn(scope.references, key)) {\n              const parts = key.split('.')\n              let index = 0\n              while (++index < parts.length) {\n                const partial = parts.slice(0, index).join('.')\n                if (!Object.hasOwn(scope.references, partial)) {\n                  scope.references[partial] = {\n                    component: false,\n                    node: scope.references[key].node\n                  }\n                }\n              }\n            }\n          }\n\n          const references = Object.keys(scope.references).sort()\n          let index = -1\n          while (++index < references.length) {\n            const id = references[index]\n            const info = scope.references[id]\n            const place = (0,unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_4__.stringifyPosition)((0,unist_util_position_from_estree__WEBPACK_IMPORTED_MODULE_5__.positionFromEstree)(info.node))\n            /** @type {Array<Expression>} */\n            const parameters = [\n              {type: 'Literal', value: id},\n              {type: 'Literal', value: info.component}\n            ]\n\n            createErrorHelper = true\n\n            if (development && place) {\n              parameters.push({type: 'Literal', value: place})\n            }\n\n            statements.push({\n              type: 'IfStatement',\n              test: {\n                type: 'UnaryExpression',\n                operator: '!',\n                prefix: true,\n                argument: (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_3__.toIdOrMemberExpression)(id.split('.'))\n              },\n              consequent: {\n                type: 'ExpressionStatement',\n                expression: {\n                  type: 'CallExpression',\n                  callee: {type: 'Identifier', name: '_missingMdxReference'},\n                  arguments: parameters,\n                  optional: false\n                }\n              },\n              alternate: undefined\n            })\n          }\n\n          if (statements.length > 0) {\n            // Arrow functions with an implied return:\n            if (scopeNode.body.type !== 'BlockStatement') {\n              scopeNode.body = {\n                type: 'BlockStatement',\n                body: [{type: 'ReturnStatement', argument: scopeNode.body}]\n              }\n            }\n\n            scopeNode.body.body.unshift(...statements)\n          }\n\n          functionStack.pop()\n        }\n      }\n    })\n\n    // If a provider is used (and can be used), import it.\n    if (importProvider && providerImportSource) {\n      tree.body.unshift(\n        createImportProvider(providerImportSource, outputFormat)\n      )\n    }\n\n    // If potentially missing components are used.\n    if (createErrorHelper) {\n      /** @type {Array<Expression>} */\n      const message = [\n        {type: 'Literal', value: 'Expected '},\n        {\n          type: 'ConditionalExpression',\n          test: {type: 'Identifier', name: 'component'},\n          consequent: {type: 'Literal', value: 'component'},\n          alternate: {type: 'Literal', value: 'object'}\n        },\n        {type: 'Literal', value: ' `'},\n        {type: 'Identifier', name: 'id'},\n        {\n          type: 'Literal',\n          value:\n            '` to be defined: you likely forgot to import, pass, or provide it.'\n        }\n      ]\n\n      /** @type {Array<Identifier>} */\n      const parameters = [\n        {type: 'Identifier', name: 'id'},\n        {type: 'Identifier', name: 'component'}\n      ]\n\n      if (development) {\n        message.push({\n          type: 'ConditionalExpression',\n          test: {type: 'Identifier', name: 'place'},\n          consequent: (0,_util_estree_util_to_binary_addition_js__WEBPACK_IMPORTED_MODULE_6__.toBinaryAddition)([\n            {type: 'Literal', value: '\\nIt’s referenced in your code at `'},\n            {type: 'Identifier', name: 'place'},\n            {\n              type: 'Literal',\n              value: (file.path ? '` in `' + file.path : '') + '`'\n            }\n          ]),\n          alternate: {type: 'Literal', value: ''}\n        })\n\n        parameters.push({type: 'Identifier', name: 'place'})\n      }\n\n      tree.body.push({\n        type: 'FunctionDeclaration',\n        id: {type: 'Identifier', name: '_missingMdxReference'},\n        generator: false,\n        async: false,\n        params: parameters,\n        body: {\n          type: 'BlockStatement',\n          body: [\n            {\n              type: 'ThrowStatement',\n              argument: {\n                type: 'NewExpression',\n                callee: {type: 'Identifier', name: 'Error'},\n                arguments: [(0,_util_estree_util_to_binary_addition_js__WEBPACK_IMPORTED_MODULE_6__.toBinaryAddition)(message)]\n              }\n            }\n          ]\n        }\n      })\n    }\n\n    if (outputFormat === 'function-body') {\n      tree.body.unshift({\n        type: 'ExpressionStatement',\n        expression: {type: 'Literal', value: 'use strict'},\n        directive: 'use strict'\n      })\n    }\n  }\n}\n\n/**\n * @param {string} providerImportSource\n *   Provider source.\n * @param {'function-body' | 'program' | null | undefined} outputFormat\n *   Format.\n * @returns {ModuleDeclaration | Statement}\n *   Node.\n */\nfunction createImportProvider(providerImportSource, outputFormat) {\n  /** @type {Array<ImportSpecifier>} */\n  const specifiers = [\n    {\n      type: 'ImportSpecifier',\n      imported: {type: 'Identifier', name: 'useMDXComponents'},\n      local: {type: 'Identifier', name: '_provideComponents'}\n    }\n  ]\n\n  return outputFormat === 'function-body'\n    ? {\n        type: 'VariableDeclaration',\n        kind: 'const',\n        declarations: (0,_util_estree_util_specifiers_to_declarations_js__WEBPACK_IMPORTED_MODULE_7__.specifiersToDeclarations)(\n          specifiers,\n          (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_3__.toIdOrMemberExpression)(['arguments', 0])\n        )\n      }\n    : {\n        type: 'ImportDeclaration',\n        specifiers,\n        source: {type: 'Literal', value: providerImportSource}\n      }\n}\n\n/**\n * @param {Readonly<EstreeFunction>} node\n *   Node.\n * @param {string} name\n *   Name.\n * @returns {boolean}\n *   Whether `node` is a named function with `name`.\n */\nfunction isNamedFunction(node, name) {\n  return Boolean(node && 'id' in node && node.id && node.id.name === name)\n}\n\n/**\n * @param {Readonly<Scope>} scope\n *   Scope.\n * @param {string} id\n *   Identifier.\n * @returns {boolean}\n *   Whether `id` is in `scope`.\n */\nfunction inScope(scope, id) {\n  /** @type {Scope | undefined} */\n  let currentScope = scope\n\n  while (currentScope) {\n    if (currentScope.declarations.has(id)) {\n      return true\n    }\n\n    // Cast to patch our `node`.\n    currentScope = /** @type {Scope | undefined} */ (\n      currentScope.parent || undefined\n    )\n  }\n\n  return false\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/recma-jsx-rewrite.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/recma-stringify.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/recma-stringify.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   recmaStringify: () => (/* binding */ recmaStringify)\n/* harmony export */ });\n/* harmony import */ var estree_util_to_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! estree-util-to-js */ \"(ssr)/./node_modules/.pnpm/estree-util-to-js@2.0.0/node_modules/estree-util-to-js/lib/index.js\");\n/* harmony import */ var estree_util_to_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! estree-util-to-js */ \"(ssr)/./node_modules/.pnpm/estree-util-to-js@2.0.0/node_modules/estree-util-to-js/lib/jsx.js\");\n/**\n * @typedef {import('estree-jsx').Program} Program\n * @typedef {import('unified').Processor<undefined, undefined, undefined, Program, string>} Processor\n * @typedef {import('vfile').VFile} VFile\n *\n * @typedef {import('../core.js').ProcessorOptions} ProcessorOptions\n */\n\n\n\n/**\n * Serialize an esast (estree) program to JavaScript.\n *\n * @type {import('unified').Plugin<[Readonly<ProcessorOptions>], Program, string>}\n */\nfunction recmaStringify(options) {\n  // @ts-expect-error: TS is wrong about `this`.\n  // eslint-disable-next-line unicorn/no-this-assignment\n  const self = /** @type {Processor} */ (this)\n  const {SourceMapGenerator} = options\n\n  self.compiler = compiler\n\n  /**\n   * @param {Program} tree\n   *   Tree.\n   * @param {VFile} file\n   *   File.\n   * @returns {string}\n   *   JavaScript.\n   */\n  function compiler(tree, file) {\n    const result = SourceMapGenerator\n      ? (0,estree_util_to_js__WEBPACK_IMPORTED_MODULE_0__.toJs)(tree, {\n          SourceMapGenerator,\n          filePath: file.path || 'unknown.mdx',\n          handlers: estree_util_to_js__WEBPACK_IMPORTED_MODULE_1__.jsx\n        })\n      : (0,estree_util_to_js__WEBPACK_IMPORTED_MODULE_0__.toJs)(tree, {handlers: estree_util_to_js__WEBPACK_IMPORTED_MODULE_1__.jsx})\n\n    file.map = result.map\n\n    return result.value\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1keC1qcyttZHhAMy4wLjEvbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi9wbHVnaW4vcmVjbWEtc3RyaW5naWZ5LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0EsYUFBYSw4QkFBOEI7QUFDM0MsYUFBYSwrRUFBK0U7QUFDNUYsYUFBYSx1QkFBdUI7QUFDcEM7QUFDQSxhQUFhLHVDQUF1QztBQUNwRDs7QUFFMkM7O0FBRTNDO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNPO0FBQ1A7QUFDQTtBQUNBLDBCQUEwQixXQUFXO0FBQ3JDLFNBQVMsb0JBQW9COztBQUU3Qjs7QUFFQTtBQUNBLGFBQWEsU0FBUztBQUN0QjtBQUNBLGFBQWEsT0FBTztBQUNwQjtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsdURBQUk7QUFDWjtBQUNBO0FBQ0Esb0JBQW9CLGtEQUFHO0FBQ3ZCLFNBQVM7QUFDVCxRQUFRLHVEQUFJLFFBQVEsVUFBVSxrREFBRyxDQUFDOztBQUVsQzs7QUFFQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYm1fMjAyNC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbWR4LWpzK21keEAzLjAuMS9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3BsdWdpbi9yZWNtYS1zdHJpbmdpZnkuanM/N2E3OSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2VzdHJlZS1qc3gnKS5Qcm9ncmFtfSBQcm9ncmFtXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCd1bmlmaWVkJykuUHJvY2Vzc29yPHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFByb2dyYW0sIHN0cmluZz59IFByb2Nlc3NvclxuICogQHR5cGVkZWYge2ltcG9ydCgndmZpbGUnKS5WRmlsZX0gVkZpbGVcbiAqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi9jb3JlLmpzJykuUHJvY2Vzc29yT3B0aW9uc30gUHJvY2Vzc29yT3B0aW9uc1xuICovXG5cbmltcG9ydCB7anN4LCB0b0pzfSBmcm9tICdlc3RyZWUtdXRpbC10by1qcydcblxuLyoqXG4gKiBTZXJpYWxpemUgYW4gZXNhc3QgKGVzdHJlZSkgcHJvZ3JhbSB0byBKYXZhU2NyaXB0LlxuICpcbiAqIEB0eXBlIHtpbXBvcnQoJ3VuaWZpZWQnKS5QbHVnaW48W1JlYWRvbmx5PFByb2Nlc3Nvck9wdGlvbnM+XSwgUHJvZ3JhbSwgc3RyaW5nPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlY21hU3RyaW5naWZ5KG9wdGlvbnMpIHtcbiAgLy8gQHRzLWV4cGVjdC1lcnJvcjogVFMgaXMgd3JvbmcgYWJvdXQgYHRoaXNgLlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgdW5pY29ybi9uby10aGlzLWFzc2lnbm1lbnRcbiAgY29uc3Qgc2VsZiA9IC8qKiBAdHlwZSB7UHJvY2Vzc29yfSAqLyAodGhpcylcbiAgY29uc3Qge1NvdXJjZU1hcEdlbmVyYXRvcn0gPSBvcHRpb25zXG5cbiAgc2VsZi5jb21waWxlciA9IGNvbXBpbGVyXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7UHJvZ3JhbX0gdHJlZVxuICAgKiAgIFRyZWUuXG4gICAqIEBwYXJhbSB7VkZpbGV9IGZpbGVcbiAgICogICBGaWxlLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKiAgIEphdmFTY3JpcHQuXG4gICAqL1xuICBmdW5jdGlvbiBjb21waWxlcih0cmVlLCBmaWxlKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gU291cmNlTWFwR2VuZXJhdG9yXG4gICAgICA/IHRvSnModHJlZSwge1xuICAgICAgICAgIFNvdXJjZU1hcEdlbmVyYXRvcixcbiAgICAgICAgICBmaWxlUGF0aDogZmlsZS5wYXRoIHx8ICd1bmtub3duLm1keCcsXG4gICAgICAgICAgaGFuZGxlcnM6IGpzeFxuICAgICAgICB9KVxuICAgICAgOiB0b0pzKHRyZWUsIHtoYW5kbGVyczoganN4fSlcblxuICAgIGZpbGUubWFwID0gcmVzdWx0Lm1hcFxuXG4gICAgcmV0dXJuIHJlc3VsdC52YWx1ZVxuICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/recma-stringify.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/rehype-recma.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/rehype-recma.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   rehypeRecma: () => (/* binding */ rehypeRecma)\n/* harmony export */ });\n/* harmony import */ var hast_util_to_estree__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hast-util-to-estree */ \"(ssr)/./node_modules/.pnpm/hast-util-to-estree@3.1.0/node_modules/hast-util-to-estree/lib/index.js\");\n/**\n * @typedef {import('estree-jsx').Program} Program\n *\n * @typedef {import('hast').Root} Root\n *\n * @typedef {import('../core.js').ProcessorOptions} ProcessorOptions\n */\n\n\n\n/**\n * A plugin to transform an HTML (hast) tree to a JS (estree).\n * `hast-util-to-estree` does all the work for us!\n *\n * @param {Readonly<ProcessorOptions>} options\n *   Configuration (optional).\n * @returns\n *   Transform.\n */\nfunction rehypeRecma(options) {\n  /**\n   * @param {Root} tree\n   *   Tree (hast).\n   * @returns {Program}\n   *   Program (esast).\n   */\n  return function (tree) {\n    return (0,hast_util_to_estree__WEBPACK_IMPORTED_MODULE_0__.toEstree)(tree, options)\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1keC1qcyttZHhAMy4wLjEvbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi9wbHVnaW4vcmVoeXBlLXJlY21hLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQSxhQUFhLDhCQUE4QjtBQUMzQztBQUNBLGFBQWEscUJBQXFCO0FBQ2xDO0FBQ0EsYUFBYSx1Q0FBdUM7QUFDcEQ7O0FBRTRDOztBQUU1QztBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsNEJBQTRCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLGFBQWEsTUFBTTtBQUNuQjtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQSxXQUFXLDZEQUFRO0FBQ25CO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYm1fMjAyNC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbWR4LWpzK21keEAzLjAuMS9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3BsdWdpbi9yZWh5cGUtcmVjbWEuanM/Njc4YSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2VzdHJlZS1qc3gnKS5Qcm9ncmFtfSBQcm9ncmFtXG4gKlxuICogQHR5cGVkZWYge2ltcG9ydCgnaGFzdCcpLlJvb3R9IFJvb3RcbiAqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi9jb3JlLmpzJykuUHJvY2Vzc29yT3B0aW9uc30gUHJvY2Vzc29yT3B0aW9uc1xuICovXG5cbmltcG9ydCB7dG9Fc3RyZWV9IGZyb20gJ2hhc3QtdXRpbC10by1lc3RyZWUnXG5cbi8qKlxuICogQSBwbHVnaW4gdG8gdHJhbnNmb3JtIGFuIEhUTUwgKGhhc3QpIHRyZWUgdG8gYSBKUyAoZXN0cmVlKS5cbiAqIGBoYXN0LXV0aWwtdG8tZXN0cmVlYCBkb2VzIGFsbCB0aGUgd29yayBmb3IgdXMhXG4gKlxuICogQHBhcmFtIHtSZWFkb25seTxQcm9jZXNzb3JPcHRpb25zPn0gb3B0aW9uc1xuICogICBDb25maWd1cmF0aW9uIChvcHRpb25hbCkuXG4gKiBAcmV0dXJuc1xuICogICBUcmFuc2Zvcm0uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZWh5cGVSZWNtYShvcHRpb25zKSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge1Jvb3R9IHRyZWVcbiAgICogICBUcmVlIChoYXN0KS5cbiAgICogQHJldHVybnMge1Byb2dyYW19XG4gICAqICAgUHJvZ3JhbSAoZXNhc3QpLlxuICAgKi9cbiAgcmV0dXJuIGZ1bmN0aW9uICh0cmVlKSB7XG4gICAgcmV0dXJuIHRvRXN0cmVlKHRyZWUsIG9wdGlvbnMpXG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/rehype-recma.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/rehype-remove-raw.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/rehype-remove-raw.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   rehypeRemoveRaw: () => (/* binding */ rehypeRemoveRaw)\n/* harmony export */ });\n/* harmony import */ var unist_util_visit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! unist-util-visit */ \"(ssr)/./node_modules/.pnpm/unist-util-visit@5.0.0/node_modules/unist-util-visit/lib/index.js\");\n/**\n * @typedef {import('hast').Root} Root\n */\n\n\n\n/**\n * A tiny plugin that removes raw HTML.\n *\n * This is needed if the format is `md` and `rehype-raw` was not used to parse\n * dangerous HTML into nodes.\n *\n * @returns\n *   Transform.\n */\nfunction rehypeRemoveRaw() {\n  /**\n   * @param {Root} tree\n   *   Tree.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  return function (tree) {\n    (0,unist_util_visit__WEBPACK_IMPORTED_MODULE_0__.visit)(tree, 'raw', function (_, index, parent) {\n      if (parent && typeof index === 'number') {\n        parent.children.splice(index, 1)\n        return index\n      }\n    })\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1keC1qcyttZHhAMy4wLjEvbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi9wbHVnaW4vcmVoeXBlLXJlbW92ZS1yYXcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBLGFBQWEscUJBQXFCO0FBQ2xDOztBQUVzQzs7QUFFdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLGFBQWEsTUFBTTtBQUNuQjtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQSxJQUFJLHVEQUFLO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2NibV8yMDI0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtZHgtanMrbWR4QDMuMC4xL25vZGVfbW9kdWxlcy9AbWR4LWpzL21keC9saWIvcGx1Z2luL3JlaHlwZS1yZW1vdmUtcmF3LmpzP2I0NTUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuUm9vdH0gUm9vdFxuICovXG5cbmltcG9ydCB7dmlzaXR9IGZyb20gJ3VuaXN0LXV0aWwtdmlzaXQnXG5cbi8qKlxuICogQSB0aW55IHBsdWdpbiB0aGF0IHJlbW92ZXMgcmF3IEhUTUwuXG4gKlxuICogVGhpcyBpcyBuZWVkZWQgaWYgdGhlIGZvcm1hdCBpcyBgbWRgIGFuZCBgcmVoeXBlLXJhd2Agd2FzIG5vdCB1c2VkIHRvIHBhcnNlXG4gKiBkYW5nZXJvdXMgSFRNTCBpbnRvIG5vZGVzLlxuICpcbiAqIEByZXR1cm5zXG4gKiAgIFRyYW5zZm9ybS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlaHlwZVJlbW92ZVJhdygpIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7Um9vdH0gdHJlZVxuICAgKiAgIFRyZWUuXG4gICAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gICAqICAgTm90aGluZy5cbiAgICovXG4gIHJldHVybiBmdW5jdGlvbiAodHJlZSkge1xuICAgIHZpc2l0KHRyZWUsICdyYXcnLCBmdW5jdGlvbiAoXywgaW5kZXgsIHBhcmVudCkge1xuICAgICAgaWYgKHBhcmVudCAmJiB0eXBlb2YgaW5kZXggPT09ICdudW1iZXInKSB7XG4gICAgICAgIHBhcmVudC5jaGlsZHJlbi5zcGxpY2UoaW5kZXgsIDEpXG4gICAgICAgIHJldHVybiBpbmRleFxuICAgICAgfVxuICAgIH0pXG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/rehype-remove-raw.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/remark-mark-and-unravel.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/remark-mark-and-unravel.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   remarkMarkAndUnravel: () => (/* binding */ remarkMarkAndUnravel)\n/* harmony export */ });\n/* harmony import */ var collapse_white_space__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! collapse-white-space */ \"(ssr)/./node_modules/.pnpm/collapse-white-space@2.1.0/node_modules/collapse-white-space/index.js\");\n/* harmony import */ var unist_util_visit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! unist-util-visit */ \"(ssr)/./node_modules/.pnpm/unist-util-visit@5.0.0/node_modules/unist-util-visit/lib/index.js\");\n/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').RootContent} RootContent\n */\n\n\n\n\n/**\n * A tiny plugin that unravels `<p><h1>x</h1></p>` but also\n * `<p><Component /></p>` (so it has no knowledge of “HTML”).\n *\n * It also marks JSX as being explicitly JSX, so when a user passes a `h1`\n * component, it is used for `# heading` but not for `<h1>heading</h1>`.\n *\n * @returns\n *   Transform.\n */\nfunction remarkMarkAndUnravel() {\n  /**\n   * @param {Root} tree\n   *   Tree.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  return function (tree) {\n    (0,unist_util_visit__WEBPACK_IMPORTED_MODULE_0__.visit)(tree, function (node, index, parent) {\n      let offset = -1\n      let all = true\n      let oneOrMore = false\n\n      if (parent && typeof index === 'number' && node.type === 'paragraph') {\n        const children = node.children\n\n        while (++offset < children.length) {\n          const child = children[offset]\n\n          if (\n            child.type === 'mdxJsxTextElement' ||\n            child.type === 'mdxTextExpression'\n          ) {\n            oneOrMore = true\n          } else if (\n            child.type === 'text' &&\n            (0,collapse_white_space__WEBPACK_IMPORTED_MODULE_1__.collapseWhiteSpace)(child.value, {style: 'html', trim: true}) === ''\n          ) {\n            // Empty.\n          } else {\n            all = false\n            break\n          }\n        }\n\n        if (all && oneOrMore) {\n          offset = -1\n\n          /** @type {Array<RootContent>} */\n          const newChildren = []\n\n          while (++offset < children.length) {\n            const child = children[offset]\n\n            if (child.type === 'mdxJsxTextElement') {\n              // @ts-expect-error: mutate because it is faster; content model is fine.\n              child.type = 'mdxJsxFlowElement'\n            }\n\n            if (child.type === 'mdxTextExpression') {\n              // @ts-expect-error: mutate because it is faster; content model is fine.\n              child.type = 'mdxFlowExpression'\n            }\n\n            if (\n              child.type === 'text' &&\n              /^[\\t\\r\\n ]+$/.test(String(child.value))\n            ) {\n              // Empty.\n            } else {\n              newChildren.push(child)\n            }\n          }\n\n          parent.children.splice(index, 1, ...newChildren)\n          return index\n        }\n      }\n\n      if (\n        node.type === 'mdxJsxFlowElement' ||\n        node.type === 'mdxJsxTextElement'\n      ) {\n        const data = node.data || (node.data = {})\n        data._mdxExplicitJsx = true\n      }\n    })\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1keC1qcyttZHhAMy4wLjEvbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi9wbHVnaW4vcmVtYXJrLW1hcmstYW5kLXVucmF2ZWwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQSxhQUFhLHNCQUFzQjtBQUNuQyxhQUFhLDZCQUE2QjtBQUMxQzs7QUFFdUQ7QUFDakI7O0FBRXRDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLGFBQWEsTUFBTTtBQUNuQjtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQSxJQUFJLHVEQUFLO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0EsWUFBWSx3RUFBa0IsZUFBZSwwQkFBMEI7QUFDdkU7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLHFCQUFxQixvQkFBb0I7QUFDekM7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLGdFQUFnRTtBQUNoRTtBQUNBOztBQUVBO0FBQ0EsZ0VBQWdFO0FBQ2hFO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQ7QUFDakQ7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2JtXzIwMjQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1keC1qcyttZHhAMy4wLjEvbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi9wbHVnaW4vcmVtYXJrLW1hcmstYW5kLXVucmF2ZWwuanM/MjZjMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21kYXN0JykuUm9vdH0gUm9vdFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5Sb290Q29udGVudH0gUm9vdENvbnRlbnRcbiAqL1xuXG5pbXBvcnQge2NvbGxhcHNlV2hpdGVTcGFjZX0gZnJvbSAnY29sbGFwc2Utd2hpdGUtc3BhY2UnXG5pbXBvcnQge3Zpc2l0fSBmcm9tICd1bmlzdC11dGlsLXZpc2l0J1xuXG4vKipcbiAqIEEgdGlueSBwbHVnaW4gdGhhdCB1bnJhdmVscyBgPHA+PGgxPng8L2gxPjwvcD5gIGJ1dCBhbHNvXG4gKiBgPHA+PENvbXBvbmVudCAvPjwvcD5gIChzbyBpdCBoYXMgbm8ga25vd2xlZGdlIG9mIOKAnEhUTUzigJ0pLlxuICpcbiAqIEl0IGFsc28gbWFya3MgSlNYIGFzIGJlaW5nIGV4cGxpY2l0bHkgSlNYLCBzbyB3aGVuIGEgdXNlciBwYXNzZXMgYSBgaDFgXG4gKiBjb21wb25lbnQsIGl0IGlzIHVzZWQgZm9yIGAjIGhlYWRpbmdgIGJ1dCBub3QgZm9yIGA8aDE+aGVhZGluZzwvaDE+YC5cbiAqXG4gKiBAcmV0dXJuc1xuICogICBUcmFuc2Zvcm0uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW1hcmtNYXJrQW5kVW5yYXZlbCgpIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7Um9vdH0gdHJlZVxuICAgKiAgIFRyZWUuXG4gICAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gICAqICAgTm90aGluZy5cbiAgICovXG4gIHJldHVybiBmdW5jdGlvbiAodHJlZSkge1xuICAgIHZpc2l0KHRyZWUsIGZ1bmN0aW9uIChub2RlLCBpbmRleCwgcGFyZW50KSB7XG4gICAgICBsZXQgb2Zmc2V0ID0gLTFcbiAgICAgIGxldCBhbGwgPSB0cnVlXG4gICAgICBsZXQgb25lT3JNb3JlID0gZmFsc2VcblxuICAgICAgaWYgKHBhcmVudCAmJiB0eXBlb2YgaW5kZXggPT09ICdudW1iZXInICYmIG5vZGUudHlwZSA9PT0gJ3BhcmFncmFwaCcpIHtcbiAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuXG5cbiAgICAgICAgd2hpbGUgKCsrb2Zmc2V0IDwgY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgICAgY29uc3QgY2hpbGQgPSBjaGlsZHJlbltvZmZzZXRdXG5cbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBjaGlsZC50eXBlID09PSAnbWR4SnN4VGV4dEVsZW1lbnQnIHx8XG4gICAgICAgICAgICBjaGlsZC50eXBlID09PSAnbWR4VGV4dEV4cHJlc3Npb24nXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBvbmVPck1vcmUgPSB0cnVlXG4gICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgIGNoaWxkLnR5cGUgPT09ICd0ZXh0JyAmJlxuICAgICAgICAgICAgY29sbGFwc2VXaGl0ZVNwYWNlKGNoaWxkLnZhbHVlLCB7c3R5bGU6ICdodG1sJywgdHJpbTogdHJ1ZX0pID09PSAnJ1xuICAgICAgICAgICkge1xuICAgICAgICAgICAgLy8gRW1wdHkuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFsbCA9IGZhbHNlXG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhbGwgJiYgb25lT3JNb3JlKSB7XG4gICAgICAgICAgb2Zmc2V0ID0gLTFcblxuICAgICAgICAgIC8qKiBAdHlwZSB7QXJyYXk8Um9vdENvbnRlbnQ+fSAqL1xuICAgICAgICAgIGNvbnN0IG5ld0NoaWxkcmVuID0gW11cblxuICAgICAgICAgIHdoaWxlICgrK29mZnNldCA8IGNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgY2hpbGQgPSBjaGlsZHJlbltvZmZzZXRdXG5cbiAgICAgICAgICAgIGlmIChjaGlsZC50eXBlID09PSAnbWR4SnN4VGV4dEVsZW1lbnQnKSB7XG4gICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IG11dGF0ZSBiZWNhdXNlIGl0IGlzIGZhc3RlcjsgY29udGVudCBtb2RlbCBpcyBmaW5lLlxuICAgICAgICAgICAgICBjaGlsZC50eXBlID0gJ21keEpzeEZsb3dFbGVtZW50J1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY2hpbGQudHlwZSA9PT0gJ21keFRleHRFeHByZXNzaW9uJykge1xuICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiBtdXRhdGUgYmVjYXVzZSBpdCBpcyBmYXN0ZXI7IGNvbnRlbnQgbW9kZWwgaXMgZmluZS5cbiAgICAgICAgICAgICAgY2hpbGQudHlwZSA9ICdtZHhGbG93RXhwcmVzc2lvbidcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICBjaGlsZC50eXBlID09PSAndGV4dCcgJiZcbiAgICAgICAgICAgICAgL15bXFx0XFxyXFxuIF0rJC8udGVzdChTdHJpbmcoY2hpbGQudmFsdWUpKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIC8vIEVtcHR5LlxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbmV3Q2hpbGRyZW4ucHVzaChjaGlsZClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwYXJlbnQuY2hpbGRyZW4uc3BsaWNlKGluZGV4LCAxLCAuLi5uZXdDaGlsZHJlbilcbiAgICAgICAgICByZXR1cm4gaW5kZXhcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoXG4gICAgICAgIG5vZGUudHlwZSA9PT0gJ21keEpzeEZsb3dFbGVtZW50JyB8fFxuICAgICAgICBub2RlLnR5cGUgPT09ICdtZHhKc3hUZXh0RWxlbWVudCdcbiAgICAgICkge1xuICAgICAgICBjb25zdCBkYXRhID0gbm9kZS5kYXRhIHx8IChub2RlLmRhdGEgPSB7fSlcbiAgICAgICAgZGF0YS5fbWR4RXhwbGljaXRKc3ggPSB0cnVlXG4gICAgICB9XG4gICAgfSlcbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/remark-mark-and-unravel.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-create.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-create.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   create: () => (/* binding */ create)\n/* harmony export */ });\n/**\n * @typedef {import('estree-jsx').Node} Node\n */\n\n// Fix to show references to above types in VS Code.\n''\n\n/**\n * @param {Readonly<Node>} from\n *   Node to take from.\n * @param {Node} to\n *   Node to add to.\n * @returns {undefined}\n *   Nothing.\n */\nfunction create(from, to) {\n  /** @type {Array<keyof Node>} */\n  // @ts-expect-error: `start`, `end`, `comments` are custom Acorn fields.\n  const fields = ['start', 'end', 'loc', 'range', 'comments']\n  let index = -1\n\n  while (++index < fields.length) {\n    const field = fields[index]\n\n    if (field in from) {\n      // @ts-expect-error: assume they’re settable.\n      to[field] = from[field]\n    }\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1keC1qcyttZHhAMy4wLjEvbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi91dGlsL2VzdHJlZS11dGlsLWNyZWF0ZS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQSxhQUFhLDJCQUEyQjtBQUN4Qzs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsV0FBVyxnQkFBZ0I7QUFDM0I7QUFDQSxXQUFXLE1BQU07QUFDakI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNPO0FBQ1AsYUFBYSxtQkFBbUI7QUFDaEM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2JtXzIwMjQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1keC1qcyttZHhAMy4wLjEvbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi91dGlsL2VzdHJlZS11dGlsLWNyZWF0ZS5qcz81NWJhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnZXN0cmVlLWpzeCcpLk5vZGV9IE5vZGVcbiAqL1xuXG4vLyBGaXggdG8gc2hvdyByZWZlcmVuY2VzIHRvIGFib3ZlIHR5cGVzIGluIFZTIENvZGUuXG4nJ1xuXG4vKipcbiAqIEBwYXJhbSB7UmVhZG9ubHk8Tm9kZT59IGZyb21cbiAqICAgTm9kZSB0byB0YWtlIGZyb20uXG4gKiBAcGFyYW0ge05vZGV9IHRvXG4gKiAgIE5vZGUgdG8gYWRkIHRvLlxuICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAqICAgTm90aGluZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZShmcm9tLCB0bykge1xuICAvKiogQHR5cGUge0FycmF5PGtleW9mIE5vZGU+fSAqL1xuICAvLyBAdHMtZXhwZWN0LWVycm9yOiBgc3RhcnRgLCBgZW5kYCwgYGNvbW1lbnRzYCBhcmUgY3VzdG9tIEFjb3JuIGZpZWxkcy5cbiAgY29uc3QgZmllbGRzID0gWydzdGFydCcsICdlbmQnLCAnbG9jJywgJ3JhbmdlJywgJ2NvbW1lbnRzJ11cbiAgbGV0IGluZGV4ID0gLTFcblxuICB3aGlsZSAoKytpbmRleCA8IGZpZWxkcy5sZW5ndGgpIHtcbiAgICBjb25zdCBmaWVsZCA9IGZpZWxkc1tpbmRleF1cblxuICAgIGlmIChmaWVsZCBpbiBmcm9tKSB7XG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiBhc3N1bWUgdGhleeKAmXJlIHNldHRhYmxlLlxuICAgICAgdG9bZmllbGRdID0gZnJvbVtmaWVsZF1cbiAgICB9XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-create.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-declaration-to-expression.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-declaration-to-expression.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   declarationToExpression: () => (/* binding */ declarationToExpression)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(ssr)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/**\n * @typedef {import('estree-jsx').Declaration} Declaration\n * @typedef {import('estree-jsx').Expression} Expression\n * @typedef {import('estree-jsx').MaybeNamedClassDeclaration} MaybeNamedClassDeclaration\n * @typedef {import('estree-jsx').MaybeNamedFunctionDeclaration} MaybeNamedFunctionDeclaration\n */\n\n\n\n/**\n * Turn a declaration into an expression.\n *\n * Doesn’t work for variable declarations, but that’s fine for our use case\n * because currently we’re using this utility for export default declarations,\n * which can’t contain variable declarations.\n *\n * @param {Readonly<Declaration | MaybeNamedClassDeclaration | MaybeNamedFunctionDeclaration>} declaration\n *   Declaration.\n * @returns {Expression}\n *   Expression.\n */\nfunction declarationToExpression(declaration) {\n  if (declaration.type === 'FunctionDeclaration') {\n    return {...declaration, type: 'FunctionExpression'}\n  }\n\n  // This is currently an internal utility so the next shouldn’t happen or a\n  // maintainer is making a mistake.\n  (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(declaration.type === 'ClassDeclaration', 'unexpected node type')\n  return {...declaration, type: 'ClassExpression'}\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1keC1qcyttZHhAMy4wLjEvbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi91dGlsL2VzdHJlZS11dGlsLWRlY2xhcmF0aW9uLXRvLWV4cHJlc3Npb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBLGFBQWEsa0NBQWtDO0FBQy9DLGFBQWEsaUNBQWlDO0FBQzlDLGFBQWEsaURBQWlEO0FBQzlELGFBQWEsb0RBQW9EO0FBQ2pFOztBQUVtQzs7QUFFbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLG9GQUFvRjtBQUMvRjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ087QUFDUDtBQUNBLFlBQVk7QUFDWjs7QUFFQTtBQUNBO0FBQ0EsRUFBRSwwQ0FBTTtBQUNSLFVBQVU7QUFDViIsInNvdXJjZXMiOlsid2VicGFjazovL2NibV8yMDI0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtZHgtanMrbWR4QDMuMC4xL25vZGVfbW9kdWxlcy9AbWR4LWpzL21keC9saWIvdXRpbC9lc3RyZWUtdXRpbC1kZWNsYXJhdGlvbi10by1leHByZXNzaW9uLmpzP2FiMDEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdlc3RyZWUtanN4JykuRGVjbGFyYXRpb259IERlY2xhcmF0aW9uXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdlc3RyZWUtanN4JykuRXhwcmVzc2lvbn0gRXhwcmVzc2lvblxuICogQHR5cGVkZWYge2ltcG9ydCgnZXN0cmVlLWpzeCcpLk1heWJlTmFtZWRDbGFzc0RlY2xhcmF0aW9ufSBNYXliZU5hbWVkQ2xhc3NEZWNsYXJhdGlvblxuICogQHR5cGVkZWYge2ltcG9ydCgnZXN0cmVlLWpzeCcpLk1heWJlTmFtZWRGdW5jdGlvbkRlY2xhcmF0aW9ufSBNYXliZU5hbWVkRnVuY3Rpb25EZWNsYXJhdGlvblxuICovXG5cbmltcG9ydCB7b2sgYXMgYXNzZXJ0fSBmcm9tICdkZXZsb3AnXG5cbi8qKlxuICogVHVybiBhIGRlY2xhcmF0aW9uIGludG8gYW4gZXhwcmVzc2lvbi5cbiAqXG4gKiBEb2VzbuKAmXQgd29yayBmb3IgdmFyaWFibGUgZGVjbGFyYXRpb25zLCBidXQgdGhhdOKAmXMgZmluZSBmb3Igb3VyIHVzZSBjYXNlXG4gKiBiZWNhdXNlIGN1cnJlbnRseSB3ZeKAmXJlIHVzaW5nIHRoaXMgdXRpbGl0eSBmb3IgZXhwb3J0IGRlZmF1bHQgZGVjbGFyYXRpb25zLFxuICogd2hpY2ggY2Fu4oCZdCBjb250YWluIHZhcmlhYmxlIGRlY2xhcmF0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5PERlY2xhcmF0aW9uIHwgTWF5YmVOYW1lZENsYXNzRGVjbGFyYXRpb24gfCBNYXliZU5hbWVkRnVuY3Rpb25EZWNsYXJhdGlvbj59IGRlY2xhcmF0aW9uXG4gKiAgIERlY2xhcmF0aW9uLlxuICogQHJldHVybnMge0V4cHJlc3Npb259XG4gKiAgIEV4cHJlc3Npb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWNsYXJhdGlvblRvRXhwcmVzc2lvbihkZWNsYXJhdGlvbikge1xuICBpZiAoZGVjbGFyYXRpb24udHlwZSA9PT0gJ0Z1bmN0aW9uRGVjbGFyYXRpb24nKSB7XG4gICAgcmV0dXJuIHsuLi5kZWNsYXJhdGlvbiwgdHlwZTogJ0Z1bmN0aW9uRXhwcmVzc2lvbid9XG4gIH1cblxuICAvLyBUaGlzIGlzIGN1cnJlbnRseSBhbiBpbnRlcm5hbCB1dGlsaXR5IHNvIHRoZSBuZXh0IHNob3VsZG7igJl0IGhhcHBlbiBvciBhXG4gIC8vIG1haW50YWluZXIgaXMgbWFraW5nIGEgbWlzdGFrZS5cbiAgYXNzZXJ0KGRlY2xhcmF0aW9uLnR5cGUgPT09ICdDbGFzc0RlY2xhcmF0aW9uJywgJ3VuZXhwZWN0ZWQgbm9kZSB0eXBlJylcbiAgcmV0dXJuIHsuLi5kZWNsYXJhdGlvbiwgdHlwZTogJ0NsYXNzRXhwcmVzc2lvbid9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-declaration-to-expression.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-is-declaration.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-is-declaration.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isDeclaration: () => (/* binding */ isDeclaration)\n/* harmony export */ });\n/**\n * @typedef {import('estree-jsx').Declaration} Declaration\n * @typedef {import('estree-jsx').MaybeNamedClassDeclaration} MaybeNamedClassDeclaration\n * @typedef {import('estree-jsx').MaybeNamedFunctionDeclaration} MaybeNamedFunctionDeclaration\n * @typedef {import('estree-jsx').Node} Node\n */\n\n// Fix to show references to above types in VS Code.\n''\n\n/**\n * Check if `node` is a declaration.\n *\n * @param {Readonly<MaybeNamedClassDeclaration | MaybeNamedFunctionDeclaration | Node>} node\n *   Node to check.\n * @returns {node is Declaration | MaybeNamedClassDeclaration | MaybeNamedFunctionDeclaration}\n *   Whether `node` is a declaration.\n */\nfunction isDeclaration(node) {\n  return Boolean(\n    node.type === 'FunctionDeclaration' ||\n      node.type === 'ClassDeclaration' ||\n      node.type === 'VariableDeclaration'\n  )\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1keC1qcyttZHhAMy4wLjEvbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi91dGlsL2VzdHJlZS11dGlsLWlzLWRlY2xhcmF0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBLGFBQWEsa0NBQWtDO0FBQy9DLGFBQWEsaURBQWlEO0FBQzlELGFBQWEsb0RBQW9EO0FBQ2pFLGFBQWEsMkJBQTJCO0FBQ3hDOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyw2RUFBNkU7QUFDeEY7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2JtXzIwMjQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1keC1qcyttZHhAMy4wLjEvbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi91dGlsL2VzdHJlZS11dGlsLWlzLWRlY2xhcmF0aW9uLmpzPzVmMTAiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdlc3RyZWUtanN4JykuRGVjbGFyYXRpb259IERlY2xhcmF0aW9uXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdlc3RyZWUtanN4JykuTWF5YmVOYW1lZENsYXNzRGVjbGFyYXRpb259IE1heWJlTmFtZWRDbGFzc0RlY2xhcmF0aW9uXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdlc3RyZWUtanN4JykuTWF5YmVOYW1lZEZ1bmN0aW9uRGVjbGFyYXRpb259IE1heWJlTmFtZWRGdW5jdGlvbkRlY2xhcmF0aW9uXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdlc3RyZWUtanN4JykuTm9kZX0gTm9kZVxuICovXG5cbi8vIEZpeCB0byBzaG93IHJlZmVyZW5jZXMgdG8gYWJvdmUgdHlwZXMgaW4gVlMgQ29kZS5cbicnXG5cbi8qKlxuICogQ2hlY2sgaWYgYG5vZGVgIGlzIGEgZGVjbGFyYXRpb24uXG4gKlxuICogQHBhcmFtIHtSZWFkb25seTxNYXliZU5hbWVkQ2xhc3NEZWNsYXJhdGlvbiB8IE1heWJlTmFtZWRGdW5jdGlvbkRlY2xhcmF0aW9uIHwgTm9kZT59IG5vZGVcbiAqICAgTm9kZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtub2RlIGlzIERlY2xhcmF0aW9uIHwgTWF5YmVOYW1lZENsYXNzRGVjbGFyYXRpb24gfCBNYXliZU5hbWVkRnVuY3Rpb25EZWNsYXJhdGlvbn1cbiAqICAgV2hldGhlciBgbm9kZWAgaXMgYSBkZWNsYXJhdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRGVjbGFyYXRpb24obm9kZSkge1xuICByZXR1cm4gQm9vbGVhbihcbiAgICBub2RlLnR5cGUgPT09ICdGdW5jdGlvbkRlY2xhcmF0aW9uJyB8fFxuICAgICAgbm9kZS50eXBlID09PSAnQ2xhc3NEZWNsYXJhdGlvbicgfHxcbiAgICAgIG5vZGUudHlwZSA9PT0gJ1ZhcmlhYmxlRGVjbGFyYXRpb24nXG4gIClcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-is-declaration.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-specifiers-to-declarations.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-specifiers-to-declarations.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   specifiersToDeclarations: () => (/* binding */ specifiersToDeclarations)\n/* harmony export */ });\n/* harmony import */ var _estree_util_create_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./estree-util-create.js */ \"(ssr)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-create.js\");\n/**\n * @typedef {import('estree-jsx').AssignmentProperty} AssignmentProperty\n * @typedef {import('estree-jsx').ExportSpecifier} ExportSpecifier\n * @typedef {import('estree-jsx').Expression} Expression\n * @typedef {import('estree-jsx').Identifier} Identifier\n * @typedef {import('estree-jsx').ImportDefaultSpecifier} ImportDefaultSpecifier\n * @typedef {import('estree-jsx').ImportNamespaceSpecifier} ImportNamespaceSpecifier\n * @typedef {import('estree-jsx').ImportSpecifier} ImportSpecifier\n * @typedef {import('estree-jsx').VariableDeclarator} VariableDeclarator\n */\n\n\n\n/**\n * @param {ReadonlyArray<Readonly<ExportSpecifier> | Readonly<ImportDefaultSpecifier> | Readonly<ImportNamespaceSpecifier> | Readonly<ImportSpecifier>>} specifiers\n *   Specifiers.\n * @param {Readonly<Expression>} init\n *   Initializer.\n * @returns {Array<VariableDeclarator>}\n *   Declarations.\n */\nfunction specifiersToDeclarations(specifiers, init) {\n  let index = -1\n  /** @type {Array<VariableDeclarator>} */\n  const declarations = []\n  /** @type {Array<ExportSpecifier | ImportDefaultSpecifier | ImportSpecifier>} */\n  const otherSpecifiers = []\n  // Can only be one according to JS syntax.\n  /** @type {ImportNamespaceSpecifier | undefined} */\n  let importNamespaceSpecifier\n\n  while (++index < specifiers.length) {\n    const specifier = specifiers[index]\n\n    if (specifier.type === 'ImportNamespaceSpecifier') {\n      importNamespaceSpecifier = specifier\n    } else {\n      otherSpecifiers.push(specifier)\n    }\n  }\n\n  if (importNamespaceSpecifier) {\n    /** @type {VariableDeclarator} */\n    const declarator = {\n      type: 'VariableDeclarator',\n      id: importNamespaceSpecifier.local,\n      init\n    }\n    ;(0,_estree_util_create_js__WEBPACK_IMPORTED_MODULE_0__.create)(importNamespaceSpecifier, declarator)\n    declarations.push(declarator)\n  }\n\n  declarations.push({\n    type: 'VariableDeclarator',\n    id: {\n      type: 'ObjectPattern',\n      properties: otherSpecifiers.map(function (specifier) {\n        /** @type {Identifier} */\n        let key =\n          specifier.type === 'ImportSpecifier'\n            ? specifier.imported\n            : specifier.type === 'ExportSpecifier'\n              ? specifier.exported\n              : {type: 'Identifier', name: 'default'}\n        let value = specifier.local\n\n        // Switch them around if we’re exporting.\n        if (specifier.type === 'ExportSpecifier') {\n          value = key\n          key = specifier.local\n        }\n\n        /** @type {AssignmentProperty} */\n        const property = {\n          type: 'Property',\n          kind: 'init',\n          shorthand: key.name === value.name,\n          method: false,\n          computed: false,\n          key,\n          value\n        }\n        ;(0,_estree_util_create_js__WEBPACK_IMPORTED_MODULE_0__.create)(specifier, property)\n        return property\n      })\n    },\n    init: importNamespaceSpecifier\n      ? {type: 'Identifier', name: importNamespaceSpecifier.local.name}\n      : init\n  })\n\n  return declarations\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1keC1qcyttZHhAMy4wLjEvbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi91dGlsL2VzdHJlZS11dGlsLXNwZWNpZmllcnMtdG8tZGVjbGFyYXRpb25zLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQSxhQUFhLHlDQUF5QztBQUN0RCxhQUFhLHNDQUFzQztBQUNuRCxhQUFhLGlDQUFpQztBQUM5QyxhQUFhLGlDQUFpQztBQUM5QyxhQUFhLDZDQUE2QztBQUMxRCxhQUFhLCtDQUErQztBQUM1RCxhQUFhLHNDQUFzQztBQUNuRCxhQUFhLHlDQUF5QztBQUN0RDs7QUFFOEM7O0FBRTlDO0FBQ0EsV0FBVyw4SUFBOEk7QUFDeko7QUFDQSxXQUFXLHNCQUFzQjtBQUNqQztBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ087QUFDUDtBQUNBLGFBQWEsMkJBQTJCO0FBQ3hDO0FBQ0EsYUFBYSxtRUFBbUU7QUFDaEY7QUFDQTtBQUNBLGFBQWEsc0NBQXNDO0FBQ25EOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxlQUFlLG9CQUFvQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSwrREFBTTtBQUNWO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixZQUFZO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxtQkFBbUIsb0JBQW9CO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsK0RBQU07QUFDZDtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxHQUFHOztBQUVIO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYm1fMjAyNC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbWR4LWpzK21keEAzLjAuMS9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3V0aWwvZXN0cmVlLXV0aWwtc3BlY2lmaWVycy10by1kZWNsYXJhdGlvbnMuanM/YTdiMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2VzdHJlZS1qc3gnKS5Bc3NpZ25tZW50UHJvcGVydHl9IEFzc2lnbm1lbnRQcm9wZXJ0eVxuICogQHR5cGVkZWYge2ltcG9ydCgnZXN0cmVlLWpzeCcpLkV4cG9ydFNwZWNpZmllcn0gRXhwb3J0U3BlY2lmaWVyXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdlc3RyZWUtanN4JykuRXhwcmVzc2lvbn0gRXhwcmVzc2lvblxuICogQHR5cGVkZWYge2ltcG9ydCgnZXN0cmVlLWpzeCcpLklkZW50aWZpZXJ9IElkZW50aWZpZXJcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2VzdHJlZS1qc3gnKS5JbXBvcnREZWZhdWx0U3BlY2lmaWVyfSBJbXBvcnREZWZhdWx0U3BlY2lmaWVyXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdlc3RyZWUtanN4JykuSW1wb3J0TmFtZXNwYWNlU3BlY2lmaWVyfSBJbXBvcnROYW1lc3BhY2VTcGVjaWZpZXJcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2VzdHJlZS1qc3gnKS5JbXBvcnRTcGVjaWZpZXJ9IEltcG9ydFNwZWNpZmllclxuICogQHR5cGVkZWYge2ltcG9ydCgnZXN0cmVlLWpzeCcpLlZhcmlhYmxlRGVjbGFyYXRvcn0gVmFyaWFibGVEZWNsYXJhdG9yXG4gKi9cblxuaW1wb3J0IHtjcmVhdGV9IGZyb20gJy4vZXN0cmVlLXV0aWwtY3JlYXRlLmpzJ1xuXG4vKipcbiAqIEBwYXJhbSB7UmVhZG9ubHlBcnJheTxSZWFkb25seTxFeHBvcnRTcGVjaWZpZXI+IHwgUmVhZG9ubHk8SW1wb3J0RGVmYXVsdFNwZWNpZmllcj4gfCBSZWFkb25seTxJbXBvcnROYW1lc3BhY2VTcGVjaWZpZXI+IHwgUmVhZG9ubHk8SW1wb3J0U3BlY2lmaWVyPj59IHNwZWNpZmllcnNcbiAqICAgU3BlY2lmaWVycy5cbiAqIEBwYXJhbSB7UmVhZG9ubHk8RXhwcmVzc2lvbj59IGluaXRcbiAqICAgSW5pdGlhbGl6ZXIuXG4gKiBAcmV0dXJucyB7QXJyYXk8VmFyaWFibGVEZWNsYXJhdG9yPn1cbiAqICAgRGVjbGFyYXRpb25zLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc3BlY2lmaWVyc1RvRGVjbGFyYXRpb25zKHNwZWNpZmllcnMsIGluaXQpIHtcbiAgbGV0IGluZGV4ID0gLTFcbiAgLyoqIEB0eXBlIHtBcnJheTxWYXJpYWJsZURlY2xhcmF0b3I+fSAqL1xuICBjb25zdCBkZWNsYXJhdGlvbnMgPSBbXVxuICAvKiogQHR5cGUge0FycmF5PEV4cG9ydFNwZWNpZmllciB8IEltcG9ydERlZmF1bHRTcGVjaWZpZXIgfCBJbXBvcnRTcGVjaWZpZXI+fSAqL1xuICBjb25zdCBvdGhlclNwZWNpZmllcnMgPSBbXVxuICAvLyBDYW4gb25seSBiZSBvbmUgYWNjb3JkaW5nIHRvIEpTIHN5bnRheC5cbiAgLyoqIEB0eXBlIHtJbXBvcnROYW1lc3BhY2VTcGVjaWZpZXIgfCB1bmRlZmluZWR9ICovXG4gIGxldCBpbXBvcnROYW1lc3BhY2VTcGVjaWZpZXJcblxuICB3aGlsZSAoKytpbmRleCA8IHNwZWNpZmllcnMubGVuZ3RoKSB7XG4gICAgY29uc3Qgc3BlY2lmaWVyID0gc3BlY2lmaWVyc1tpbmRleF1cblxuICAgIGlmIChzcGVjaWZpZXIudHlwZSA9PT0gJ0ltcG9ydE5hbWVzcGFjZVNwZWNpZmllcicpIHtcbiAgICAgIGltcG9ydE5hbWVzcGFjZVNwZWNpZmllciA9IHNwZWNpZmllclxuICAgIH0gZWxzZSB7XG4gICAgICBvdGhlclNwZWNpZmllcnMucHVzaChzcGVjaWZpZXIpXG4gICAgfVxuICB9XG5cbiAgaWYgKGltcG9ydE5hbWVzcGFjZVNwZWNpZmllcikge1xuICAgIC8qKiBAdHlwZSB7VmFyaWFibGVEZWNsYXJhdG9yfSAqL1xuICAgIGNvbnN0IGRlY2xhcmF0b3IgPSB7XG4gICAgICB0eXBlOiAnVmFyaWFibGVEZWNsYXJhdG9yJyxcbiAgICAgIGlkOiBpbXBvcnROYW1lc3BhY2VTcGVjaWZpZXIubG9jYWwsXG4gICAgICBpbml0XG4gICAgfVxuICAgIGNyZWF0ZShpbXBvcnROYW1lc3BhY2VTcGVjaWZpZXIsIGRlY2xhcmF0b3IpXG4gICAgZGVjbGFyYXRpb25zLnB1c2goZGVjbGFyYXRvcilcbiAgfVxuXG4gIGRlY2xhcmF0aW9ucy5wdXNoKHtcbiAgICB0eXBlOiAnVmFyaWFibGVEZWNsYXJhdG9yJyxcbiAgICBpZDoge1xuICAgICAgdHlwZTogJ09iamVjdFBhdHRlcm4nLFxuICAgICAgcHJvcGVydGllczogb3RoZXJTcGVjaWZpZXJzLm1hcChmdW5jdGlvbiAoc3BlY2lmaWVyKSB7XG4gICAgICAgIC8qKiBAdHlwZSB7SWRlbnRpZmllcn0gKi9cbiAgICAgICAgbGV0IGtleSA9XG4gICAgICAgICAgc3BlY2lmaWVyLnR5cGUgPT09ICdJbXBvcnRTcGVjaWZpZXInXG4gICAgICAgICAgICA/IHNwZWNpZmllci5pbXBvcnRlZFxuICAgICAgICAgICAgOiBzcGVjaWZpZXIudHlwZSA9PT0gJ0V4cG9ydFNwZWNpZmllcidcbiAgICAgICAgICAgICAgPyBzcGVjaWZpZXIuZXhwb3J0ZWRcbiAgICAgICAgICAgICAgOiB7dHlwZTogJ0lkZW50aWZpZXInLCBuYW1lOiAnZGVmYXVsdCd9XG4gICAgICAgIGxldCB2YWx1ZSA9IHNwZWNpZmllci5sb2NhbFxuXG4gICAgICAgIC8vIFN3aXRjaCB0aGVtIGFyb3VuZCBpZiB3ZeKAmXJlIGV4cG9ydGluZy5cbiAgICAgICAgaWYgKHNwZWNpZmllci50eXBlID09PSAnRXhwb3J0U3BlY2lmaWVyJykge1xuICAgICAgICAgIHZhbHVlID0ga2V5XG4gICAgICAgICAga2V5ID0gc3BlY2lmaWVyLmxvY2FsXG4gICAgICAgIH1cblxuICAgICAgICAvKiogQHR5cGUge0Fzc2lnbm1lbnRQcm9wZXJ0eX0gKi9cbiAgICAgICAgY29uc3QgcHJvcGVydHkgPSB7XG4gICAgICAgICAgdHlwZTogJ1Byb3BlcnR5JyxcbiAgICAgICAgICBraW5kOiAnaW5pdCcsXG4gICAgICAgICAgc2hvcnRoYW5kOiBrZXkubmFtZSA9PT0gdmFsdWUubmFtZSxcbiAgICAgICAgICBtZXRob2Q6IGZhbHNlLFxuICAgICAgICAgIGNvbXB1dGVkOiBmYWxzZSxcbiAgICAgICAgICBrZXksXG4gICAgICAgICAgdmFsdWVcbiAgICAgICAgfVxuICAgICAgICBjcmVhdGUoc3BlY2lmaWVyLCBwcm9wZXJ0eSlcbiAgICAgICAgcmV0dXJuIHByb3BlcnR5XG4gICAgICB9KVxuICAgIH0sXG4gICAgaW5pdDogaW1wb3J0TmFtZXNwYWNlU3BlY2lmaWVyXG4gICAgICA/IHt0eXBlOiAnSWRlbnRpZmllcicsIG5hbWU6IGltcG9ydE5hbWVzcGFjZVNwZWNpZmllci5sb2NhbC5uYW1lfVxuICAgICAgOiBpbml0XG4gIH0pXG5cbiAgcmV0dXJuIGRlY2xhcmF0aW9uc1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-specifiers-to-declarations.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-to-binary-addition.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-to-binary-addition.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toBinaryAddition: () => (/* binding */ toBinaryAddition)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(ssr)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/**\n * @typedef {import('estree-jsx').Expression} Expression\n */\n\n\n\n/**\n * @param {ReadonlyArray<Expression>} expressions\n *   Expressions.\n * @returns {Expression}\n *   Addition.\n */\nfunction toBinaryAddition(expressions) {\n  let index = -1\n  /** @type {Expression | undefined} */\n  let left\n\n  while (++index < expressions.length) {\n    const right = expressions[index]\n    left = left ? {type: 'BinaryExpression', left, operator: '+', right} : right\n  }\n\n  (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(left, 'expected non-empty `expressions` to be passed')\n  return left\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1keC1qcyttZHhAMy4wLjEvbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi91dGlsL2VzdHJlZS11dGlsLXRvLWJpbmFyeS1hZGRpdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0EsYUFBYSxpQ0FBaUM7QUFDOUM7O0FBRW1DOztBQUVuQztBQUNBLFdBQVcsMkJBQTJCO0FBQ3RDO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDTztBQUNQO0FBQ0EsYUFBYSx3QkFBd0I7QUFDckM7O0FBRUE7QUFDQTtBQUNBLG1CQUFtQixzREFBc0Q7QUFDekU7O0FBRUEsRUFBRSwwQ0FBTTtBQUNSO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYm1fMjAyNC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbWR4LWpzK21keEAzLjAuMS9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3V0aWwvZXN0cmVlLXV0aWwtdG8tYmluYXJ5LWFkZGl0aW9uLmpzP2ZiOTUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdlc3RyZWUtanN4JykuRXhwcmVzc2lvbn0gRXhwcmVzc2lvblxuICovXG5cbmltcG9ydCB7b2sgYXMgYXNzZXJ0fSBmcm9tICdkZXZsb3AnXG5cbi8qKlxuICogQHBhcmFtIHtSZWFkb25seUFycmF5PEV4cHJlc3Npb24+fSBleHByZXNzaW9uc1xuICogICBFeHByZXNzaW9ucy5cbiAqIEByZXR1cm5zIHtFeHByZXNzaW9ufVxuICogICBBZGRpdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvQmluYXJ5QWRkaXRpb24oZXhwcmVzc2lvbnMpIHtcbiAgbGV0IGluZGV4ID0gLTFcbiAgLyoqIEB0eXBlIHtFeHByZXNzaW9uIHwgdW5kZWZpbmVkfSAqL1xuICBsZXQgbGVmdFxuXG4gIHdoaWxlICgrK2luZGV4IDwgZXhwcmVzc2lvbnMubGVuZ3RoKSB7XG4gICAgY29uc3QgcmlnaHQgPSBleHByZXNzaW9uc1tpbmRleF1cbiAgICBsZWZ0ID0gbGVmdCA/IHt0eXBlOiAnQmluYXJ5RXhwcmVzc2lvbicsIGxlZnQsIG9wZXJhdG9yOiAnKycsIHJpZ2h0fSA6IHJpZ2h0XG4gIH1cblxuICBhc3NlcnQobGVmdCwgJ2V4cGVjdGVkIG5vbi1lbXB0eSBgZXhwcmVzc2lvbnNgIHRvIGJlIHBhc3NlZCcpXG4gIHJldHVybiBsZWZ0XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-to-binary-addition.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-to-id-or-member-expression.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-to-id-or-member-expression.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toIdOrMemberExpression: () => (/* binding */ toIdOrMemberExpression),\n/* harmony export */   toJsxIdOrMemberExpression: () => (/* binding */ toJsxIdOrMemberExpression)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! devlop */ \"(ssr)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! estree-util-is-identifier-name */ \"(ssr)/./node_modules/.pnpm/estree-util-is-identifier-name@3.0.0/node_modules/estree-util-is-identifier-name/lib/index.js\");\n/**\n * @typedef {import('estree-jsx').Identifier} Identifier\n * @typedef {import('estree-jsx').JSXIdentifier} JSXIdentifier\n * @typedef {import('estree-jsx').JSXMemberExpression} JSXMemberExpression\n * @typedef {import('estree-jsx').Literal} Literal\n * @typedef {import('estree-jsx').MemberExpression} MemberExpression\n */\n\n\n\n\n/**\n * @param {ReadonlyArray<number | string>} ids\n *   Identifiers (example: `['list', 0]).\n * @returns {Identifier | MemberExpression}\n *   Identifier or member expression.\n */\nfunction toIdOrMemberExpression(ids) {\n  let index = -1\n  /** @type {Identifier | Literal | MemberExpression | undefined} */\n  let object\n\n  while (++index < ids.length) {\n    const name = ids[index]\n    /** @type {Identifier | Literal} */\n    const id =\n      typeof name === 'string' && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_0__.name)(name)\n        ? {type: 'Identifier', name}\n        : {type: 'Literal', value: name}\n    object = object\n      ? {\n          type: 'MemberExpression',\n          object,\n          property: id,\n          computed: id.type === 'Literal',\n          optional: false\n        }\n      : id\n  }\n\n  (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(object, 'expected non-empty `ids` to be passed')\n  ;(0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(object.type !== 'Literal', 'expected identifier as left-most value')\n  return object\n}\n\n/**\n * @param {ReadonlyArray<number | string>} ids\n *   Identifiers (example: `['list', 0]).\n * @returns {JSXIdentifier | JSXMemberExpression}\n *   Identifier or member expression.\n */\nfunction toJsxIdOrMemberExpression(ids) {\n  let index = -1\n  /** @type {JSXIdentifier | JSXMemberExpression | undefined} */\n  let object\n\n  while (++index < ids.length) {\n    const name = ids[index]\n    ;(0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(\n      typeof name === 'string' && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_0__.name)(name, {jsx: true}),\n      'expected valid jsx identifier, not `' + name + '`'\n    )\n\n    /** @type {JSXIdentifier} */\n    const id = {type: 'JSXIdentifier', name}\n    object = object ? {type: 'JSXMemberExpression', object, property: id} : id\n  }\n\n  (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(object, 'expected non-empty `ids` to be passed')\n  return object\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1keC1qcyttZHhAMy4wLjEvbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi91dGlsL2VzdHJlZS11dGlsLXRvLWlkLW9yLW1lbWJlci1leHByZXNzaW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBLGFBQWEsaUNBQWlDO0FBQzlDLGFBQWEsb0NBQW9DO0FBQ2pELGFBQWEsMENBQTBDO0FBQ3ZELGFBQWEsOEJBQThCO0FBQzNDLGFBQWEsdUNBQXVDO0FBQ3BEOztBQUVtQztBQUNvQzs7QUFFdkU7QUFDQSxXQUFXLGdDQUFnQztBQUMzQztBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ087QUFDUDtBQUNBLGFBQWEscURBQXFEO0FBQ2xFOztBQUVBO0FBQ0E7QUFDQSxlQUFlLHNCQUFzQjtBQUNyQztBQUNBLGtDQUFrQyxvRUFBZ0I7QUFDbEQsV0FBVztBQUNYLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxFQUFFLDBDQUFNO0FBQ1IsRUFBRSwyQ0FBTTtBQUNSO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLGdDQUFnQztBQUMzQztBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ087QUFDUDtBQUNBLGFBQWEsaURBQWlEO0FBQzlEOztBQUVBO0FBQ0E7QUFDQSxJQUFJLDJDQUFNO0FBQ1Ysa0NBQWtDLG9FQUFnQixRQUFRLFVBQVU7QUFDcEU7QUFDQTs7QUFFQSxlQUFlLGVBQWU7QUFDOUIsZ0JBQWdCO0FBQ2hCLHVCQUF1QixtREFBbUQ7QUFDMUU7O0FBRUEsRUFBRSwwQ0FBTTtBQUNSO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYm1fMjAyNC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbWR4LWpzK21keEAzLjAuMS9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3V0aWwvZXN0cmVlLXV0aWwtdG8taWQtb3ItbWVtYmVyLWV4cHJlc3Npb24uanM/Nzg2MSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2VzdHJlZS1qc3gnKS5JZGVudGlmaWVyfSBJZGVudGlmaWVyXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdlc3RyZWUtanN4JykuSlNYSWRlbnRpZmllcn0gSlNYSWRlbnRpZmllclxuICogQHR5cGVkZWYge2ltcG9ydCgnZXN0cmVlLWpzeCcpLkpTWE1lbWJlckV4cHJlc3Npb259IEpTWE1lbWJlckV4cHJlc3Npb25cbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2VzdHJlZS1qc3gnKS5MaXRlcmFsfSBMaXRlcmFsXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdlc3RyZWUtanN4JykuTWVtYmVyRXhwcmVzc2lvbn0gTWVtYmVyRXhwcmVzc2lvblxuICovXG5cbmltcG9ydCB7b2sgYXMgYXNzZXJ0fSBmcm9tICdkZXZsb3AnXG5pbXBvcnQge25hbWUgYXMgaXNJZGVudGlmaWVyTmFtZX0gZnJvbSAnZXN0cmVlLXV0aWwtaXMtaWRlbnRpZmllci1uYW1lJ1xuXG4vKipcbiAqIEBwYXJhbSB7UmVhZG9ubHlBcnJheTxudW1iZXIgfCBzdHJpbmc+fSBpZHNcbiAqICAgSWRlbnRpZmllcnMgKGV4YW1wbGU6IGBbJ2xpc3QnLCAwXSkuXG4gKiBAcmV0dXJucyB7SWRlbnRpZmllciB8IE1lbWJlckV4cHJlc3Npb259XG4gKiAgIElkZW50aWZpZXIgb3IgbWVtYmVyIGV4cHJlc3Npb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b0lkT3JNZW1iZXJFeHByZXNzaW9uKGlkcykge1xuICBsZXQgaW5kZXggPSAtMVxuICAvKiogQHR5cGUge0lkZW50aWZpZXIgfCBMaXRlcmFsIHwgTWVtYmVyRXhwcmVzc2lvbiB8IHVuZGVmaW5lZH0gKi9cbiAgbGV0IG9iamVjdFxuXG4gIHdoaWxlICgrK2luZGV4IDwgaWRzLmxlbmd0aCkge1xuICAgIGNvbnN0IG5hbWUgPSBpZHNbaW5kZXhdXG4gICAgLyoqIEB0eXBlIHtJZGVudGlmaWVyIHwgTGl0ZXJhbH0gKi9cbiAgICBjb25zdCBpZCA9XG4gICAgICB0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycgJiYgaXNJZGVudGlmaWVyTmFtZShuYW1lKVxuICAgICAgICA/IHt0eXBlOiAnSWRlbnRpZmllcicsIG5hbWV9XG4gICAgICAgIDoge3R5cGU6ICdMaXRlcmFsJywgdmFsdWU6IG5hbWV9XG4gICAgb2JqZWN0ID0gb2JqZWN0XG4gICAgICA/IHtcbiAgICAgICAgICB0eXBlOiAnTWVtYmVyRXhwcmVzc2lvbicsXG4gICAgICAgICAgb2JqZWN0LFxuICAgICAgICAgIHByb3BlcnR5OiBpZCxcbiAgICAgICAgICBjb21wdXRlZDogaWQudHlwZSA9PT0gJ0xpdGVyYWwnLFxuICAgICAgICAgIG9wdGlvbmFsOiBmYWxzZVxuICAgICAgICB9XG4gICAgICA6IGlkXG4gIH1cblxuICBhc3NlcnQob2JqZWN0LCAnZXhwZWN0ZWQgbm9uLWVtcHR5IGBpZHNgIHRvIGJlIHBhc3NlZCcpXG4gIGFzc2VydChvYmplY3QudHlwZSAhPT0gJ0xpdGVyYWwnLCAnZXhwZWN0ZWQgaWRlbnRpZmllciBhcyBsZWZ0LW1vc3QgdmFsdWUnKVxuICByZXR1cm4gb2JqZWN0XG59XG5cbi8qKlxuICogQHBhcmFtIHtSZWFkb25seUFycmF5PG51bWJlciB8IHN0cmluZz59IGlkc1xuICogICBJZGVudGlmaWVycyAoZXhhbXBsZTogYFsnbGlzdCcsIDBdKS5cbiAqIEByZXR1cm5zIHtKU1hJZGVudGlmaWVyIHwgSlNYTWVtYmVyRXhwcmVzc2lvbn1cbiAqICAgSWRlbnRpZmllciBvciBtZW1iZXIgZXhwcmVzc2lvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvSnN4SWRPck1lbWJlckV4cHJlc3Npb24oaWRzKSB7XG4gIGxldCBpbmRleCA9IC0xXG4gIC8qKiBAdHlwZSB7SlNYSWRlbnRpZmllciB8IEpTWE1lbWJlckV4cHJlc3Npb24gfCB1bmRlZmluZWR9ICovXG4gIGxldCBvYmplY3RcblxuICB3aGlsZSAoKytpbmRleCA8IGlkcy5sZW5ndGgpIHtcbiAgICBjb25zdCBuYW1lID0gaWRzW2luZGV4XVxuICAgIGFzc2VydChcbiAgICAgIHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJyAmJiBpc0lkZW50aWZpZXJOYW1lKG5hbWUsIHtqc3g6IHRydWV9KSxcbiAgICAgICdleHBlY3RlZCB2YWxpZCBqc3ggaWRlbnRpZmllciwgbm90IGAnICsgbmFtZSArICdgJ1xuICAgIClcblxuICAgIC8qKiBAdHlwZSB7SlNYSWRlbnRpZmllcn0gKi9cbiAgICBjb25zdCBpZCA9IHt0eXBlOiAnSlNYSWRlbnRpZmllcicsIG5hbWV9XG4gICAgb2JqZWN0ID0gb2JqZWN0ID8ge3R5cGU6ICdKU1hNZW1iZXJFeHByZXNzaW9uJywgb2JqZWN0LCBwcm9wZXJ0eTogaWR9IDogaWRcbiAgfVxuXG4gIGFzc2VydChvYmplY3QsICdleHBlY3RlZCBub24tZW1wdHkgYGlkc2AgdG8gYmUgcGFzc2VkJylcbiAgcmV0dXJuIG9iamVjdFxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-to-id-or-member-expression.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/extnames.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/extnames.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   md: () => (/* binding */ md),\n/* harmony export */   mdx: () => (/* binding */ mdx)\n/* harmony export */ });\n/* harmony import */ var markdown_extensions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! markdown-extensions */ \"(ssr)/./node_modules/.pnpm/markdown-extensions@2.0.0/node_modules/markdown-extensions/index.js\");\n\n\nconst md = markdown_extensions__WEBPACK_IMPORTED_MODULE_0__[\"default\"].map(function (d) {\n  return '.' + d\n})\nconst mdx = ['.mdx']\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1keC1qcyttZHhAMy4wLjEvbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi91dGlsL2V4dG5hbWVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFvRDs7QUFFN0MsV0FBVywyREFBa0I7QUFDcEM7QUFDQSxDQUFDO0FBQ00iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYm1fMjAyNC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbWR4LWpzK21keEAzLjAuMS9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3V0aWwvZXh0bmFtZXMuanM/NjFhMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbWFya2Rvd25FeHRlbnNpb25zIGZyb20gJ21hcmtkb3duLWV4dGVuc2lvbnMnXG5cbmV4cG9ydCBjb25zdCBtZCA9IG1hcmtkb3duRXh0ZW5zaW9ucy5tYXAoZnVuY3Rpb24gKGQpIHtcbiAgcmV0dXJuICcuJyArIGRcbn0pXG5leHBvcnQgY29uc3QgbWR4ID0gWycubWR4J11cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/extnames.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/resolve-file-and-options.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/resolve-file-and-options.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   resolveFileAndOptions: () => (/* binding */ resolveFileAndOptions)\n/* harmony export */ });\n/* harmony import */ var vfile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vfile */ \"(ssr)/./node_modules/.pnpm/vfile@6.0.2/node_modules/vfile/lib/index.js\");\n/* harmony import */ var _extnames_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./extnames.js */ \"(ssr)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/extnames.js\");\n/**\n * @typedef {import('vfile').Compatible} Compatible\n * @typedef {import('../compile.js').CompileOptions} CompileOptions\n * @typedef {import('../core.js').ProcessorOptions} ProcessorOptions\n */\n\n\n\n\n/**\n * Create a file and options from a given `vfileCompatible` and options that\n * might contain `format: 'detect'`.\n *\n * @param {Readonly<Compatible>} vfileCompatible\n *   File.\n * @param {Readonly<CompileOptions> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {{file: VFile, options: ProcessorOptions}}\n *   File and options.\n */\nfunction resolveFileAndOptions(vfileCompatible, options) {\n  const file = looksLikeAVFile(vfileCompatible)\n    ? vfileCompatible\n    : new vfile__WEBPACK_IMPORTED_MODULE_0__.VFile(vfileCompatible)\n  const {format, ...rest} = options || {}\n  return {\n    file,\n    options: {\n      format:\n        format === 'md' || format === 'mdx'\n          ? format\n          : file.extname && (rest.mdExtensions || _extnames_js__WEBPACK_IMPORTED_MODULE_1__.md).includes(file.extname)\n            ? 'md'\n            : 'mdx',\n      ...rest\n    }\n  }\n}\n\n/**\n * @param {Readonly<Compatible> | null | undefined} [value]\n *   Thing.\n * @returns {value is VFile}\n *   Check.\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1keC1qcyttZHhAMy4wLjEvbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi91dGlsL3Jlc29sdmUtZmlsZS1hbmQtb3B0aW9ucy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBLGFBQWEsNEJBQTRCO0FBQ3pDLGFBQWEsd0NBQXdDO0FBQ3JELGFBQWEsdUNBQXVDO0FBQ3BEOztBQUUyQjtBQUNLOztBQUVoQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsc0JBQXNCO0FBQ2pDO0FBQ0EsV0FBVyw2Q0FBNkM7QUFDeEQ7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBLFVBQVUsd0NBQUs7QUFDZixTQUFTLGlCQUFpQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0QsNENBQUU7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsV0FBVyx5Q0FBeUM7QUFDcEQ7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYm1fMjAyNC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbWR4LWpzK21keEAzLjAuMS9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3V0aWwvcmVzb2x2ZS1maWxlLWFuZC1vcHRpb25zLmpzPzQzZDIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCd2ZmlsZScpLkNvbXBhdGlibGV9IENvbXBhdGlibGVcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL2NvbXBpbGUuanMnKS5Db21waWxlT3B0aW9uc30gQ29tcGlsZU9wdGlvbnNcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL2NvcmUuanMnKS5Qcm9jZXNzb3JPcHRpb25zfSBQcm9jZXNzb3JPcHRpb25zXG4gKi9cblxuaW1wb3J0IHtWRmlsZX0gZnJvbSAndmZpbGUnXG5pbXBvcnQge21kfSBmcm9tICcuL2V4dG5hbWVzLmpzJ1xuXG4vKipcbiAqIENyZWF0ZSBhIGZpbGUgYW5kIG9wdGlvbnMgZnJvbSBhIGdpdmVuIGB2ZmlsZUNvbXBhdGlibGVgIGFuZCBvcHRpb25zIHRoYXRcbiAqIG1pZ2h0IGNvbnRhaW4gYGZvcm1hdDogJ2RldGVjdCdgLlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8Q29tcGF0aWJsZT59IHZmaWxlQ29tcGF0aWJsZVxuICogICBGaWxlLlxuICogQHBhcmFtIHtSZWFkb25seTxDb21waWxlT3B0aW9ucz4gfCBudWxsIHwgdW5kZWZpbmVkfSBbb3B0aW9uc11cbiAqICAgQ29uZmlndXJhdGlvbiAob3B0aW9uYWwpLlxuICogQHJldHVybnMge3tmaWxlOiBWRmlsZSwgb3B0aW9uczogUHJvY2Vzc29yT3B0aW9uc319XG4gKiAgIEZpbGUgYW5kIG9wdGlvbnMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlRmlsZUFuZE9wdGlvbnModmZpbGVDb21wYXRpYmxlLCBvcHRpb25zKSB7XG4gIGNvbnN0IGZpbGUgPSBsb29rc0xpa2VBVkZpbGUodmZpbGVDb21wYXRpYmxlKVxuICAgID8gdmZpbGVDb21wYXRpYmxlXG4gICAgOiBuZXcgVkZpbGUodmZpbGVDb21wYXRpYmxlKVxuICBjb25zdCB7Zm9ybWF0LCAuLi5yZXN0fSA9IG9wdGlvbnMgfHwge31cbiAgcmV0dXJuIHtcbiAgICBmaWxlLFxuICAgIG9wdGlvbnM6IHtcbiAgICAgIGZvcm1hdDpcbiAgICAgICAgZm9ybWF0ID09PSAnbWQnIHx8IGZvcm1hdCA9PT0gJ21keCdcbiAgICAgICAgICA/IGZvcm1hdFxuICAgICAgICAgIDogZmlsZS5leHRuYW1lICYmIChyZXN0Lm1kRXh0ZW5zaW9ucyB8fCBtZCkuaW5jbHVkZXMoZmlsZS5leHRuYW1lKVxuICAgICAgICAgICAgPyAnbWQnXG4gICAgICAgICAgICA6ICdtZHgnLFxuICAgICAgLi4ucmVzdFxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7UmVhZG9ubHk8Q29tcGF0aWJsZT4gfCBudWxsIHwgdW5kZWZpbmVkfSBbdmFsdWVdXG4gKiAgIFRoaW5nLlxuICogQHJldHVybnMge3ZhbHVlIGlzIFZGaWxlfVxuICogICBDaGVjay5cbiAqL1xuZnVuY3Rpb24gbG9va3NMaWtlQVZGaWxlKHZhbHVlKSB7XG4gIHJldHVybiBCb29sZWFuKFxuICAgIHZhbHVlICYmXG4gICAgICB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmXG4gICAgICAnbWVzc2FnZScgaW4gdmFsdWUgJiZcbiAgICAgICdtZXNzYWdlcycgaW4gdmFsdWVcbiAgKVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/resolve-file-and-options.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/compile.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/compile.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compile: () => (/* binding */ compile),\n/* harmony export */   compileSync: () => (/* binding */ compileSync)\n/* harmony export */ });\n/* harmony import */ var _util_resolve_file_and_options_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/resolve-file-and-options.js */ \"(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/resolve-file-and-options.js\");\n/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./core.js */ \"(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/core.js\");\n/**\n * @typedef {import('vfile').VFile} VFile\n * @typedef {import('vfile').Compatible} Compatible\n * @typedef {import('./core.js').ProcessorOptions} ProcessorOptions\n */\n\n/**\n * @typedef {Omit<ProcessorOptions, 'format'>} CoreProcessorOptions\n *   Core configuration.\n *\n * @typedef ExtraOptions\n *   Extra configuration.\n * @property {'detect' | 'md' | 'mdx' | null | undefined} [format='detect']\n *   Format of `file` (default: `'detect'`).\n *\n * @typedef {CoreProcessorOptions & ExtraOptions} CompileOptions\n *   Configuration for `compile`.\n *\n *   `CompileOptions` is the same as `ProcessorOptions` with the exception that\n *   the `format` option supports a `'detect'` value, which is the default.\n *   The `'detect'` format means to use `'md'` for files with an extension in\n *   `mdExtensions` and `'mdx'` otherwise.\n */\n\n\n\n\n/**\n * Compile MDX to JS.\n *\n * @param {Readonly<Compatible>} vfileCompatible\n *   MDX document to parse.\n * @param {Readonly<CompileOptions> | null | undefined} [compileOptions]\n *   Compile configuration (optional).\n * @return {Promise<VFile>}\n *   Promise to compiled file.\n */\nfunction compile(vfileCompatible, compileOptions) {\n  const {file, options} = (0,_util_resolve_file_and_options_js__WEBPACK_IMPORTED_MODULE_0__.resolveFileAndOptions)(vfileCompatible, compileOptions)\n  return (0,_core_js__WEBPACK_IMPORTED_MODULE_1__.createProcessor)(options).process(file)\n}\n\n/**\n * Synchronously compile MDX to JS.\n *\n * When possible please use the async `compile`.\n *\n * @param {Readonly<Compatible>} vfileCompatible\n *   MDX document to parse.\n * @param {Readonly<CompileOptions> | null | undefined} [compileOptions]\n *   Compile configuration (optional).\n * @return {VFile}\n *   Compiled file.\n */\nfunction compileSync(vfileCompatible, compileOptions) {\n  const {file, options} = (0,_util_resolve_file_and_options_js__WEBPACK_IMPORTED_MODULE_0__.resolveFileAndOptions)(vfileCompatible, compileOptions)\n  return (0,_core_js__WEBPACK_IMPORTED_MODULE_1__.createProcessor)(options).processSync(file)\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1keC1qcyttZHhAMy4wLjEvbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi9jb21waWxlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBLGFBQWEsdUJBQXVCO0FBQ3BDLGFBQWEsNEJBQTRCO0FBQ3pDLGFBQWEsc0NBQXNDO0FBQ25EOztBQUVBO0FBQ0EsYUFBYSxrQ0FBa0M7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLDRDQUE0QztBQUMxRDtBQUNBO0FBQ0EsYUFBYSxxQ0FBcUM7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRXdFO0FBQy9COztBQUV6QztBQUNBO0FBQ0E7QUFDQSxXQUFXLHNCQUFzQjtBQUNqQztBQUNBLFdBQVcsNkNBQTZDO0FBQ3hEO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDTztBQUNQLFNBQVMsZUFBZSxFQUFFLHdGQUFxQjtBQUMvQyxTQUFTLHlEQUFlO0FBQ3hCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHNCQUFzQjtBQUNqQztBQUNBLFdBQVcsNkNBQTZDO0FBQ3hEO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDTztBQUNQLFNBQVMsZUFBZSxFQUFFLHdGQUFxQjtBQUMvQyxTQUFTLHlEQUFlO0FBQ3hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2JtXzIwMjQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1keC1qcyttZHhAMy4wLjEvbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi9jb21waWxlLmpzPzYzNDYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCd2ZmlsZScpLlZGaWxlfSBWRmlsZVxuICogQHR5cGVkZWYge2ltcG9ydCgndmZpbGUnKS5Db21wYXRpYmxlfSBDb21wYXRpYmxlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuL2NvcmUuanMnKS5Qcm9jZXNzb3JPcHRpb25zfSBQcm9jZXNzb3JPcHRpb25zXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7T21pdDxQcm9jZXNzb3JPcHRpb25zLCAnZm9ybWF0Jz59IENvcmVQcm9jZXNzb3JPcHRpb25zXG4gKiAgIENvcmUgY29uZmlndXJhdGlvbi5cbiAqXG4gKiBAdHlwZWRlZiBFeHRyYU9wdGlvbnNcbiAqICAgRXh0cmEgY29uZmlndXJhdGlvbi5cbiAqIEBwcm9wZXJ0eSB7J2RldGVjdCcgfCAnbWQnIHwgJ21keCcgfCBudWxsIHwgdW5kZWZpbmVkfSBbZm9ybWF0PSdkZXRlY3QnXVxuICogICBGb3JtYXQgb2YgYGZpbGVgIChkZWZhdWx0OiBgJ2RldGVjdCdgKS5cbiAqXG4gKiBAdHlwZWRlZiB7Q29yZVByb2Nlc3Nvck9wdGlvbnMgJiBFeHRyYU9wdGlvbnN9IENvbXBpbGVPcHRpb25zXG4gKiAgIENvbmZpZ3VyYXRpb24gZm9yIGBjb21waWxlYC5cbiAqXG4gKiAgIGBDb21waWxlT3B0aW9uc2AgaXMgdGhlIHNhbWUgYXMgYFByb2Nlc3Nvck9wdGlvbnNgIHdpdGggdGhlIGV4Y2VwdGlvbiB0aGF0XG4gKiAgIHRoZSBgZm9ybWF0YCBvcHRpb24gc3VwcG9ydHMgYSBgJ2RldGVjdCdgIHZhbHVlLCB3aGljaCBpcyB0aGUgZGVmYXVsdC5cbiAqICAgVGhlIGAnZGV0ZWN0J2AgZm9ybWF0IG1lYW5zIHRvIHVzZSBgJ21kJ2AgZm9yIGZpbGVzIHdpdGggYW4gZXh0ZW5zaW9uIGluXG4gKiAgIGBtZEV4dGVuc2lvbnNgIGFuZCBgJ21keCdgIG90aGVyd2lzZS5cbiAqL1xuXG5pbXBvcnQge3Jlc29sdmVGaWxlQW5kT3B0aW9uc30gZnJvbSAnLi91dGlsL3Jlc29sdmUtZmlsZS1hbmQtb3B0aW9ucy5qcydcbmltcG9ydCB7Y3JlYXRlUHJvY2Vzc29yfSBmcm9tICcuL2NvcmUuanMnXG5cbi8qKlxuICogQ29tcGlsZSBNRFggdG8gSlMuXG4gKlxuICogQHBhcmFtIHtSZWFkb25seTxDb21wYXRpYmxlPn0gdmZpbGVDb21wYXRpYmxlXG4gKiAgIE1EWCBkb2N1bWVudCB0byBwYXJzZS5cbiAqIEBwYXJhbSB7UmVhZG9ubHk8Q29tcGlsZU9wdGlvbnM+IHwgbnVsbCB8IHVuZGVmaW5lZH0gW2NvbXBpbGVPcHRpb25zXVxuICogICBDb21waWxlIGNvbmZpZ3VyYXRpb24gKG9wdGlvbmFsKS5cbiAqIEByZXR1cm4ge1Byb21pc2U8VkZpbGU+fVxuICogICBQcm9taXNlIHRvIGNvbXBpbGVkIGZpbGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21waWxlKHZmaWxlQ29tcGF0aWJsZSwgY29tcGlsZU9wdGlvbnMpIHtcbiAgY29uc3Qge2ZpbGUsIG9wdGlvbnN9ID0gcmVzb2x2ZUZpbGVBbmRPcHRpb25zKHZmaWxlQ29tcGF0aWJsZSwgY29tcGlsZU9wdGlvbnMpXG4gIHJldHVybiBjcmVhdGVQcm9jZXNzb3Iob3B0aW9ucykucHJvY2VzcyhmaWxlKVxufVxuXG4vKipcbiAqIFN5bmNocm9ub3VzbHkgY29tcGlsZSBNRFggdG8gSlMuXG4gKlxuICogV2hlbiBwb3NzaWJsZSBwbGVhc2UgdXNlIHRoZSBhc3luYyBgY29tcGlsZWAuXG4gKlxuICogQHBhcmFtIHtSZWFkb25seTxDb21wYXRpYmxlPn0gdmZpbGVDb21wYXRpYmxlXG4gKiAgIE1EWCBkb2N1bWVudCB0byBwYXJzZS5cbiAqIEBwYXJhbSB7UmVhZG9ubHk8Q29tcGlsZU9wdGlvbnM+IHwgbnVsbCB8IHVuZGVmaW5lZH0gW2NvbXBpbGVPcHRpb25zXVxuICogICBDb21waWxlIGNvbmZpZ3VyYXRpb24gKG9wdGlvbmFsKS5cbiAqIEByZXR1cm4ge1ZGaWxlfVxuICogICBDb21waWxlZCBmaWxlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tcGlsZVN5bmModmZpbGVDb21wYXRpYmxlLCBjb21waWxlT3B0aW9ucykge1xuICBjb25zdCB7ZmlsZSwgb3B0aW9uc30gPSByZXNvbHZlRmlsZUFuZE9wdGlvbnModmZpbGVDb21wYXRpYmxlLCBjb21waWxlT3B0aW9ucylcbiAgcmV0dXJuIGNyZWF0ZVByb2Nlc3NvcihvcHRpb25zKS5wcm9jZXNzU3luYyhmaWxlKVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/compile.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/core.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/core.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createProcessor: () => (/* binding */ createProcessor)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(rsc)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var remark_mdx__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! remark-mdx */ \"(rsc)/./node_modules/.pnpm/remark-mdx@3.0.1/node_modules/remark-mdx/lib/index.js\");\n/* harmony import */ var remark_parse__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! remark-parse */ \"(rsc)/./node_modules/.pnpm/remark-parse@11.0.0/node_modules/remark-parse/lib/index.js\");\n/* harmony import */ var remark_rehype__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! remark-rehype */ \"(rsc)/./node_modules/.pnpm/remark-rehype@11.1.0/node_modules/remark-rehype/lib/index.js\");\n/* harmony import */ var unified__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! unified */ \"(rsc)/./node_modules/.pnpm/unified@11.0.5/node_modules/unified/lib/index.js\");\n/* harmony import */ var _plugin_recma_document_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./plugin/recma-document.js */ \"(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/recma-document.js\");\n/* harmony import */ var _plugin_recma_jsx_build_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./plugin/recma-jsx-build.js */ \"(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/recma-jsx-build.js\");\n/* harmony import */ var _plugin_recma_jsx_rewrite_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./plugin/recma-jsx-rewrite.js */ \"(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/recma-jsx-rewrite.js\");\n/* harmony import */ var _plugin_recma_stringify_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./plugin/recma-stringify.js */ \"(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/recma-stringify.js\");\n/* harmony import */ var _plugin_rehype_recma_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./plugin/rehype-recma.js */ \"(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/rehype-recma.js\");\n/* harmony import */ var _plugin_rehype_remove_raw_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./plugin/rehype-remove-raw.js */ \"(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/rehype-remove-raw.js\");\n/* harmony import */ var _plugin_remark_mark_and_unravel_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./plugin/remark-mark-and-unravel.js */ \"(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/remark-mark-and-unravel.js\");\n/* harmony import */ var _node_types_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./node-types.js */ \"(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/node-types.js\");\n/**\n * @typedef {import('estree-jsx').Program} Program\n * @typedef {import('hast-util-to-estree').ElementAttributeNameCase} ElementAttributeNameCase\n * @typedef {import('hast-util-to-estree').StylePropertyNameCase} StylePropertyNameCase\n * @typedef {import('mdast').Root} Root\n * @typedef {import('remark-rehype').Options} RemarkRehypeOptions\n * @typedef {typeof import('source-map').SourceMapGenerator} SourceMapGenerator\n * @typedef {import('unified').PluggableList} PluggableList\n * @typedef {import('unified').Processor<Root, Program, Program, Program, string>} Processor\n */\n\n/**\n * @typedef ProcessorOptions\n *   Configuration for `createProcessor`.\n * @property {SourceMapGenerator | null | undefined} [SourceMapGenerator]\n *   Add a source map (object form) as the `map` field on the resulting file\n *   (optional).\n * @property {URL | string | null | undefined} [baseUrl]\n *   Use this URL as `import.meta.url` and resolve `import` and `export … from`\n *   relative to it (optional, example: `import.meta.url`).\n * @property {boolean | null | undefined} [development=false]\n *   Whether to add extra info to error messages in generated code and use the\n *   development automatic JSX runtime (`Fragment` and `jsxDEV` from\n *   `/jsx-dev-runtime`) (default: `false`);\n *   when using the webpack loader (`@mdx-js/loader`) or the Rollup integration\n *   (`@mdx-js/rollup`) through Vite, this is automatically inferred from how\n *   you configure those tools.\n * @property {ElementAttributeNameCase | null | undefined} [elementAttributeNameCase='react']\n *   Casing to use for attribute names (default: `'react'`);\n *   HTML casing is for example `class`, `stroke-linecap`, `xml:lang`;\n *   React casing is for example `className`, `strokeLinecap`, `xmlLang`;\n *   for JSX components written in MDX, the author has to be aware of which\n *   framework they use and write code accordingly;\n *   for AST nodes generated by this project, this option configures it\n * @property {'md' | 'mdx' | null | undefined} [format='mdx']\n *   format of the file (default: `'mdx'`);\n *   `'md'` means treat as markdown and `'mdx'` means treat as MDX.\n * @property {boolean | null | undefined} [jsx=false]\n *   Whether to keep JSX (default: `false`);\n *   the default is to compile JSX away so that the resulting file is\n *   immediately runnable.\n * @property {string | null | undefined} [jsxImportSource='react']\n *   Place to import automatic JSX runtimes from (default: `'react'`);\n *   when in the `automatic` runtime, this is used to define an import for\n *   `Fragment`, `jsx`, `jsxDEV`, and `jsxs`.\n * @property {'automatic' | 'classic' | null | undefined} [jsxRuntime='automatic']\n *   JSX runtime to use (default: `'automatic'`);\n *   the automatic runtime compiles to `import _jsx from\n *   '$importSource/jsx-runtime'\\n_jsx('p')`;\n *   the classic runtime compiles to calls such as `h('p')`.\n *\n *   > 👉 **Note**: support for the classic runtime is deprecated and will\n *   > likely be removed in the next major version.\n * @property {ReadonlyArray<string> | null | undefined} [mdExtensions]\n *   List of markdown extensions, with dot (default: `['.md', '.markdown', …]`);\n *   affects integrations.\n * @property {ReadonlyArray<string> | null | undefined} [mdxExtensions]\n *   List of MDX extensions, with dot (default: `['.mdx']`);\n *   affects integrations.\n * @property {'function-body' | 'program' | null | undefined} [outputFormat='program']\n *   Output format to generate (default: `'program'`);\n *   in most cases `'program'` should be used, it results in a whole program;\n *   internally `evaluate` uses `'function-body'` to compile to\n *   code that can be passed to `run`;\n *   in some cases, you might want what `evaluate` does in separate steps, such\n *   as when compiling on the server and running on the client.\n * @property {string | null | undefined} [pragma='React.createElement']\n *   Pragma for JSX, used in the classic runtime as an identifier for function\n *   calls: `<x />` to `React.createElement('x')` (default:\n *   `'React.createElement'`);\n *   when changing this, you should also define `pragmaFrag` and\n *   `pragmaImportSource` too.\n *\n *   > 👉 **Note**: support for the classic runtime is deprecated and will\n *   > likely be removed in the next major version.\n * @property {string | null | undefined} [pragmaFrag='React.Fragment']\n *   Pragma for fragment symbol, used in the classic runtime as an identifier\n *   for unnamed calls: `<>` to `React.createElement(React.Fragment)` (default:\n *   `'React.Fragment'`);\n *   when changing this, you should also define `pragma` and\n *   `pragmaImportSource` too.\n *\n *   > 👉 **Note**: support for the classic runtime is deprecated and will\n *   > likely be removed in the next major version.\n * @property {string | null | undefined} [pragmaImportSource='react']\n *   Where to import the identifier of `pragma` from, used in the classic\n *   runtime (default: `'react'`);\n *   to illustrate, when `pragma` is `'a.b'` and `pragmaImportSource` is `'c'`\n *   the following will be generated: `import a from 'c'` and things such as\n *   `a.b('h1', {})`.\n *   when changing this, you should also define `pragma` and `pragmaFrag` too.\n *\n *   > 👉 **Note**: support for the classic runtime is deprecated and will\n *   > likely be removed in the next major version.\n * @property {string | null | undefined} [providerImportSource]\n *   Place to import a provider from (optional, example: `'@mdx-js/react'`);\n *   normally it’s used for runtimes that support context (React, Preact), but\n *   it can be used to inject components into the compiled code;\n *   the module must export and identifier `useMDXComponents` which is called\n *   without arguments to get an object of components (`MDXComponents` from\n *   `mdx/types.js`).\n * @property {PluggableList | null | undefined} [recmaPlugins]\n *   List of recma plugins (optional);\n *   this is a new ecosystem, currently in beta, to transform esast trees\n *   (JavaScript)\n * @property {PluggableList | null | undefined} [remarkPlugins]\n *   List of remark plugins (optional).\n * @property {PluggableList | null | undefined} [rehypePlugins]\n *   List of rehype plugins (optional).\n * @property {Readonly<RemarkRehypeOptions> | null | undefined} [remarkRehypeOptions]\n *   Options to pass through to `remark-rehype` (optional);\n *   the option `allowDangerousHtml` will always be set to `true` and the MDX\n *   nodes (see `nodeTypes`) are passed through;\n *   In particular, you might want to pass configuration for footnotes if your\n *   content is not in English.\n * @property {StylePropertyNameCase | null | undefined} [stylePropertyNameCase='dom']\n *   Casing to use for property names in `style` objects (default: `'dom'`);\n *   CSS casing is for example `background-color` and `-webkit-line-clamp`;\n *   DOM casing is for example `backgroundColor` and `WebkitLineClamp`;\n *   for JSX components written in MDX, the author has to be aware of which\n *   framework they use and write code accordingly;\n *   for AST nodes generated by this project, this option configures it\n * @property {boolean | null | undefined} [tableCellAlignToStyle=true]\n *   Turn obsolete `align` properties on `td` and `th` into CSS `style`\n *   properties (default: `true`).\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst removedOptions = [\n  'compilers',\n  'filepath',\n  'hastPlugins',\n  'mdPlugins',\n  'skipExport',\n  'wrapExport'\n]\n\nlet warned = false\n\n/**\n * Create a processor to compile markdown or MDX to JavaScript.\n *\n * > **Note**: `format: 'detect'` is not allowed in `ProcessorOptions`.\n *\n * @param {Readonly<ProcessorOptions> | null | undefined} [options]\n *   Configuration (optional).\n * @return {Processor}\n *   Processor.\n */\nfunction createProcessor(options) {\n  const settings = options || {}\n  let index = -1\n\n  while (++index < removedOptions.length) {\n    const key = removedOptions[index]\n    if (key in settings) {\n      (0,devlop__WEBPACK_IMPORTED_MODULE_0__.unreachable)(\n        'Unexpected removed option `' +\n          key +\n          '`; see <https://mdxjs.com/migrating/v2/> on how to migrate'\n      )\n    }\n  }\n\n  // @ts-expect-error: throw an error for a runtime value which is not allowed\n  // by the types.\n  if (settings.format === 'detect') {\n    (0,devlop__WEBPACK_IMPORTED_MODULE_0__.unreachable)(\n      \"Unexpected `format: 'detect'`, which is not supported by `createProcessor`, expected `'mdx'` or `'md'`\"\n    )\n  }\n\n  if (\n    (settings.jsxRuntime === 'classic' ||\n      settings.pragma ||\n      settings.pragmaFrag ||\n      settings.pragmaImportSource) &&\n    !warned\n  ) {\n    warned = true\n    console.warn(\n      \"Unexpected deprecated option `jsxRuntime: 'classic'`, `pragma`, `pragmaFrag`, or `pragmaImportSource`; see <https://mdxjs.com/migrating/v3/> on how to migrate\"\n    )\n  }\n\n  const pipeline = (0,unified__WEBPACK_IMPORTED_MODULE_1__.unified)().use(remark_parse__WEBPACK_IMPORTED_MODULE_2__[\"default\"])\n\n  if (settings.format !== 'md') {\n    pipeline.use(remark_mdx__WEBPACK_IMPORTED_MODULE_3__[\"default\"])\n  }\n\n  const remarkRehypeOptions = settings.remarkRehypeOptions || {}\n\n  pipeline\n    .use(_plugin_remark_mark_and_unravel_js__WEBPACK_IMPORTED_MODULE_4__.remarkMarkAndUnravel)\n    .use(settings.remarkPlugins || [])\n    .use(remark_rehype__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n      ...remarkRehypeOptions,\n      allowDangerousHtml: true,\n      passThrough: [...(remarkRehypeOptions.passThrough || []), ..._node_types_js__WEBPACK_IMPORTED_MODULE_6__.nodeTypes]\n    })\n    .use(settings.rehypePlugins || [])\n\n  if (settings.format === 'md') {\n    pipeline.use(_plugin_rehype_remove_raw_js__WEBPACK_IMPORTED_MODULE_7__.rehypeRemoveRaw)\n  }\n\n  pipeline\n    .use(_plugin_rehype_recma_js__WEBPACK_IMPORTED_MODULE_8__.rehypeRecma, settings)\n    .use(_plugin_recma_document_js__WEBPACK_IMPORTED_MODULE_9__.recmaDocument, settings)\n    .use(_plugin_recma_jsx_rewrite_js__WEBPACK_IMPORTED_MODULE_10__.recmaJsxRewrite, settings)\n\n  if (!settings.jsx) {\n    pipeline.use(_plugin_recma_jsx_build_js__WEBPACK_IMPORTED_MODULE_11__.recmaJsxBuild, settings)\n  }\n\n  pipeline.use(_plugin_recma_stringify_js__WEBPACK_IMPORTED_MODULE_12__.recmaStringify, settings).use(settings.recmaPlugins || [])\n\n  // @ts-expect-error: we added plugins with if-checks, which TS doesn’t get.\n  return pipeline\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/core.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/node-types.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/node-types.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   nodeTypes: () => (/* binding */ nodeTypes)\n/* harmony export */ });\n/**\n * List of node types made by `mdast-util-mdx`, which have to be passed\n * through untouched from the mdast tree to the hast tree.\n */\nconst nodeTypes = /** @type {const} */ ([\n  'mdxFlowExpression',\n  'mdxJsxFlowElement',\n  'mdxJsxTextElement',\n  'mdxTextExpression',\n  'mdxjsEsm'\n])\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1keC1qcyttZHhAMy4wLjEvbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi9ub2RlLXR5cGVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLDZCQUE2QixPQUFPO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2NibV8yMDI0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtZHgtanMrbWR4QDMuMC4xL25vZGVfbW9kdWxlcy9AbWR4LWpzL21keC9saWIvbm9kZS10eXBlcy5qcz80ZWM3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTGlzdCBvZiBub2RlIHR5cGVzIG1hZGUgYnkgYG1kYXN0LXV0aWwtbWR4YCwgd2hpY2ggaGF2ZSB0byBiZSBwYXNzZWRcbiAqIHRocm91Z2ggdW50b3VjaGVkIGZyb20gdGhlIG1kYXN0IHRyZWUgdG8gdGhlIGhhc3QgdHJlZS5cbiAqL1xuZXhwb3J0IGNvbnN0IG5vZGVUeXBlcyA9IC8qKiBAdHlwZSB7Y29uc3R9ICovIChbXG4gICdtZHhGbG93RXhwcmVzc2lvbicsXG4gICdtZHhKc3hGbG93RWxlbWVudCcsXG4gICdtZHhKc3hUZXh0RWxlbWVudCcsXG4gICdtZHhUZXh0RXhwcmVzc2lvbicsXG4gICdtZHhqc0VzbSdcbl0pXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/node-types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/recma-document.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/recma-document.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   recmaDocument: () => (/* binding */ recmaDocument)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! devlop */ \"(rsc)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var estree_walker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! estree-walker */ \"(rsc)/./node_modules/.pnpm/estree-walker@3.0.3/node_modules/estree-walker/src/index.js\");\n/* harmony import */ var periscopic__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! periscopic */ \"(rsc)/./node_modules/.pnpm/periscopic@3.1.0/node_modules/periscopic/src/index.js\");\n/* harmony import */ var unist_util_position_from_estree__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! unist-util-position-from-estree */ \"(rsc)/./node_modules/.pnpm/unist-util-position-from-estree@2.0.0/node_modules/unist-util-position-from-estree/lib/index.js\");\n/* harmony import */ var unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! unist-util-stringify-position */ \"(rsc)/./node_modules/.pnpm/unist-util-stringify-position@4.0.0/node_modules/unist-util-stringify-position/lib/index.js\");\n/* harmony import */ var _util_estree_util_create_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../util/estree-util-create.js */ \"(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-create.js\");\n/* harmony import */ var _util_estree_util_declaration_to_expression_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/estree-util-declaration-to-expression.js */ \"(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-declaration-to-expression.js\");\n/* harmony import */ var _util_estree_util_is_declaration_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/estree-util-is-declaration.js */ \"(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-is-declaration.js\");\n/* harmony import */ var _util_estree_util_specifiers_to_declarations_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../util/estree-util-specifiers-to-declarations.js */ \"(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-specifiers-to-declarations.js\");\n/* harmony import */ var _util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../util/estree-util-to-id-or-member-expression.js */ \"(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-to-id-or-member-expression.js\");\n/**\n * @typedef {import('estree-jsx').CallExpression} CallExpression\n * @typedef {import('estree-jsx').Directive} Directive\n * @typedef {import('estree-jsx').ExportAllDeclaration} ExportAllDeclaration\n * @typedef {import('estree-jsx').ExportDefaultDeclaration} ExportDefaultDeclaration\n * @typedef {import('estree-jsx').ExportNamedDeclaration} ExportNamedDeclaration\n * @typedef {import('estree-jsx').ExportSpecifier} ExportSpecifier\n * @typedef {import('estree-jsx').Expression} Expression\n * @typedef {import('estree-jsx').FunctionDeclaration} FunctionDeclaration\n * @typedef {import('estree-jsx').Identifier} Identifier\n * @typedef {import('estree-jsx').ImportDeclaration} ImportDeclaration\n * @typedef {import('estree-jsx').ImportDefaultSpecifier} ImportDefaultSpecifier\n * @typedef {import('estree-jsx').ImportExpression} ImportExpression\n * @typedef {import('estree-jsx').ImportSpecifier} ImportSpecifier\n * @typedef {import('estree-jsx').JSXElement} JSXElement\n * @typedef {import('estree-jsx').JSXFragment} JSXFragment\n * @typedef {import('estree-jsx').Literal} Literal\n * @typedef {import('estree-jsx').ModuleDeclaration} ModuleDeclaration\n * @typedef {import('estree-jsx').Node} Node\n * @typedef {import('estree-jsx').Program} Program\n * @typedef {import('estree-jsx').Property} Property\n * @typedef {import('estree-jsx').SimpleLiteral} SimpleLiteral\n * @typedef {import('estree-jsx').SpreadElement} SpreadElement\n * @typedef {import('estree-jsx').Statement} Statement\n * @typedef {import('estree-jsx').VariableDeclarator} VariableDeclarator\n *\n * @typedef {import('vfile').VFile} VFile\n *\n * @typedef {import('../core.js').ProcessorOptions} ProcessorOptions\n */\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Wrap the estree in `MDXContent`.\n *\n * @param {Readonly<ProcessorOptions>} options\n *   Configuration.\n * @returns\n *   Transform.\n */\nfunction recmaDocument(options) {\n  const baseUrl = options.baseUrl || undefined\n  const baseHref = typeof baseUrl === 'object' ? baseUrl.href : baseUrl\n  const outputFormat = options.outputFormat || 'program'\n  const pragma =\n    options.pragma === undefined ? 'React.createElement' : options.pragma\n  const pragmaFrag =\n    options.pragmaFrag === undefined ? 'React.Fragment' : options.pragmaFrag\n  const pragmaImportSource = options.pragmaImportSource || 'react'\n  const jsxImportSource = options.jsxImportSource || 'react'\n  const jsxRuntime = options.jsxRuntime || 'automatic'\n\n  /**\n   * @param {Program} tree\n   *   Tree.\n   * @param {VFile} file\n   *   File.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  return function (tree, file) {\n    /** @type {Array<[string, string] | string>} */\n    const exportedIdentifiers = []\n    /** @type {Array<Directive | ModuleDeclaration | Statement>} */\n    const replacement = []\n    let exportAllCount = 0\n    /** @type {ExportDefaultDeclaration | ExportSpecifier | undefined} */\n    let layout\n    /** @type {boolean | undefined} */\n    let content\n    /** @type {Node} */\n    let child\n\n    if (jsxRuntime === 'classic' && pragmaFrag) {\n      injectPragma(tree, '@jsxFrag', pragmaFrag)\n    }\n\n    if (jsxRuntime === 'classic' && pragma) {\n      injectPragma(tree, '@jsx', pragma)\n    }\n\n    if (jsxRuntime === 'automatic' && jsxImportSource) {\n      injectPragma(tree, '@jsxImportSource', jsxImportSource)\n    }\n\n    if (jsxRuntime) {\n      injectPragma(tree, '@jsxRuntime', jsxRuntime)\n    }\n\n    if (jsxRuntime === 'classic' && pragmaImportSource) {\n      if (!pragma) {\n        throw new Error(\n          'Missing `pragma` in classic runtime with `pragmaImportSource`'\n        )\n      }\n\n      handleEsm({\n        type: 'ImportDeclaration',\n        specifiers: [\n          {\n            type: 'ImportDefaultSpecifier',\n            local: {type: 'Identifier', name: pragma.split('.')[0]}\n          }\n        ],\n        source: {type: 'Literal', value: pragmaImportSource}\n      })\n    }\n\n    // Find the `export default`, the JSX expression, and leave the rest\n    // (import/exports) as they are.\n    for (child of tree.body) {\n      // ```tsx\n      // export default properties => <>{properties.children}</>\n      // ```\n      //\n      // Treat it as an inline layout declaration.\n      if (child.type === 'ExportDefaultDeclaration') {\n        if (layout) {\n          file.fail(\n            'Unexpected duplicate layout, expected a single layout (previous: ' +\n              (0,unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_2__.stringifyPosition)((0,unist_util_position_from_estree__WEBPACK_IMPORTED_MODULE_3__.positionFromEstree)(layout)) +\n              ')',\n            {\n              ancestors: [tree, child],\n              place: (0,unist_util_position_from_estree__WEBPACK_IMPORTED_MODULE_3__.positionFromEstree)(child),\n              ruleId: 'duplicate-layout',\n              source: 'recma-document'\n            }\n          )\n        }\n\n        layout = child\n        replacement.push({\n          type: 'VariableDeclaration',\n          kind: 'const',\n          declarations: [\n            {\n              type: 'VariableDeclarator',\n              id: {type: 'Identifier', name: 'MDXLayout'},\n              init: (0,_util_estree_util_is_declaration_js__WEBPACK_IMPORTED_MODULE_4__.isDeclaration)(child.declaration)\n                ? (0,_util_estree_util_declaration_to_expression_js__WEBPACK_IMPORTED_MODULE_5__.declarationToExpression)(child.declaration)\n                : child.declaration\n            }\n          ]\n        })\n      }\n      // ```tsx\n      // export {a, b as c} from 'd'\n      // ```\n      else if (child.type === 'ExportNamedDeclaration' && child.source) {\n        // Cast because always simple.\n        const source = /** @type {SimpleLiteral} */ (child.source)\n\n        // Remove `default` or `as default`, but not `default as`, specifier.\n        child.specifiers = child.specifiers.filter(function (specifier) {\n          if (specifier.exported.name === 'default') {\n            if (layout) {\n              file.fail(\n                'Unexpected duplicate layout, expected a single layout (previous: ' +\n                  (0,unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_2__.stringifyPosition)((0,unist_util_position_from_estree__WEBPACK_IMPORTED_MODULE_3__.positionFromEstree)(layout)) +\n                  ')',\n                {\n                  ancestors: [tree, child, specifier],\n                  place: (0,unist_util_position_from_estree__WEBPACK_IMPORTED_MODULE_3__.positionFromEstree)(child),\n                  ruleId: 'duplicate-layout',\n                  source: 'recma-document'\n                }\n              )\n            }\n\n            layout = specifier\n\n            // Make it just an import: `import MDXLayout from '…'`.\n            /** @type {Array<ImportDefaultSpecifier | ImportSpecifier>} */\n            const specifiers = []\n\n            // Default as default / something else as default.\n            if (specifier.local.name === 'default') {\n              specifiers.push({\n                type: 'ImportDefaultSpecifier',\n                local: {type: 'Identifier', name: 'MDXLayout'}\n              })\n            } else {\n              /** @type {ImportSpecifier} */\n              const importSpecifier = {\n                type: 'ImportSpecifier',\n                imported: specifier.local,\n                local: {type: 'Identifier', name: 'MDXLayout'}\n              }\n              ;(0,_util_estree_util_create_js__WEBPACK_IMPORTED_MODULE_6__.create)(specifier.local, importSpecifier)\n              specifiers.push(importSpecifier)\n            }\n\n            /** @type {Literal} */\n            const from = {type: 'Literal', value: source.value}\n            ;(0,_util_estree_util_create_js__WEBPACK_IMPORTED_MODULE_6__.create)(source, from)\n\n            /** @type {ImportDeclaration} */\n            const declaration = {\n              type: 'ImportDeclaration',\n              specifiers,\n              source: from\n            }\n            ;(0,_util_estree_util_create_js__WEBPACK_IMPORTED_MODULE_6__.create)(specifier, declaration)\n            handleEsm(declaration)\n\n            return false\n          }\n\n          return true\n        })\n\n        // If there are other things imported, keep it.\n        if (child.specifiers.length > 0) {\n          handleExport(child)\n        }\n      }\n      // ```tsx\n      // export {a, b as c}\n      // export * from 'a'\n      // ```\n      else if (\n        child.type === 'ExportNamedDeclaration' ||\n        child.type === 'ExportAllDeclaration'\n      ) {\n        handleExport(child)\n      } else if (child.type === 'ImportDeclaration') {\n        handleEsm(child)\n      } else if (\n        child.type === 'ExpressionStatement' &&\n        (child.expression.type === 'JSXElement' ||\n          // @ts-expect-error: `estree-jsx` does not register `JSXFragment` as an expression.\n          child.expression.type === 'JSXFragment')\n      ) {\n        content = true\n        replacement.push(\n          ...createMdxContent(child.expression, outputFormat, Boolean(layout))\n        )\n      } else {\n        // This catch-all branch is because plugins might add other things.\n        // Normally, we only have import/export/jsx, but just add whatever’s\n        // there.\n        replacement.push(child)\n      }\n    }\n\n    // If there was no JSX content at all, add an empty function.\n    if (!content) {\n      replacement.push(\n        ...createMdxContent(undefined, outputFormat, Boolean(layout))\n      )\n    }\n\n    exportedIdentifiers.push(['MDXContent', 'default'])\n\n    if (outputFormat === 'function-body') {\n      replacement.push({\n        type: 'ReturnStatement',\n        argument: {\n          type: 'ObjectExpression',\n          properties: [\n            ...Array.from({length: exportAllCount}).map(\n              /**\n               * @param {undefined} _\n               *   Nothing.\n               * @param {number} index\n               *   Index.\n               * @returns {SpreadElement}\n               *   Node.\n               */\n              function (_, index) {\n                return {\n                  type: 'SpreadElement',\n                  argument: {\n                    type: 'Identifier',\n                    name: '_exportAll' + (index + 1)\n                  }\n                }\n              }\n            ),\n            ...exportedIdentifiers.map(function (d) {\n              /** @type {Property} */\n              const property = {\n                type: 'Property',\n                kind: 'init',\n                method: false,\n                computed: false,\n                shorthand: typeof d === 'string',\n                key: {\n                  type: 'Identifier',\n                  name: typeof d === 'string' ? d : d[1]\n                },\n                value: {\n                  type: 'Identifier',\n                  name: typeof d === 'string' ? d : d[0]\n                }\n              }\n\n              return property\n            })\n          ]\n        }\n      })\n    }\n\n    tree.body = replacement\n\n    let usesImportMetaUrlVariable = false\n    let usesResolveDynamicHelper = false\n\n    if (baseHref || outputFormat === 'function-body') {\n      (0,estree_walker__WEBPACK_IMPORTED_MODULE_0__.walk)(tree, {\n        enter(node) {\n          if (\n            (node.type === 'ExportAllDeclaration' ||\n              node.type === 'ExportNamedDeclaration' ||\n              node.type === 'ImportDeclaration') &&\n            node.source\n          ) {\n            // We never hit this branch when generating function bodies, as\n            // statements are already compiled away into import expressions.\n            (0,devlop__WEBPACK_IMPORTED_MODULE_7__.ok)(baseHref, 'unexpected missing `baseHref` in branch')\n\n            let value = node.source.value\n            // The literal source for statements can only be string.\n            ;(0,devlop__WEBPACK_IMPORTED_MODULE_7__.ok)(typeof value === 'string', 'expected string source')\n\n            // Resolve a specifier.\n            // This is the same as `_resolveDynamicMdxSpecifier`, which has to\n            // be injected to work with expressions at runtime, but as we have\n            // `baseHref` at compile time here and statements are static\n            // strings, we can do it now.\n            try {\n              // To do: use `URL.canParse` next major.\n              // eslint-disable-next-line no-new\n              new URL(value)\n              // Fine: a full URL.\n            } catch {\n              if (\n                value.startsWith('/') ||\n                value.startsWith('./') ||\n                value.startsWith('../')\n              ) {\n                value = new URL(value, baseHref).href\n              } else {\n                // Fine: are bare specifier.\n              }\n            }\n\n            /** @type {SimpleLiteral} */\n            const replacement = {type: 'Literal', value}\n            ;(0,_util_estree_util_create_js__WEBPACK_IMPORTED_MODULE_6__.create)(node.source, replacement)\n            node.source = replacement\n            return\n          }\n\n          if (node.type === 'ImportExpression') {\n            usesResolveDynamicHelper = true\n            /** @type {CallExpression} */\n            const replacement = {\n              type: 'CallExpression',\n              callee: {type: 'Identifier', name: '_resolveDynamicMdxSpecifier'},\n              arguments: [node.source],\n              optional: false\n            }\n            node.source = replacement\n            return\n          }\n\n          // To do: add support for `import.meta.resolve`.\n\n          if (\n            node.type === 'MemberExpression' &&\n            'object' in node &&\n            node.object.type === 'MetaProperty' &&\n            node.property.type === 'Identifier' &&\n            node.object.meta.name === 'import' &&\n            node.object.property.name === 'meta' &&\n            node.property.name === 'url'\n          ) {\n            usesImportMetaUrlVariable = true\n            /** @type {Identifier} */\n            const replacement = {type: 'Identifier', name: '_importMetaUrl'}\n            ;(0,_util_estree_util_create_js__WEBPACK_IMPORTED_MODULE_6__.create)(node, replacement)\n            this.replace(replacement)\n          }\n        }\n      })\n    }\n\n    if (usesResolveDynamicHelper) {\n      if (!baseHref) {\n        usesImportMetaUrlVariable = true\n      }\n\n      tree.body.push(\n        resolveDynamicMdxSpecifier(\n          baseHref\n            ? {type: 'Literal', value: baseHref}\n            : {type: 'Identifier', name: '_importMetaUrl'}\n        )\n      )\n    }\n\n    if (usesImportMetaUrlVariable) {\n      (0,devlop__WEBPACK_IMPORTED_MODULE_7__.ok)(\n        outputFormat === 'function-body',\n        'expected `function-body` when using dynamic url injection'\n      )\n      tree.body.unshift(...createImportMetaUrlVariable())\n    }\n\n    /**\n     * @param {ExportAllDeclaration | ExportNamedDeclaration} node\n     *   Export node.\n     * @returns {undefined}\n     *   Nothing.\n     */\n    function handleExport(node) {\n      if (node.type === 'ExportNamedDeclaration') {\n        // ```tsx\n        // export function a() {}\n        // export class A {}\n        // export var a = 1\n        // ```\n        if (node.declaration) {\n          exportedIdentifiers.push(\n            ...(0,periscopic__WEBPACK_IMPORTED_MODULE_1__.analyze)(node.declaration).scope.declarations.keys()\n          )\n        }\n\n        // ```tsx\n        // export {a, b as c}\n        // export {a, b as c} from 'd'\n        // ```\n        for (child of node.specifiers) {\n          exportedIdentifiers.push(child.exported.name)\n        }\n      }\n\n      handleEsm(node)\n    }\n\n    /**\n     * @param {ExportAllDeclaration | ExportNamedDeclaration | ImportDeclaration} node\n     *   Export or import node.\n     * @returns {undefined}\n     *   Nothing.\n     */\n    function handleEsm(node) {\n      /** @type {ModuleDeclaration | Statement | undefined} */\n      let replace\n      /** @type {Expression} */\n      let init\n\n      if (outputFormat === 'function-body') {\n        if (\n          // Always have a source:\n          node.type === 'ImportDeclaration' ||\n          node.type === 'ExportAllDeclaration' ||\n          // Source optional:\n          (node.type === 'ExportNamedDeclaration' && node.source)\n        ) {\n          // We always have a source, but types say they can be missing.\n          (0,devlop__WEBPACK_IMPORTED_MODULE_7__.ok)(node.source, 'expected `node.source` to be defined')\n\n          // ```\n          // import 'a'\n          // //=> await import('a')\n          // import a from 'b'\n          // //=> const {default: a} = await import('b')\n          // export {a, b as c} from 'd'\n          // //=> const {a, c: b} = await import('d')\n          // export * from 'a'\n          // //=> const _exportAll0 = await import('a')\n          // ```\n          /** @type {ImportExpression} */\n          const argument = {type: 'ImportExpression', source: node.source}\n          ;(0,_util_estree_util_create_js__WEBPACK_IMPORTED_MODULE_6__.create)(node, argument)\n          init = {type: 'AwaitExpression', argument}\n\n          if (\n            (node.type === 'ImportDeclaration' ||\n              node.type === 'ExportNamedDeclaration') &&\n            node.specifiers.length === 0\n          ) {\n            replace = {type: 'ExpressionStatement', expression: init}\n          } else {\n            replace = {\n              type: 'VariableDeclaration',\n              kind: 'const',\n              declarations:\n                node.type === 'ExportAllDeclaration'\n                  ? [\n                      {\n                        type: 'VariableDeclarator',\n                        id: {\n                          type: 'Identifier',\n                          name: '_exportAll' + ++exportAllCount\n                        },\n                        init\n                      }\n                    ]\n                  : (0,_util_estree_util_specifiers_to_declarations_js__WEBPACK_IMPORTED_MODULE_8__.specifiersToDeclarations)(node.specifiers, init)\n            }\n          }\n        } else if (node.declaration) {\n          replace = node.declaration\n        } else {\n          /** @type {Array<VariableDeclarator>} */\n          const declarators = node.specifiers\n            .filter(function (specifier) {\n              return specifier.local.name !== specifier.exported.name\n            })\n            .map(function (specifier) {\n              return {\n                type: 'VariableDeclarator',\n                id: specifier.exported,\n                init: specifier.local\n              }\n            })\n\n          if (declarators.length > 0) {\n            replace = {\n              type: 'VariableDeclaration',\n              kind: 'const',\n              declarations: declarators\n            }\n          }\n        }\n      } else {\n        replace = node\n      }\n\n      if (replace) {\n        replacement.push(replace)\n      }\n    }\n  }\n\n  /**\n   * @param {Readonly<Expression> | undefined} content\n   *   Content.\n   * @param {'function-body' | 'program'} outputFormat\n   *   Output format.\n   * @param {boolean | undefined} [hasInternalLayout=false]\n   *   Whether there’s an internal layout (default: `false`).\n   * @returns {Array<ExportDefaultDeclaration | FunctionDeclaration>}\n   *   Functions.\n   */\n  function createMdxContent(content, outputFormat, hasInternalLayout) {\n    /** @type {JSXElement} */\n    const element = {\n      type: 'JSXElement',\n      openingElement: {\n        type: 'JSXOpeningElement',\n        name: {type: 'JSXIdentifier', name: 'MDXLayout'},\n        attributes: [\n          {\n            type: 'JSXSpreadAttribute',\n            argument: {type: 'Identifier', name: 'props'}\n          }\n        ],\n        selfClosing: false\n      },\n      closingElement: {\n        type: 'JSXClosingElement',\n        name: {type: 'JSXIdentifier', name: 'MDXLayout'}\n      },\n      children: [\n        {\n          type: 'JSXElement',\n          openingElement: {\n            type: 'JSXOpeningElement',\n            name: {type: 'JSXIdentifier', name: '_createMdxContent'},\n            attributes: [\n              {\n                type: 'JSXSpreadAttribute',\n                argument: {type: 'Identifier', name: 'props'}\n              }\n            ],\n            selfClosing: true\n          },\n          closingElement: null,\n          children: []\n        }\n      ]\n    }\n\n    let result = /** @type {Expression} */ (element)\n\n    if (!hasInternalLayout) {\n      result = {\n        type: 'ConditionalExpression',\n        test: {type: 'Identifier', name: 'MDXLayout'},\n        consequent: result,\n        alternate: {\n          type: 'CallExpression',\n          callee: {type: 'Identifier', name: '_createMdxContent'},\n          arguments: [{type: 'Identifier', name: 'props'}],\n          optional: false\n        }\n      }\n    }\n\n    let argument =\n      // Cast because TS otherwise does not think `JSXFragment`s are expressions.\n      /** @type {Readonly<Expression> | Readonly<JSXFragment>} */ (\n        content || {type: 'Identifier', name: 'undefined'}\n      )\n\n    // Unwrap a fragment of a single element.\n    if (\n      argument.type === 'JSXFragment' &&\n      argument.children.length === 1 &&\n      argument.children[0].type === 'JSXElement'\n    ) {\n      argument = argument.children[0]\n    }\n\n    let awaitExpression = false\n\n    ;(0,estree_walker__WEBPACK_IMPORTED_MODULE_0__.walk)(argument, {\n      enter(node) {\n        if (\n          node.type === 'ArrowFunctionExpression' ||\n          node.type === 'FunctionDeclaration' ||\n          node.type === 'FunctionExpression'\n        ) {\n          return this.skip()\n        }\n\n        if (\n          node.type === 'AwaitExpression' ||\n          /* c8 ignore next 2 -- can only occur in a function (which then can\n           * only be async, so skipped it) */\n          (node.type === 'ForOfStatement' && node.await)\n        ) {\n          awaitExpression = true\n        }\n      }\n    })\n\n    /** @type {FunctionDeclaration} */\n    const declaration = {\n      type: 'FunctionDeclaration',\n      id: {type: 'Identifier', name: 'MDXContent'},\n      params: [\n        {\n          type: 'AssignmentPattern',\n          left: {type: 'Identifier', name: 'props'},\n          right: {type: 'ObjectExpression', properties: []}\n        }\n      ],\n      body: {\n        type: 'BlockStatement',\n        body: [{type: 'ReturnStatement', argument: result}]\n      }\n    }\n\n    return [\n      {\n        type: 'FunctionDeclaration',\n        async: awaitExpression,\n        id: {type: 'Identifier', name: '_createMdxContent'},\n        params: [{type: 'Identifier', name: 'props'}],\n        body: {\n          type: 'BlockStatement',\n          body: [\n            {\n              type: 'ReturnStatement',\n              // Cast because TS doesn’t think `JSXFragment` is an expression.\n              // eslint-disable-next-line object-shorthand\n              argument: /** @type {Expression} */ (argument)\n            }\n          ]\n        }\n      },\n      outputFormat === 'program'\n        ? {type: 'ExportDefaultDeclaration', declaration}\n        : declaration\n    ]\n  }\n}\n\n/**\n * @param {Program} tree\n * @param {string} name\n * @param {string} value\n * @returns {undefined}\n */\nfunction injectPragma(tree, name, value) {\n  tree.comments?.unshift({\n    type: 'Block',\n    value: name + ' ' + value,\n    data: {_mdxIsPragmaComment: true}\n  })\n}\n\n/**\n * @param {Expression} importMetaUrl\n * @returns {FunctionDeclaration}\n */\nfunction resolveDynamicMdxSpecifier(importMetaUrl) {\n  return {\n    type: 'FunctionDeclaration',\n    id: {type: 'Identifier', name: '_resolveDynamicMdxSpecifier'},\n    generator: false,\n    async: false,\n    params: [{type: 'Identifier', name: 'd'}],\n    body: {\n      type: 'BlockStatement',\n      body: [\n        {\n          type: 'IfStatement',\n          test: {\n            type: 'BinaryExpression',\n            left: {\n              type: 'UnaryExpression',\n              operator: 'typeof',\n              prefix: true,\n              argument: {type: 'Identifier', name: 'd'}\n            },\n            operator: '!==',\n            right: {type: 'Literal', value: 'string'}\n          },\n          consequent: {\n            type: 'ReturnStatement',\n            argument: {type: 'Identifier', name: 'd'}\n          },\n          alternate: null\n        },\n        // To do: use `URL.canParse` when widely supported (see commented\n        // out code below).\n        {\n          type: 'TryStatement',\n          block: {\n            type: 'BlockStatement',\n            body: [\n              {\n                type: 'ExpressionStatement',\n                expression: {\n                  type: 'NewExpression',\n                  callee: {type: 'Identifier', name: 'URL'},\n                  arguments: [{type: 'Identifier', name: 'd'}]\n                }\n              },\n              {\n                type: 'ReturnStatement',\n                argument: {type: 'Identifier', name: 'd'}\n              }\n            ]\n          },\n          handler: {\n            type: 'CatchClause',\n            param: null,\n            body: {type: 'BlockStatement', body: []}\n          },\n          finalizer: null\n        },\n        // To do: use `URL.canParse` when widely supported.\n        // {\n        //   type: 'IfStatement',\n        //   test: {\n        //     type: 'CallExpression',\n        //     callee: toIdOrMemberExpression(['URL', 'canParse']),\n        //     arguments: [{type: 'Identifier', name: 'd'}],\n        //     optional: false\n        //   },\n        //   consequent: {\n        //     type: 'ReturnStatement',\n        //     argument: {type: 'Identifier', name: 'd'}\n        //   },\n        //   alternate: null\n        // },\n        {\n          type: 'IfStatement',\n          test: {\n            type: 'LogicalExpression',\n            left: {\n              type: 'LogicalExpression',\n              left: {\n                type: 'CallExpression',\n                callee: (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_9__.toIdOrMemberExpression)(['d', 'startsWith']),\n                arguments: [{type: 'Literal', value: '/'}],\n                optional: false\n              },\n              operator: '||',\n              right: {\n                type: 'CallExpression',\n                callee: (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_9__.toIdOrMemberExpression)(['d', 'startsWith']),\n                arguments: [{type: 'Literal', value: './'}],\n                optional: false\n              }\n            },\n            operator: '||',\n            right: {\n              type: 'CallExpression',\n              callee: (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_9__.toIdOrMemberExpression)(['d', 'startsWith']),\n              arguments: [{type: 'Literal', value: '../'}],\n              optional: false\n            }\n          },\n          consequent: {\n            type: 'ReturnStatement',\n            argument: {\n              type: 'MemberExpression',\n              object: {\n                type: 'NewExpression',\n                callee: {type: 'Identifier', name: 'URL'},\n                arguments: [{type: 'Identifier', name: 'd'}, importMetaUrl]\n              },\n              property: {type: 'Identifier', name: 'href'},\n              computed: false,\n              optional: false\n            }\n          },\n          alternate: null\n        },\n        {\n          type: 'ReturnStatement',\n          argument: {type: 'Identifier', name: 'd'}\n        }\n      ]\n    }\n  }\n}\n\n/**\n * @returns {Array<Statement>}\n */\nfunction createImportMetaUrlVariable() {\n  return [\n    {\n      type: 'VariableDeclaration',\n      declarations: [\n        {\n          type: 'VariableDeclarator',\n          id: {type: 'Identifier', name: '_importMetaUrl'},\n          init: (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_9__.toIdOrMemberExpression)(['arguments', 0, 'baseUrl'])\n        }\n      ],\n      kind: 'const'\n    },\n    {\n      type: 'IfStatement',\n      test: {\n        type: 'UnaryExpression',\n        operator: '!',\n        prefix: true,\n        argument: {type: 'Identifier', name: '_importMetaUrl'}\n      },\n      consequent: {\n        type: 'ThrowStatement',\n        argument: {\n          type: 'NewExpression',\n          callee: {type: 'Identifier', name: 'Error'},\n          arguments: [\n            {\n              type: 'Literal',\n              value:\n                'Unexpected missing `options.baseUrl` needed to support `export … from`, `import`, or `import.meta.url` when generating `function-body`'\n            }\n          ]\n        }\n      },\n      alternate: null\n    }\n  ]\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/recma-document.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/recma-jsx-build.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/recma-jsx-build.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   recmaJsxBuild: () => (/* binding */ recmaJsxBuild)\n/* harmony export */ });\n/* harmony import */ var estree_util_build_jsx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! estree-util-build-jsx */ \"(rsc)/./node_modules/.pnpm/estree-util-build-jsx@3.0.1/node_modules/estree-util-build-jsx/lib/index.js\");\n/* harmony import */ var _util_estree_util_specifiers_to_declarations_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/estree-util-specifiers-to-declarations.js */ \"(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-specifiers-to-declarations.js\");\n/* harmony import */ var _util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/estree-util-to-id-or-member-expression.js */ \"(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-to-id-or-member-expression.js\");\n/**\n * @typedef {import('estree-jsx').Program} Program\n * @typedef {import('estree-util-build-jsx').Options} BuildJsxOptions\n * @typedef {import('vfile').VFile} VFile\n */ /**\n * @typedef ExtraOptions\n *   Configuration for internal plugin `recma-jsx-build`.\n * @property {'function-body' | 'program' | null | undefined} [outputFormat='program']\n *   Whether to keep the import of the automatic runtime or get it from\n *   `arguments[0]` instead (default: `'program'`).\n *\n * @typedef {BuildJsxOptions & ExtraOptions} Options\n *   Options.\n */ \n\n\n/**\n * A plugin to build JSX into function calls.\n * `estree-util-build-jsx` does all the work for us!\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns\n *   Transform.\n */ function recmaJsxBuild(options) {\n    /* c8 ignore next -- always given in `@mdx-js/mdx` */ const { development, outputFormat } = options || {};\n    /**\n   * @param {Program} tree\n   *   Tree.\n   * @param {VFile} file\n   *   File.\n   * @returns {undefined}\n   *   Nothing.\n   */ return function(tree, file) {\n        (0,estree_util_build_jsx__WEBPACK_IMPORTED_MODULE_0__.buildJsx)(tree, {\n            development,\n            filePath: file.history[0]\n        });\n        // Remove the pragma comment that we injected ourselves as it is no longer\n        // needed.\n        if (tree.comments) {\n            tree.comments = tree.comments.filter(function(d) {\n                return !d.data?._mdxIsPragmaComment;\n            });\n        }\n        // When compiling to a function body, replace the import that was just\n        // generated, and get `jsx`, `jsxs`, and `Fragment` from `arguments[0]`\n        // instead.\n        if (outputFormat === \"function-body\") {\n            let index = 0;\n            // Skip directives: JS currently only has `use strict`, but Acorn allows\n            // arbitrary ones.\n            // Practically things like `use client` could be used?\n            while(index < tree.body.length){\n                const child = tree.body[index];\n                if (\"directive\" in child && child.directive) {\n                    index++;\n                } else {\n                    break;\n                }\n            }\n            const declaration = tree.body[index];\n            if (declaration && declaration.type === \"ImportDeclaration\" && typeof declaration.source.value === \"string\" && /\\/jsx-(dev-)?runtime$/.test(declaration.source.value)) {\n                tree.body[index] = {\n                    type: \"VariableDeclaration\",\n                    kind: \"const\",\n                    declarations: (0,_util_estree_util_specifiers_to_declarations_js__WEBPACK_IMPORTED_MODULE_1__.specifiersToDeclarations)(declaration.specifiers, (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_2__.toIdOrMemberExpression)([\n                        \"arguments\",\n                        0\n                    ]))\n                };\n            }\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1keC1qcyttZHhAMy4wLjEvbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi9wbHVnaW4vcmVjbWEtanN4LWJ1aWxkLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7OztDQUlDLEdBRUQ7Ozs7Ozs7OztDQVNDLEdBRTZDO0FBQzRDO0FBQ0Y7QUFFeEY7Ozs7Ozs7O0NBUUMsR0FDTSxTQUFTRyxjQUFjQyxPQUFPO0lBQ25DLG1EQUFtRCxHQUNuRCxNQUFNLEVBQUNDLFdBQVcsRUFBRUMsWUFBWSxFQUFDLEdBQUdGLFdBQVcsQ0FBQztJQUVoRDs7Ozs7OztHQU9DLEdBQ0QsT0FBTyxTQUFVRyxJQUFJLEVBQUVDLElBQUk7UUFDekJSLCtEQUFRQSxDQUFDTyxNQUFNO1lBQUNGO1lBQWFJLFVBQVVELEtBQUtFLE9BQU8sQ0FBQyxFQUFFO1FBQUE7UUFFdEQsMEVBQTBFO1FBQzFFLFVBQVU7UUFDVixJQUFJSCxLQUFLSSxRQUFRLEVBQUU7WUFDakJKLEtBQUtJLFFBQVEsR0FBR0osS0FBS0ksUUFBUSxDQUFDQyxNQUFNLENBQUMsU0FBVUMsQ0FBQztnQkFDOUMsT0FBTyxDQUFDQSxFQUFFQyxJQUFJLEVBQUVDO1lBQ2xCO1FBQ0Y7UUFFQSxzRUFBc0U7UUFDdEUsdUVBQXVFO1FBQ3ZFLFdBQVc7UUFDWCxJQUFJVCxpQkFBaUIsaUJBQWlCO1lBQ3BDLElBQUlVLFFBQVE7WUFFWix3RUFBd0U7WUFDeEUsa0JBQWtCO1lBQ2xCLHNEQUFzRDtZQUN0RCxNQUFPQSxRQUFRVCxLQUFLVSxJQUFJLENBQUNDLE1BQU0sQ0FBRTtnQkFDL0IsTUFBTUMsUUFBUVosS0FBS1UsSUFBSSxDQUFDRCxNQUFNO2dCQUM5QixJQUFJLGVBQWVHLFNBQVNBLE1BQU1DLFNBQVMsRUFBRTtvQkFDM0NKO2dCQUNGLE9BQU87b0JBQ0w7Z0JBQ0Y7WUFDRjtZQUVBLE1BQU1LLGNBQWNkLEtBQUtVLElBQUksQ0FBQ0QsTUFBTTtZQUVwQyxJQUNFSyxlQUNBQSxZQUFZQyxJQUFJLEtBQUssdUJBQ3JCLE9BQU9ELFlBQVlFLE1BQU0sQ0FBQ0MsS0FBSyxLQUFLLFlBQ3BDLHdCQUF3QkMsSUFBSSxDQUFDSixZQUFZRSxNQUFNLENBQUNDLEtBQUssR0FDckQ7Z0JBQ0FqQixLQUFLVSxJQUFJLENBQUNELE1BQU0sR0FBRztvQkFDakJNLE1BQU07b0JBQ05JLE1BQU07b0JBQ05DLGNBQWMxQix5R0FBd0JBLENBQ3BDb0IsWUFBWU8sVUFBVSxFQUN0QjFCLHVHQUFzQkEsQ0FBQzt3QkFBQzt3QkFBYTtxQkFBRTtnQkFFM0M7WUFDRjtRQUNGO0lBQ0Y7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2NibV8yMDI0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtZHgtanMrbWR4QDMuMC4xL25vZGVfbW9kdWxlcy9AbWR4LWpzL21keC9saWIvcGx1Z2luL3JlY21hLWpzeC1idWlsZC5qcz9jNGEzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnZXN0cmVlLWpzeCcpLlByb2dyYW19IFByb2dyYW1cbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2VzdHJlZS11dGlsLWJ1aWxkLWpzeCcpLk9wdGlvbnN9IEJ1aWxkSnN4T3B0aW9uc1xuICogQHR5cGVkZWYge2ltcG9ydCgndmZpbGUnKS5WRmlsZX0gVkZpbGVcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIEV4dHJhT3B0aW9uc1xuICogICBDb25maWd1cmF0aW9uIGZvciBpbnRlcm5hbCBwbHVnaW4gYHJlY21hLWpzeC1idWlsZGAuXG4gKiBAcHJvcGVydHkgeydmdW5jdGlvbi1ib2R5JyB8ICdwcm9ncmFtJyB8IG51bGwgfCB1bmRlZmluZWR9IFtvdXRwdXRGb3JtYXQ9J3Byb2dyYW0nXVxuICogICBXaGV0aGVyIHRvIGtlZXAgdGhlIGltcG9ydCBvZiB0aGUgYXV0b21hdGljIHJ1bnRpbWUgb3IgZ2V0IGl0IGZyb21cbiAqICAgYGFyZ3VtZW50c1swXWAgaW5zdGVhZCAoZGVmYXVsdDogYCdwcm9ncmFtJ2ApLlxuICpcbiAqIEB0eXBlZGVmIHtCdWlsZEpzeE9wdGlvbnMgJiBFeHRyYU9wdGlvbnN9IE9wdGlvbnNcbiAqICAgT3B0aW9ucy5cbiAqL1xuXG5pbXBvcnQge2J1aWxkSnN4fSBmcm9tICdlc3RyZWUtdXRpbC1idWlsZC1qc3gnXG5pbXBvcnQge3NwZWNpZmllcnNUb0RlY2xhcmF0aW9uc30gZnJvbSAnLi4vdXRpbC9lc3RyZWUtdXRpbC1zcGVjaWZpZXJzLXRvLWRlY2xhcmF0aW9ucy5qcydcbmltcG9ydCB7dG9JZE9yTWVtYmVyRXhwcmVzc2lvbn0gZnJvbSAnLi4vdXRpbC9lc3RyZWUtdXRpbC10by1pZC1vci1tZW1iZXItZXhwcmVzc2lvbi5qcydcblxuLyoqXG4gKiBBIHBsdWdpbiB0byBidWlsZCBKU1ggaW50byBmdW5jdGlvbiBjYWxscy5cbiAqIGBlc3RyZWUtdXRpbC1idWlsZC1qc3hgIGRvZXMgYWxsIHRoZSB3b3JrIGZvciB1cyFcbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5PE9wdGlvbnM+IHwgbnVsbCB8IHVuZGVmaW5lZH0gW29wdGlvbnNdXG4gKiAgIENvbmZpZ3VyYXRpb24gKG9wdGlvbmFsKS5cbiAqIEByZXR1cm5zXG4gKiAgIFRyYW5zZm9ybS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlY21hSnN4QnVpbGQob3B0aW9ucykge1xuICAvKiBjOCBpZ25vcmUgbmV4dCAtLSBhbHdheXMgZ2l2ZW4gaW4gYEBtZHgtanMvbWR4YCAqL1xuICBjb25zdCB7ZGV2ZWxvcG1lbnQsIG91dHB1dEZvcm1hdH0gPSBvcHRpb25zIHx8IHt9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7UHJvZ3JhbX0gdHJlZVxuICAgKiAgIFRyZWUuXG4gICAqIEBwYXJhbSB7VkZpbGV9IGZpbGVcbiAgICogICBGaWxlLlxuICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgKiAgIE5vdGhpbmcuXG4gICAqL1xuICByZXR1cm4gZnVuY3Rpb24gKHRyZWUsIGZpbGUpIHtcbiAgICBidWlsZEpzeCh0cmVlLCB7ZGV2ZWxvcG1lbnQsIGZpbGVQYXRoOiBmaWxlLmhpc3RvcnlbMF19KVxuXG4gICAgLy8gUmVtb3ZlIHRoZSBwcmFnbWEgY29tbWVudCB0aGF0IHdlIGluamVjdGVkIG91cnNlbHZlcyBhcyBpdCBpcyBubyBsb25nZXJcbiAgICAvLyBuZWVkZWQuXG4gICAgaWYgKHRyZWUuY29tbWVudHMpIHtcbiAgICAgIHRyZWUuY29tbWVudHMgPSB0cmVlLmNvbW1lbnRzLmZpbHRlcihmdW5jdGlvbiAoZCkge1xuICAgICAgICByZXR1cm4gIWQuZGF0YT8uX21keElzUHJhZ21hQ29tbWVudFxuICAgICAgfSlcbiAgICB9XG5cbiAgICAvLyBXaGVuIGNvbXBpbGluZyB0byBhIGZ1bmN0aW9uIGJvZHksIHJlcGxhY2UgdGhlIGltcG9ydCB0aGF0IHdhcyBqdXN0XG4gICAgLy8gZ2VuZXJhdGVkLCBhbmQgZ2V0IGBqc3hgLCBganN4c2AsIGFuZCBgRnJhZ21lbnRgIGZyb20gYGFyZ3VtZW50c1swXWBcbiAgICAvLyBpbnN0ZWFkLlxuICAgIGlmIChvdXRwdXRGb3JtYXQgPT09ICdmdW5jdGlvbi1ib2R5Jykge1xuICAgICAgbGV0IGluZGV4ID0gMFxuXG4gICAgICAvLyBTa2lwIGRpcmVjdGl2ZXM6IEpTIGN1cnJlbnRseSBvbmx5IGhhcyBgdXNlIHN0cmljdGAsIGJ1dCBBY29ybiBhbGxvd3NcbiAgICAgIC8vIGFyYml0cmFyeSBvbmVzLlxuICAgICAgLy8gUHJhY3RpY2FsbHkgdGhpbmdzIGxpa2UgYHVzZSBjbGllbnRgIGNvdWxkIGJlIHVzZWQ/XG4gICAgICB3aGlsZSAoaW5kZXggPCB0cmVlLmJvZHkubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IGNoaWxkID0gdHJlZS5ib2R5W2luZGV4XVxuICAgICAgICBpZiAoJ2RpcmVjdGl2ZScgaW4gY2hpbGQgJiYgY2hpbGQuZGlyZWN0aXZlKSB7XG4gICAgICAgICAgaW5kZXgrK1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY29uc3QgZGVjbGFyYXRpb24gPSB0cmVlLmJvZHlbaW5kZXhdXG5cbiAgICAgIGlmIChcbiAgICAgICAgZGVjbGFyYXRpb24gJiZcbiAgICAgICAgZGVjbGFyYXRpb24udHlwZSA9PT0gJ0ltcG9ydERlY2xhcmF0aW9uJyAmJlxuICAgICAgICB0eXBlb2YgZGVjbGFyYXRpb24uc291cmNlLnZhbHVlID09PSAnc3RyaW5nJyAmJlxuICAgICAgICAvXFwvanN4LShkZXYtKT9ydW50aW1lJC8udGVzdChkZWNsYXJhdGlvbi5zb3VyY2UudmFsdWUpXG4gICAgICApIHtcbiAgICAgICAgdHJlZS5ib2R5W2luZGV4XSA9IHtcbiAgICAgICAgICB0eXBlOiAnVmFyaWFibGVEZWNsYXJhdGlvbicsXG4gICAgICAgICAga2luZDogJ2NvbnN0JyxcbiAgICAgICAgICBkZWNsYXJhdGlvbnM6IHNwZWNpZmllcnNUb0RlY2xhcmF0aW9ucyhcbiAgICAgICAgICAgIGRlY2xhcmF0aW9uLnNwZWNpZmllcnMsXG4gICAgICAgICAgICB0b0lkT3JNZW1iZXJFeHByZXNzaW9uKFsnYXJndW1lbnRzJywgMF0pXG4gICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iXSwibmFtZXMiOlsiYnVpbGRKc3giLCJzcGVjaWZpZXJzVG9EZWNsYXJhdGlvbnMiLCJ0b0lkT3JNZW1iZXJFeHByZXNzaW9uIiwicmVjbWFKc3hCdWlsZCIsIm9wdGlvbnMiLCJkZXZlbG9wbWVudCIsIm91dHB1dEZvcm1hdCIsInRyZWUiLCJmaWxlIiwiZmlsZVBhdGgiLCJoaXN0b3J5IiwiY29tbWVudHMiLCJmaWx0ZXIiLCJkIiwiZGF0YSIsIl9tZHhJc1ByYWdtYUNvbW1lbnQiLCJpbmRleCIsImJvZHkiLCJsZW5ndGgiLCJjaGlsZCIsImRpcmVjdGl2ZSIsImRlY2xhcmF0aW9uIiwidHlwZSIsInNvdXJjZSIsInZhbHVlIiwidGVzdCIsImtpbmQiLCJkZWNsYXJhdGlvbnMiLCJzcGVjaWZpZXJzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/recma-jsx-build.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/recma-jsx-rewrite.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/recma-jsx-rewrite.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   recmaJsxRewrite: () => (/* binding */ recmaJsxRewrite)\n/* harmony export */ });\n/* harmony import */ var estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! estree-util-is-identifier-name */ \"(rsc)/./node_modules/.pnpm/estree-util-is-identifier-name@3.0.0/node_modules/estree-util-is-identifier-name/lib/index.js\");\n/* harmony import */ var estree_walker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! estree-walker */ \"(rsc)/./node_modules/.pnpm/estree-walker@3.0.3/node_modules/estree-walker/src/index.js\");\n/* harmony import */ var periscopic__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! periscopic */ \"(rsc)/./node_modules/.pnpm/periscopic@3.1.0/node_modules/periscopic/src/index.js\");\n/* harmony import */ var unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! unist-util-stringify-position */ \"(rsc)/./node_modules/.pnpm/unist-util-stringify-position@4.0.0/node_modules/unist-util-stringify-position/lib/index.js\");\n/* harmony import */ var unist_util_position_from_estree__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! unist-util-position-from-estree */ \"(rsc)/./node_modules/.pnpm/unist-util-position-from-estree@2.0.0/node_modules/unist-util-position-from-estree/lib/index.js\");\n/* harmony import */ var _util_estree_util_specifiers_to_declarations_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../util/estree-util-specifiers-to-declarations.js */ \"(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-specifiers-to-declarations.js\");\n/* harmony import */ var _util_estree_util_to_binary_addition_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../util/estree-util-to-binary-addition.js */ \"(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-to-binary-addition.js\");\n/* harmony import */ var _util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/estree-util-to-id-or-member-expression.js */ \"(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-to-id-or-member-expression.js\");\n/**\n * @typedef {import('estree-jsx').Expression} Expression\n * @typedef {import('estree-jsx').Function} EstreeFunction\n * @typedef {import('estree-jsx').Identifier} Identifier\n * @typedef {import('estree-jsx').ImportSpecifier} ImportSpecifier\n * @typedef {import('estree-jsx').JSXElement} JSXElement\n * @typedef {import('estree-jsx').ModuleDeclaration} ModuleDeclaration\n * @typedef {import('estree-jsx').Node} Node\n * @typedef {import('estree-jsx').ObjectPattern} ObjectPattern\n * @typedef {import('estree-jsx').Program} Program\n * @typedef {import('estree-jsx').Property} Property\n * @typedef {import('estree-jsx').SpreadElement} SpreadElement\n * @typedef {import('estree-jsx').Statement} Statement\n * @typedef {import('estree-jsx').VariableDeclarator} VariableDeclarator\n *\n * @typedef {import('periscopic').Scope} PeriscopicScope\n *\n * @typedef {import('vfile').VFile} VFile\n *\n * @typedef {import('../core.js').ProcessorOptions} ProcessorOptions\n */\n\n/**\n * @typedef {PeriscopicScope & {node: Node}} Scope\n *   Scope (with a `node`).\n *\n * @typedef StackEntry\n *   Entry.\n * @property {Array<string>} components\n *   Used components.\n * @property {Map<string, string>} idToInvalidComponentName\n *   Map of JSX identifiers which cannot be used as JS identifiers, to valid JS identifiers.\n * @property {Readonly<EstreeFunction>} node\n *   Function.\n * @property {Array<string>} objects\n *   Identifiers of used objects (such as `x` in `x.y`).\n * @property {Record<string, {node: Readonly<JSXElement>, component: boolean}>} references\n *   Map of JSX identifiers for components and objects, to where they were first used.\n * @property {Array<string>} tags\n *   Tag names.\n */\n\n\n\n\n\n\n\n\n\n\n/**\n * A plugin that rewrites JSX in functions to accept components as\n * `props.components` (when the function is called `_createMdxContent`), or from\n * a provider (if there is one).\n * It also makes sure that any undefined components are defined: either from\n * received components or as a function that throws an error.\n *\n * @param {Readonly<ProcessorOptions>} options\n *   Configuration (optional).\n * @returns\n *   Transform.\n */\nfunction recmaJsxRewrite(options) {\n  const {development, outputFormat, providerImportSource} = options\n\n  /**\n   * @param {Program} tree\n   *   Tree.\n   * @param {VFile} file\n   *   File.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  return function (tree, file) {\n    // Find everything that’s defined in the top-level scope.\n    const scopeInfo = (0,periscopic__WEBPACK_IMPORTED_MODULE_1__.analyze)(tree)\n    /** @type {Array<StackEntry>} */\n    const functionStack = []\n    let importProvider = false\n    let createErrorHelper = false\n    /** @type {Scope | undefined} */\n    let currentScope\n\n    ;(0,estree_walker__WEBPACK_IMPORTED_MODULE_0__.walk)(tree, {\n      enter(node) {\n        // Cast because we match `node`.\n        const newScope = /** @type {Scope | undefined} */ (\n          scopeInfo.map.get(node)\n        )\n\n        if (\n          node.type === 'FunctionDeclaration' ||\n          node.type === 'FunctionExpression' ||\n          node.type === 'ArrowFunctionExpression'\n        ) {\n          functionStack.push({\n            components: [],\n            idToInvalidComponentName: new Map(),\n            node,\n            objects: [],\n            references: {},\n            tags: []\n          })\n\n          // MDXContent only ever contains MDXLayout\n          if (\n            isNamedFunction(node, 'MDXContent') &&\n            newScope &&\n            !inScope(newScope, 'MDXLayout')\n          ) {\n            functionStack[0].components.push('MDXLayout')\n          }\n        }\n\n        const functionScope = functionStack[0]\n        if (\n          !functionScope ||\n          (!isNamedFunction(functionScope.node, '_createMdxContent') &&\n            !providerImportSource)\n        ) {\n          return\n        }\n\n        if (newScope) {\n          newScope.node = node\n          currentScope = newScope\n        }\n\n        if (currentScope && node.type === 'JSXElement') {\n          let name = node.openingElement.name\n\n          // `<x.y>`, `<Foo.Bar>`, `<x.y.z>`.\n          if (name.type === 'JSXMemberExpression') {\n            /** @type {Array<string>} */\n            const ids = []\n\n            // Find the left-most identifier.\n            while (name.type === 'JSXMemberExpression') {\n              ids.unshift(name.property.name)\n              name = name.object\n            }\n\n            ids.unshift(name.name)\n            const fullId = ids.join('.')\n            const id = name.name\n\n            const isInScope = inScope(currentScope, id)\n\n            if (!Object.hasOwn(functionScope.references, fullId)) {\n              // Cast because we match `node`.\n              const parentScope = /** @type {Scope | undefined} */ (\n                currentScope.parent\n              )\n              if (\n                !isInScope ||\n                // If the parent scope is `_createMdxContent`, then this\n                // references a component we can add a check statement for.\n                (parentScope &&\n                  parentScope.node.type === 'FunctionDeclaration' &&\n                  isNamedFunction(parentScope.node, '_createMdxContent'))\n              ) {\n                functionScope.references[fullId] = {component: true, node}\n              }\n            }\n\n            if (!functionScope.objects.includes(id) && !isInScope) {\n              functionScope.objects.push(id)\n            }\n          }\n          // `<xml:thing>`.\n          else if (name.type === 'JSXNamespacedName') {\n            // Ignore namespaces.\n          }\n          // If the name is a valid ES identifier, and it doesn’t start with a\n          // lowercase letter, it’s a component.\n          // For example, `$foo`, `_bar`, `Baz` are all component names.\n          // But `foo` and `b-ar` are tag names.\n          else if ((0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_2__.name)(name.name) && !/^[a-z]/.test(name.name)) {\n            const id = name.name\n\n            if (!inScope(currentScope, id)) {\n              // No need to add an error for an undefined layout — we use an\n              // `if` later.\n              if (\n                id !== 'MDXLayout' &&\n                !Object.hasOwn(functionScope.references, id)\n              ) {\n                functionScope.references[id] = {component: true, node}\n              }\n\n              if (!functionScope.components.includes(id)) {\n                functionScope.components.push(id)\n              }\n            }\n          } else if (node.data && node.data._mdxExplicitJsx) {\n            // Do not turn explicit JSX into components from `_components`.\n            // As in, a given `h1` component is used for `# heading` (next case),\n            // but not for `<h1>heading</h1>`.\n          } else {\n            const id = name.name\n\n            if (!functionScope.tags.includes(id)) {\n              functionScope.tags.push(id)\n            }\n\n            /** @type {Array<number | string>} */\n            let jsxIdExpression = ['_components', id]\n            if ((0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_2__.name)(id) === false) {\n              let invalidComponentName =\n                functionScope.idToInvalidComponentName.get(id)\n              if (invalidComponentName === undefined) {\n                invalidComponentName = `_component${functionScope.idToInvalidComponentName.size}`\n                functionScope.idToInvalidComponentName.set(\n                  id,\n                  invalidComponentName\n                )\n              }\n\n              jsxIdExpression = [invalidComponentName]\n            }\n\n            node.openingElement.name =\n              (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_3__.toJsxIdOrMemberExpression)(jsxIdExpression)\n\n            if (node.closingElement) {\n              node.closingElement.name =\n                (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_3__.toJsxIdOrMemberExpression)(jsxIdExpression)\n            }\n          }\n        }\n      },\n      leave(node) {\n        /** @type {Array<Property | SpreadElement>} */\n        const defaults = []\n        /** @type {Array<string>} */\n        const actual = []\n        /** @type {Array<Expression>} */\n        const parameters = []\n        /** @type {Array<VariableDeclarator>} */\n        const declarations = []\n\n        if (currentScope && currentScope.node === node) {\n          // Cast to patch our `node`.\n          currentScope = /** @type {Scope} */ (currentScope.parent)\n        }\n\n        if (\n          node.type === 'FunctionDeclaration' ||\n          node.type === 'FunctionExpression' ||\n          node.type === 'ArrowFunctionExpression'\n        ) {\n          const scopeNode = node\n          const scope = functionStack[functionStack.length - 1]\n          /** @type {string} */\n          let name\n\n          for (name of scope.tags.sort()) {\n            defaults.push({\n              type: 'Property',\n              kind: 'init',\n              key: (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_2__.name)(name)\n                ? {type: 'Identifier', name}\n                : {type: 'Literal', value: name},\n              value: {type: 'Literal', value: name},\n              method: false,\n              shorthand: false,\n              computed: false\n            })\n          }\n\n          actual.push(...scope.components)\n\n          for (name of scope.objects) {\n            // In some cases, a component is used directly (`<X>`) but it’s also\n            // used as an object (`<X.Y>`).\n            if (!actual.includes(name)) {\n              actual.push(name)\n            }\n          }\n\n          actual.sort()\n\n          /** @type {Array<Statement>} */\n          const statements = []\n\n          if (\n            defaults.length > 0 ||\n            actual.length > 0 ||\n            scope.idToInvalidComponentName.size > 0\n          ) {\n            if (providerImportSource) {\n              importProvider = true\n              parameters.push({\n                type: 'CallExpression',\n                callee: {type: 'Identifier', name: '_provideComponents'},\n                arguments: [],\n                optional: false\n              })\n            }\n\n            // Accept `components` as a prop if this is the `MDXContent` or\n            // `_createMdxContent` function.\n            if (\n              isNamedFunction(scope.node, 'MDXContent') ||\n              isNamedFunction(scope.node, '_createMdxContent')\n            ) {\n              parameters.push((0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_3__.toIdOrMemberExpression)(['props', 'components']))\n            }\n\n            if (defaults.length > 0 || parameters.length > 1) {\n              for (const parameter of parameters) {\n                defaults.push({type: 'SpreadElement', argument: parameter})\n              }\n            }\n\n            // If we’re getting components from several sources, merge them.\n            /** @type {Expression} */\n            let componentsInit =\n              defaults.length > 0\n                ? {type: 'ObjectExpression', properties: defaults}\n                : // If we’re only getting components from `props.components`,\n                  // make sure it’s defined.\n                  {\n                    type: 'LogicalExpression',\n                    operator: '||',\n                    left: parameters[0],\n                    right: {type: 'ObjectExpression', properties: []}\n                  }\n\n            /** @type {ObjectPattern | undefined} */\n            let componentsPattern\n\n            // Add components to scope.\n            // For `['MyComponent', 'MDXLayout']` this generates:\n            // ```tsx\n            // const {MyComponent, wrapper: MDXLayout} = _components\n            // ```\n            // Note that MDXLayout is special as it’s taken from\n            // `_components.wrapper`.\n            if (actual.length > 0) {\n              componentsPattern = {\n                type: 'ObjectPattern',\n                properties: actual.map(function (name) {\n                  return {\n                    type: 'Property',\n                    kind: 'init',\n                    key: {\n                      type: 'Identifier',\n                      name: name === 'MDXLayout' ? 'wrapper' : name\n                    },\n                    value: {type: 'Identifier', name},\n                    method: false,\n                    shorthand: name !== 'MDXLayout',\n                    computed: false\n                  }\n                })\n              }\n            }\n\n            if (scope.tags.length > 0) {\n              declarations.push({\n                type: 'VariableDeclarator',\n                id: {type: 'Identifier', name: '_components'},\n                init: componentsInit\n              })\n              componentsInit = {type: 'Identifier', name: '_components'}\n            }\n\n            if (isNamedFunction(scope.node, '_createMdxContent')) {\n              for (const [id, componentName] of [\n                ...scope.idToInvalidComponentName\n              ].sort(function ([a], [b]) {\n                return a.localeCompare(b)\n              })) {\n                // For JSX IDs that can’t be represented as JavaScript IDs (as in,\n                // those with dashes, such as `custom-element`), generate a\n                // separate variable that is a valid JS ID (such as `_component0`),\n                // and takes it from components:\n                // `const _component0 = _components['custom-element']`\n                declarations.push({\n                  type: 'VariableDeclarator',\n                  id: {\n                    type: 'Identifier',\n                    name: componentName\n                  },\n                  init: {\n                    type: 'MemberExpression',\n                    object: {type: 'Identifier', name: '_components'},\n                    property: {type: 'Literal', value: id},\n                    computed: true,\n                    optional: false\n                  }\n                })\n              }\n            }\n\n            if (componentsPattern) {\n              declarations.push({\n                type: 'VariableDeclarator',\n                id: componentsPattern,\n                init: componentsInit\n              })\n            }\n\n            if (declarations.length > 0) {\n              statements.push({\n                type: 'VariableDeclaration',\n                kind: 'const',\n                declarations\n              })\n            }\n          }\n\n          /** @type {string} */\n          let key\n\n          // Add partials (so for `x.y.z` it’d generate `x` and `x.y` too).\n          for (key in scope.references) {\n            if (Object.hasOwn(scope.references, key)) {\n              const parts = key.split('.')\n              let index = 0\n              while (++index < parts.length) {\n                const partial = parts.slice(0, index).join('.')\n                if (!Object.hasOwn(scope.references, partial)) {\n                  scope.references[partial] = {\n                    component: false,\n                    node: scope.references[key].node\n                  }\n                }\n              }\n            }\n          }\n\n          const references = Object.keys(scope.references).sort()\n          let index = -1\n          while (++index < references.length) {\n            const id = references[index]\n            const info = scope.references[id]\n            const place = (0,unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_4__.stringifyPosition)((0,unist_util_position_from_estree__WEBPACK_IMPORTED_MODULE_5__.positionFromEstree)(info.node))\n            /** @type {Array<Expression>} */\n            const parameters = [\n              {type: 'Literal', value: id},\n              {type: 'Literal', value: info.component}\n            ]\n\n            createErrorHelper = true\n\n            if (development && place) {\n              parameters.push({type: 'Literal', value: place})\n            }\n\n            statements.push({\n              type: 'IfStatement',\n              test: {\n                type: 'UnaryExpression',\n                operator: '!',\n                prefix: true,\n                argument: (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_3__.toIdOrMemberExpression)(id.split('.'))\n              },\n              consequent: {\n                type: 'ExpressionStatement',\n                expression: {\n                  type: 'CallExpression',\n                  callee: {type: 'Identifier', name: '_missingMdxReference'},\n                  arguments: parameters,\n                  optional: false\n                }\n              },\n              alternate: undefined\n            })\n          }\n\n          if (statements.length > 0) {\n            // Arrow functions with an implied return:\n            if (scopeNode.body.type !== 'BlockStatement') {\n              scopeNode.body = {\n                type: 'BlockStatement',\n                body: [{type: 'ReturnStatement', argument: scopeNode.body}]\n              }\n            }\n\n            scopeNode.body.body.unshift(...statements)\n          }\n\n          functionStack.pop()\n        }\n      }\n    })\n\n    // If a provider is used (and can be used), import it.\n    if (importProvider && providerImportSource) {\n      tree.body.unshift(\n        createImportProvider(providerImportSource, outputFormat)\n      )\n    }\n\n    // If potentially missing components are used.\n    if (createErrorHelper) {\n      /** @type {Array<Expression>} */\n      const message = [\n        {type: 'Literal', value: 'Expected '},\n        {\n          type: 'ConditionalExpression',\n          test: {type: 'Identifier', name: 'component'},\n          consequent: {type: 'Literal', value: 'component'},\n          alternate: {type: 'Literal', value: 'object'}\n        },\n        {type: 'Literal', value: ' `'},\n        {type: 'Identifier', name: 'id'},\n        {\n          type: 'Literal',\n          value:\n            '` to be defined: you likely forgot to import, pass, or provide it.'\n        }\n      ]\n\n      /** @type {Array<Identifier>} */\n      const parameters = [\n        {type: 'Identifier', name: 'id'},\n        {type: 'Identifier', name: 'component'}\n      ]\n\n      if (development) {\n        message.push({\n          type: 'ConditionalExpression',\n          test: {type: 'Identifier', name: 'place'},\n          consequent: (0,_util_estree_util_to_binary_addition_js__WEBPACK_IMPORTED_MODULE_6__.toBinaryAddition)([\n            {type: 'Literal', value: '\\nIt’s referenced in your code at `'},\n            {type: 'Identifier', name: 'place'},\n            {\n              type: 'Literal',\n              value: (file.path ? '` in `' + file.path : '') + '`'\n            }\n          ]),\n          alternate: {type: 'Literal', value: ''}\n        })\n\n        parameters.push({type: 'Identifier', name: 'place'})\n      }\n\n      tree.body.push({\n        type: 'FunctionDeclaration',\n        id: {type: 'Identifier', name: '_missingMdxReference'},\n        generator: false,\n        async: false,\n        params: parameters,\n        body: {\n          type: 'BlockStatement',\n          body: [\n            {\n              type: 'ThrowStatement',\n              argument: {\n                type: 'NewExpression',\n                callee: {type: 'Identifier', name: 'Error'},\n                arguments: [(0,_util_estree_util_to_binary_addition_js__WEBPACK_IMPORTED_MODULE_6__.toBinaryAddition)(message)]\n              }\n            }\n          ]\n        }\n      })\n    }\n\n    if (outputFormat === 'function-body') {\n      tree.body.unshift({\n        type: 'ExpressionStatement',\n        expression: {type: 'Literal', value: 'use strict'},\n        directive: 'use strict'\n      })\n    }\n  }\n}\n\n/**\n * @param {string} providerImportSource\n *   Provider source.\n * @param {'function-body' | 'program' | null | undefined} outputFormat\n *   Format.\n * @returns {ModuleDeclaration | Statement}\n *   Node.\n */\nfunction createImportProvider(providerImportSource, outputFormat) {\n  /** @type {Array<ImportSpecifier>} */\n  const specifiers = [\n    {\n      type: 'ImportSpecifier',\n      imported: {type: 'Identifier', name: 'useMDXComponents'},\n      local: {type: 'Identifier', name: '_provideComponents'}\n    }\n  ]\n\n  return outputFormat === 'function-body'\n    ? {\n        type: 'VariableDeclaration',\n        kind: 'const',\n        declarations: (0,_util_estree_util_specifiers_to_declarations_js__WEBPACK_IMPORTED_MODULE_7__.specifiersToDeclarations)(\n          specifiers,\n          (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_3__.toIdOrMemberExpression)(['arguments', 0])\n        )\n      }\n    : {\n        type: 'ImportDeclaration',\n        specifiers,\n        source: {type: 'Literal', value: providerImportSource}\n      }\n}\n\n/**\n * @param {Readonly<EstreeFunction>} node\n *   Node.\n * @param {string} name\n *   Name.\n * @returns {boolean}\n *   Whether `node` is a named function with `name`.\n */\nfunction isNamedFunction(node, name) {\n  return Boolean(node && 'id' in node && node.id && node.id.name === name)\n}\n\n/**\n * @param {Readonly<Scope>} scope\n *   Scope.\n * @param {string} id\n *   Identifier.\n * @returns {boolean}\n *   Whether `id` is in `scope`.\n */\nfunction inScope(scope, id) {\n  /** @type {Scope | undefined} */\n  let currentScope = scope\n\n  while (currentScope) {\n    if (currentScope.declarations.has(id)) {\n      return true\n    }\n\n    // Cast to patch our `node`.\n    currentScope = /** @type {Scope | undefined} */ (\n      currentScope.parent || undefined\n    )\n  }\n\n  return false\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/recma-jsx-rewrite.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/recma-stringify.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/recma-stringify.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   recmaStringify: () => (/* binding */ recmaStringify)\n/* harmony export */ });\n/* harmony import */ var estree_util_to_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! estree-util-to-js */ \"(rsc)/./node_modules/.pnpm/estree-util-to-js@2.0.0/node_modules/estree-util-to-js/lib/index.js\");\n/* harmony import */ var estree_util_to_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! estree-util-to-js */ \"(rsc)/./node_modules/.pnpm/estree-util-to-js@2.0.0/node_modules/estree-util-to-js/lib/jsx.js\");\n/**\n * @typedef {import('estree-jsx').Program} Program\n * @typedef {import('unified').Processor<undefined, undefined, undefined, Program, string>} Processor\n * @typedef {import('vfile').VFile} VFile\n *\n * @typedef {import('../core.js').ProcessorOptions} ProcessorOptions\n */\n\n\n\n/**\n * Serialize an esast (estree) program to JavaScript.\n *\n * @type {import('unified').Plugin<[Readonly<ProcessorOptions>], Program, string>}\n */\nfunction recmaStringify(options) {\n  // @ts-expect-error: TS is wrong about `this`.\n  // eslint-disable-next-line unicorn/no-this-assignment\n  const self = /** @type {Processor} */ (this)\n  const {SourceMapGenerator} = options\n\n  self.compiler = compiler\n\n  /**\n   * @param {Program} tree\n   *   Tree.\n   * @param {VFile} file\n   *   File.\n   * @returns {string}\n   *   JavaScript.\n   */\n  function compiler(tree, file) {\n    const result = SourceMapGenerator\n      ? (0,estree_util_to_js__WEBPACK_IMPORTED_MODULE_0__.toJs)(tree, {\n          SourceMapGenerator,\n          filePath: file.path || 'unknown.mdx',\n          handlers: estree_util_to_js__WEBPACK_IMPORTED_MODULE_1__.jsx\n        })\n      : (0,estree_util_to_js__WEBPACK_IMPORTED_MODULE_0__.toJs)(tree, {handlers: estree_util_to_js__WEBPACK_IMPORTED_MODULE_1__.jsx})\n\n    file.map = result.map\n\n    return result.value\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1keC1qcyttZHhAMy4wLjEvbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi9wbHVnaW4vcmVjbWEtc3RyaW5naWZ5LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0EsYUFBYSw4QkFBOEI7QUFDM0MsYUFBYSwrRUFBK0U7QUFDNUYsYUFBYSx1QkFBdUI7QUFDcEM7QUFDQSxhQUFhLHVDQUF1QztBQUNwRDs7QUFFMkM7O0FBRTNDO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNPO0FBQ1A7QUFDQTtBQUNBLDBCQUEwQixXQUFXO0FBQ3JDLFNBQVMsb0JBQW9COztBQUU3Qjs7QUFFQTtBQUNBLGFBQWEsU0FBUztBQUN0QjtBQUNBLGFBQWEsT0FBTztBQUNwQjtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsdURBQUk7QUFDWjtBQUNBO0FBQ0Esb0JBQW9CLGtEQUFHO0FBQ3ZCLFNBQVM7QUFDVCxRQUFRLHVEQUFJLFFBQVEsVUFBVSxrREFBRyxDQUFDOztBQUVsQzs7QUFFQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYm1fMjAyNC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbWR4LWpzK21keEAzLjAuMS9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3BsdWdpbi9yZWNtYS1zdHJpbmdpZnkuanM/ZWExMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2VzdHJlZS1qc3gnKS5Qcm9ncmFtfSBQcm9ncmFtXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCd1bmlmaWVkJykuUHJvY2Vzc29yPHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFByb2dyYW0sIHN0cmluZz59IFByb2Nlc3NvclxuICogQHR5cGVkZWYge2ltcG9ydCgndmZpbGUnKS5WRmlsZX0gVkZpbGVcbiAqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi9jb3JlLmpzJykuUHJvY2Vzc29yT3B0aW9uc30gUHJvY2Vzc29yT3B0aW9uc1xuICovXG5cbmltcG9ydCB7anN4LCB0b0pzfSBmcm9tICdlc3RyZWUtdXRpbC10by1qcydcblxuLyoqXG4gKiBTZXJpYWxpemUgYW4gZXNhc3QgKGVzdHJlZSkgcHJvZ3JhbSB0byBKYXZhU2NyaXB0LlxuICpcbiAqIEB0eXBlIHtpbXBvcnQoJ3VuaWZpZWQnKS5QbHVnaW48W1JlYWRvbmx5PFByb2Nlc3Nvck9wdGlvbnM+XSwgUHJvZ3JhbSwgc3RyaW5nPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlY21hU3RyaW5naWZ5KG9wdGlvbnMpIHtcbiAgLy8gQHRzLWV4cGVjdC1lcnJvcjogVFMgaXMgd3JvbmcgYWJvdXQgYHRoaXNgLlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgdW5pY29ybi9uby10aGlzLWFzc2lnbm1lbnRcbiAgY29uc3Qgc2VsZiA9IC8qKiBAdHlwZSB7UHJvY2Vzc29yfSAqLyAodGhpcylcbiAgY29uc3Qge1NvdXJjZU1hcEdlbmVyYXRvcn0gPSBvcHRpb25zXG5cbiAgc2VsZi5jb21waWxlciA9IGNvbXBpbGVyXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7UHJvZ3JhbX0gdHJlZVxuICAgKiAgIFRyZWUuXG4gICAqIEBwYXJhbSB7VkZpbGV9IGZpbGVcbiAgICogICBGaWxlLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKiAgIEphdmFTY3JpcHQuXG4gICAqL1xuICBmdW5jdGlvbiBjb21waWxlcih0cmVlLCBmaWxlKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gU291cmNlTWFwR2VuZXJhdG9yXG4gICAgICA/IHRvSnModHJlZSwge1xuICAgICAgICAgIFNvdXJjZU1hcEdlbmVyYXRvcixcbiAgICAgICAgICBmaWxlUGF0aDogZmlsZS5wYXRoIHx8ICd1bmtub3duLm1keCcsXG4gICAgICAgICAgaGFuZGxlcnM6IGpzeFxuICAgICAgICB9KVxuICAgICAgOiB0b0pzKHRyZWUsIHtoYW5kbGVyczoganN4fSlcblxuICAgIGZpbGUubWFwID0gcmVzdWx0Lm1hcFxuXG4gICAgcmV0dXJuIHJlc3VsdC52YWx1ZVxuICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/recma-stringify.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/rehype-recma.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/rehype-recma.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   rehypeRecma: () => (/* binding */ rehypeRecma)\n/* harmony export */ });\n/* harmony import */ var hast_util_to_estree__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hast-util-to-estree */ \"(rsc)/./node_modules/.pnpm/hast-util-to-estree@3.1.0/node_modules/hast-util-to-estree/lib/index.js\");\n/**\n * @typedef {import('estree-jsx').Program} Program\n *\n * @typedef {import('hast').Root} Root\n *\n * @typedef {import('../core.js').ProcessorOptions} ProcessorOptions\n */\n\n\n\n/**\n * A plugin to transform an HTML (hast) tree to a JS (estree).\n * `hast-util-to-estree` does all the work for us!\n *\n * @param {Readonly<ProcessorOptions>} options\n *   Configuration (optional).\n * @returns\n *   Transform.\n */\nfunction rehypeRecma(options) {\n  /**\n   * @param {Root} tree\n   *   Tree (hast).\n   * @returns {Program}\n   *   Program (esast).\n   */\n  return function (tree) {\n    return (0,hast_util_to_estree__WEBPACK_IMPORTED_MODULE_0__.toEstree)(tree, options)\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1keC1qcyttZHhAMy4wLjEvbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi9wbHVnaW4vcmVoeXBlLXJlY21hLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQSxhQUFhLDhCQUE4QjtBQUMzQztBQUNBLGFBQWEscUJBQXFCO0FBQ2xDO0FBQ0EsYUFBYSx1Q0FBdUM7QUFDcEQ7O0FBRTRDOztBQUU1QztBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsNEJBQTRCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLGFBQWEsTUFBTTtBQUNuQjtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQSxXQUFXLDZEQUFRO0FBQ25CO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYm1fMjAyNC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbWR4LWpzK21keEAzLjAuMS9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3BsdWdpbi9yZWh5cGUtcmVjbWEuanM/ZTZjYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2VzdHJlZS1qc3gnKS5Qcm9ncmFtfSBQcm9ncmFtXG4gKlxuICogQHR5cGVkZWYge2ltcG9ydCgnaGFzdCcpLlJvb3R9IFJvb3RcbiAqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi9jb3JlLmpzJykuUHJvY2Vzc29yT3B0aW9uc30gUHJvY2Vzc29yT3B0aW9uc1xuICovXG5cbmltcG9ydCB7dG9Fc3RyZWV9IGZyb20gJ2hhc3QtdXRpbC10by1lc3RyZWUnXG5cbi8qKlxuICogQSBwbHVnaW4gdG8gdHJhbnNmb3JtIGFuIEhUTUwgKGhhc3QpIHRyZWUgdG8gYSBKUyAoZXN0cmVlKS5cbiAqIGBoYXN0LXV0aWwtdG8tZXN0cmVlYCBkb2VzIGFsbCB0aGUgd29yayBmb3IgdXMhXG4gKlxuICogQHBhcmFtIHtSZWFkb25seTxQcm9jZXNzb3JPcHRpb25zPn0gb3B0aW9uc1xuICogICBDb25maWd1cmF0aW9uIChvcHRpb25hbCkuXG4gKiBAcmV0dXJuc1xuICogICBUcmFuc2Zvcm0uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZWh5cGVSZWNtYShvcHRpb25zKSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge1Jvb3R9IHRyZWVcbiAgICogICBUcmVlIChoYXN0KS5cbiAgICogQHJldHVybnMge1Byb2dyYW19XG4gICAqICAgUHJvZ3JhbSAoZXNhc3QpLlxuICAgKi9cbiAgcmV0dXJuIGZ1bmN0aW9uICh0cmVlKSB7XG4gICAgcmV0dXJuIHRvRXN0cmVlKHRyZWUsIG9wdGlvbnMpXG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/rehype-recma.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/rehype-remove-raw.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/rehype-remove-raw.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   rehypeRemoveRaw: () => (/* binding */ rehypeRemoveRaw)\n/* harmony export */ });\n/* harmony import */ var unist_util_visit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! unist-util-visit */ \"(rsc)/./node_modules/.pnpm/unist-util-visit@5.0.0/node_modules/unist-util-visit/lib/index.js\");\n/**\n * @typedef {import('hast').Root} Root\n */\n\n\n\n/**\n * A tiny plugin that removes raw HTML.\n *\n * This is needed if the format is `md` and `rehype-raw` was not used to parse\n * dangerous HTML into nodes.\n *\n * @returns\n *   Transform.\n */\nfunction rehypeRemoveRaw() {\n  /**\n   * @param {Root} tree\n   *   Tree.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  return function (tree) {\n    (0,unist_util_visit__WEBPACK_IMPORTED_MODULE_0__.visit)(tree, 'raw', function (_, index, parent) {\n      if (parent && typeof index === 'number') {\n        parent.children.splice(index, 1)\n        return index\n      }\n    })\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1keC1qcyttZHhAMy4wLjEvbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi9wbHVnaW4vcmVoeXBlLXJlbW92ZS1yYXcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBLGFBQWEscUJBQXFCO0FBQ2xDOztBQUVzQzs7QUFFdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLGFBQWEsTUFBTTtBQUNuQjtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQSxJQUFJLHVEQUFLO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2NibV8yMDI0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtZHgtanMrbWR4QDMuMC4xL25vZGVfbW9kdWxlcy9AbWR4LWpzL21keC9saWIvcGx1Z2luL3JlaHlwZS1yZW1vdmUtcmF3LmpzP2YwZmMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuUm9vdH0gUm9vdFxuICovXG5cbmltcG9ydCB7dmlzaXR9IGZyb20gJ3VuaXN0LXV0aWwtdmlzaXQnXG5cbi8qKlxuICogQSB0aW55IHBsdWdpbiB0aGF0IHJlbW92ZXMgcmF3IEhUTUwuXG4gKlxuICogVGhpcyBpcyBuZWVkZWQgaWYgdGhlIGZvcm1hdCBpcyBgbWRgIGFuZCBgcmVoeXBlLXJhd2Agd2FzIG5vdCB1c2VkIHRvIHBhcnNlXG4gKiBkYW5nZXJvdXMgSFRNTCBpbnRvIG5vZGVzLlxuICpcbiAqIEByZXR1cm5zXG4gKiAgIFRyYW5zZm9ybS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlaHlwZVJlbW92ZVJhdygpIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7Um9vdH0gdHJlZVxuICAgKiAgIFRyZWUuXG4gICAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gICAqICAgTm90aGluZy5cbiAgICovXG4gIHJldHVybiBmdW5jdGlvbiAodHJlZSkge1xuICAgIHZpc2l0KHRyZWUsICdyYXcnLCBmdW5jdGlvbiAoXywgaW5kZXgsIHBhcmVudCkge1xuICAgICAgaWYgKHBhcmVudCAmJiB0eXBlb2YgaW5kZXggPT09ICdudW1iZXInKSB7XG4gICAgICAgIHBhcmVudC5jaGlsZHJlbi5zcGxpY2UoaW5kZXgsIDEpXG4gICAgICAgIHJldHVybiBpbmRleFxuICAgICAgfVxuICAgIH0pXG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/rehype-remove-raw.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/remark-mark-and-unravel.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/remark-mark-and-unravel.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   remarkMarkAndUnravel: () => (/* binding */ remarkMarkAndUnravel)\n/* harmony export */ });\n/* harmony import */ var collapse_white_space__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! collapse-white-space */ \"(rsc)/./node_modules/.pnpm/collapse-white-space@2.1.0/node_modules/collapse-white-space/index.js\");\n/* harmony import */ var unist_util_visit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! unist-util-visit */ \"(rsc)/./node_modules/.pnpm/unist-util-visit@5.0.0/node_modules/unist-util-visit/lib/index.js\");\n/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').RootContent} RootContent\n */\n\n\n\n\n/**\n * A tiny plugin that unravels `<p><h1>x</h1></p>` but also\n * `<p><Component /></p>` (so it has no knowledge of “HTML”).\n *\n * It also marks JSX as being explicitly JSX, so when a user passes a `h1`\n * component, it is used for `# heading` but not for `<h1>heading</h1>`.\n *\n * @returns\n *   Transform.\n */\nfunction remarkMarkAndUnravel() {\n  /**\n   * @param {Root} tree\n   *   Tree.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  return function (tree) {\n    (0,unist_util_visit__WEBPACK_IMPORTED_MODULE_0__.visit)(tree, function (node, index, parent) {\n      let offset = -1\n      let all = true\n      let oneOrMore = false\n\n      if (parent && typeof index === 'number' && node.type === 'paragraph') {\n        const children = node.children\n\n        while (++offset < children.length) {\n          const child = children[offset]\n\n          if (\n            child.type === 'mdxJsxTextElement' ||\n            child.type === 'mdxTextExpression'\n          ) {\n            oneOrMore = true\n          } else if (\n            child.type === 'text' &&\n            (0,collapse_white_space__WEBPACK_IMPORTED_MODULE_1__.collapseWhiteSpace)(child.value, {style: 'html', trim: true}) === ''\n          ) {\n            // Empty.\n          } else {\n            all = false\n            break\n          }\n        }\n\n        if (all && oneOrMore) {\n          offset = -1\n\n          /** @type {Array<RootContent>} */\n          const newChildren = []\n\n          while (++offset < children.length) {\n            const child = children[offset]\n\n            if (child.type === 'mdxJsxTextElement') {\n              // @ts-expect-error: mutate because it is faster; content model is fine.\n              child.type = 'mdxJsxFlowElement'\n            }\n\n            if (child.type === 'mdxTextExpression') {\n              // @ts-expect-error: mutate because it is faster; content model is fine.\n              child.type = 'mdxFlowExpression'\n            }\n\n            if (\n              child.type === 'text' &&\n              /^[\\t\\r\\n ]+$/.test(String(child.value))\n            ) {\n              // Empty.\n            } else {\n              newChildren.push(child)\n            }\n          }\n\n          parent.children.splice(index, 1, ...newChildren)\n          return index\n        }\n      }\n\n      if (\n        node.type === 'mdxJsxFlowElement' ||\n        node.type === 'mdxJsxTextElement'\n      ) {\n        const data = node.data || (node.data = {})\n        data._mdxExplicitJsx = true\n      }\n    })\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1keC1qcyttZHhAMy4wLjEvbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi9wbHVnaW4vcmVtYXJrLW1hcmstYW5kLXVucmF2ZWwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQSxhQUFhLHNCQUFzQjtBQUNuQyxhQUFhLDZCQUE2QjtBQUMxQzs7QUFFdUQ7QUFDakI7O0FBRXRDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLGFBQWEsTUFBTTtBQUNuQjtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQSxJQUFJLHVEQUFLO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0EsWUFBWSx3RUFBa0IsZUFBZSwwQkFBMEI7QUFDdkU7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLHFCQUFxQixvQkFBb0I7QUFDekM7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLGdFQUFnRTtBQUNoRTtBQUNBOztBQUVBO0FBQ0EsZ0VBQWdFO0FBQ2hFO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQ7QUFDakQ7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2JtXzIwMjQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1keC1qcyttZHhAMy4wLjEvbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi9wbHVnaW4vcmVtYXJrLW1hcmstYW5kLXVucmF2ZWwuanM/YWU5OCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21kYXN0JykuUm9vdH0gUm9vdFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5Sb290Q29udGVudH0gUm9vdENvbnRlbnRcbiAqL1xuXG5pbXBvcnQge2NvbGxhcHNlV2hpdGVTcGFjZX0gZnJvbSAnY29sbGFwc2Utd2hpdGUtc3BhY2UnXG5pbXBvcnQge3Zpc2l0fSBmcm9tICd1bmlzdC11dGlsLXZpc2l0J1xuXG4vKipcbiAqIEEgdGlueSBwbHVnaW4gdGhhdCB1bnJhdmVscyBgPHA+PGgxPng8L2gxPjwvcD5gIGJ1dCBhbHNvXG4gKiBgPHA+PENvbXBvbmVudCAvPjwvcD5gIChzbyBpdCBoYXMgbm8ga25vd2xlZGdlIG9mIOKAnEhUTUzigJ0pLlxuICpcbiAqIEl0IGFsc28gbWFya3MgSlNYIGFzIGJlaW5nIGV4cGxpY2l0bHkgSlNYLCBzbyB3aGVuIGEgdXNlciBwYXNzZXMgYSBgaDFgXG4gKiBjb21wb25lbnQsIGl0IGlzIHVzZWQgZm9yIGAjIGhlYWRpbmdgIGJ1dCBub3QgZm9yIGA8aDE+aGVhZGluZzwvaDE+YC5cbiAqXG4gKiBAcmV0dXJuc1xuICogICBUcmFuc2Zvcm0uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW1hcmtNYXJrQW5kVW5yYXZlbCgpIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7Um9vdH0gdHJlZVxuICAgKiAgIFRyZWUuXG4gICAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gICAqICAgTm90aGluZy5cbiAgICovXG4gIHJldHVybiBmdW5jdGlvbiAodHJlZSkge1xuICAgIHZpc2l0KHRyZWUsIGZ1bmN0aW9uIChub2RlLCBpbmRleCwgcGFyZW50KSB7XG4gICAgICBsZXQgb2Zmc2V0ID0gLTFcbiAgICAgIGxldCBhbGwgPSB0cnVlXG4gICAgICBsZXQgb25lT3JNb3JlID0gZmFsc2VcblxuICAgICAgaWYgKHBhcmVudCAmJiB0eXBlb2YgaW5kZXggPT09ICdudW1iZXInICYmIG5vZGUudHlwZSA9PT0gJ3BhcmFncmFwaCcpIHtcbiAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuXG5cbiAgICAgICAgd2hpbGUgKCsrb2Zmc2V0IDwgY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgICAgY29uc3QgY2hpbGQgPSBjaGlsZHJlbltvZmZzZXRdXG5cbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBjaGlsZC50eXBlID09PSAnbWR4SnN4VGV4dEVsZW1lbnQnIHx8XG4gICAgICAgICAgICBjaGlsZC50eXBlID09PSAnbWR4VGV4dEV4cHJlc3Npb24nXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBvbmVPck1vcmUgPSB0cnVlXG4gICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgIGNoaWxkLnR5cGUgPT09ICd0ZXh0JyAmJlxuICAgICAgICAgICAgY29sbGFwc2VXaGl0ZVNwYWNlKGNoaWxkLnZhbHVlLCB7c3R5bGU6ICdodG1sJywgdHJpbTogdHJ1ZX0pID09PSAnJ1xuICAgICAgICAgICkge1xuICAgICAgICAgICAgLy8gRW1wdHkuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFsbCA9IGZhbHNlXG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhbGwgJiYgb25lT3JNb3JlKSB7XG4gICAgICAgICAgb2Zmc2V0ID0gLTFcblxuICAgICAgICAgIC8qKiBAdHlwZSB7QXJyYXk8Um9vdENvbnRlbnQ+fSAqL1xuICAgICAgICAgIGNvbnN0IG5ld0NoaWxkcmVuID0gW11cblxuICAgICAgICAgIHdoaWxlICgrK29mZnNldCA8IGNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgY2hpbGQgPSBjaGlsZHJlbltvZmZzZXRdXG5cbiAgICAgICAgICAgIGlmIChjaGlsZC50eXBlID09PSAnbWR4SnN4VGV4dEVsZW1lbnQnKSB7XG4gICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IG11dGF0ZSBiZWNhdXNlIGl0IGlzIGZhc3RlcjsgY29udGVudCBtb2RlbCBpcyBmaW5lLlxuICAgICAgICAgICAgICBjaGlsZC50eXBlID0gJ21keEpzeEZsb3dFbGVtZW50J1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY2hpbGQudHlwZSA9PT0gJ21keFRleHRFeHByZXNzaW9uJykge1xuICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiBtdXRhdGUgYmVjYXVzZSBpdCBpcyBmYXN0ZXI7IGNvbnRlbnQgbW9kZWwgaXMgZmluZS5cbiAgICAgICAgICAgICAgY2hpbGQudHlwZSA9ICdtZHhGbG93RXhwcmVzc2lvbidcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICBjaGlsZC50eXBlID09PSAndGV4dCcgJiZcbiAgICAgICAgICAgICAgL15bXFx0XFxyXFxuIF0rJC8udGVzdChTdHJpbmcoY2hpbGQudmFsdWUpKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIC8vIEVtcHR5LlxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbmV3Q2hpbGRyZW4ucHVzaChjaGlsZClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwYXJlbnQuY2hpbGRyZW4uc3BsaWNlKGluZGV4LCAxLCAuLi5uZXdDaGlsZHJlbilcbiAgICAgICAgICByZXR1cm4gaW5kZXhcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoXG4gICAgICAgIG5vZGUudHlwZSA9PT0gJ21keEpzeEZsb3dFbGVtZW50JyB8fFxuICAgICAgICBub2RlLnR5cGUgPT09ICdtZHhKc3hUZXh0RWxlbWVudCdcbiAgICAgICkge1xuICAgICAgICBjb25zdCBkYXRhID0gbm9kZS5kYXRhIHx8IChub2RlLmRhdGEgPSB7fSlcbiAgICAgICAgZGF0YS5fbWR4RXhwbGljaXRKc3ggPSB0cnVlXG4gICAgICB9XG4gICAgfSlcbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/remark-mark-and-unravel.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-create.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-create.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   create: () => (/* binding */ create)\n/* harmony export */ });\n/**\n * @typedef {import('estree-jsx').Node} Node\n */\n\n// Fix to show references to above types in VS Code.\n''\n\n/**\n * @param {Readonly<Node>} from\n *   Node to take from.\n * @param {Node} to\n *   Node to add to.\n * @returns {undefined}\n *   Nothing.\n */\nfunction create(from, to) {\n  /** @type {Array<keyof Node>} */\n  // @ts-expect-error: `start`, `end`, `comments` are custom Acorn fields.\n  const fields = ['start', 'end', 'loc', 'range', 'comments']\n  let index = -1\n\n  while (++index < fields.length) {\n    const field = fields[index]\n\n    if (field in from) {\n      // @ts-expect-error: assume they’re settable.\n      to[field] = from[field]\n    }\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1keC1qcyttZHhAMy4wLjEvbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi91dGlsL2VzdHJlZS11dGlsLWNyZWF0ZS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQSxhQUFhLDJCQUEyQjtBQUN4Qzs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsV0FBVyxnQkFBZ0I7QUFDM0I7QUFDQSxXQUFXLE1BQU07QUFDakI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNPO0FBQ1AsYUFBYSxtQkFBbUI7QUFDaEM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2JtXzIwMjQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1keC1qcyttZHhAMy4wLjEvbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi91dGlsL2VzdHJlZS11dGlsLWNyZWF0ZS5qcz84MDFjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnZXN0cmVlLWpzeCcpLk5vZGV9IE5vZGVcbiAqL1xuXG4vLyBGaXggdG8gc2hvdyByZWZlcmVuY2VzIHRvIGFib3ZlIHR5cGVzIGluIFZTIENvZGUuXG4nJ1xuXG4vKipcbiAqIEBwYXJhbSB7UmVhZG9ubHk8Tm9kZT59IGZyb21cbiAqICAgTm9kZSB0byB0YWtlIGZyb20uXG4gKiBAcGFyYW0ge05vZGV9IHRvXG4gKiAgIE5vZGUgdG8gYWRkIHRvLlxuICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAqICAgTm90aGluZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZShmcm9tLCB0bykge1xuICAvKiogQHR5cGUge0FycmF5PGtleW9mIE5vZGU+fSAqL1xuICAvLyBAdHMtZXhwZWN0LWVycm9yOiBgc3RhcnRgLCBgZW5kYCwgYGNvbW1lbnRzYCBhcmUgY3VzdG9tIEFjb3JuIGZpZWxkcy5cbiAgY29uc3QgZmllbGRzID0gWydzdGFydCcsICdlbmQnLCAnbG9jJywgJ3JhbmdlJywgJ2NvbW1lbnRzJ11cbiAgbGV0IGluZGV4ID0gLTFcblxuICB3aGlsZSAoKytpbmRleCA8IGZpZWxkcy5sZW5ndGgpIHtcbiAgICBjb25zdCBmaWVsZCA9IGZpZWxkc1tpbmRleF1cblxuICAgIGlmIChmaWVsZCBpbiBmcm9tKSB7XG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiBhc3N1bWUgdGhleeKAmXJlIHNldHRhYmxlLlxuICAgICAgdG9bZmllbGRdID0gZnJvbVtmaWVsZF1cbiAgICB9XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-create.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-declaration-to-expression.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-declaration-to-expression.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   declarationToExpression: () => (/* binding */ declarationToExpression)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(rsc)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/**\n * @typedef {import('estree-jsx').Declaration} Declaration\n * @typedef {import('estree-jsx').Expression} Expression\n * @typedef {import('estree-jsx').MaybeNamedClassDeclaration} MaybeNamedClassDeclaration\n * @typedef {import('estree-jsx').MaybeNamedFunctionDeclaration} MaybeNamedFunctionDeclaration\n */\n\n\n\n/**\n * Turn a declaration into an expression.\n *\n * Doesn’t work for variable declarations, but that’s fine for our use case\n * because currently we’re using this utility for export default declarations,\n * which can’t contain variable declarations.\n *\n * @param {Readonly<Declaration | MaybeNamedClassDeclaration | MaybeNamedFunctionDeclaration>} declaration\n *   Declaration.\n * @returns {Expression}\n *   Expression.\n */\nfunction declarationToExpression(declaration) {\n  if (declaration.type === 'FunctionDeclaration') {\n    return {...declaration, type: 'FunctionExpression'}\n  }\n\n  // This is currently an internal utility so the next shouldn’t happen or a\n  // maintainer is making a mistake.\n  (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(declaration.type === 'ClassDeclaration', 'unexpected node type')\n  return {...declaration, type: 'ClassExpression'}\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1keC1qcyttZHhAMy4wLjEvbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi91dGlsL2VzdHJlZS11dGlsLWRlY2xhcmF0aW9uLXRvLWV4cHJlc3Npb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBLGFBQWEsa0NBQWtDO0FBQy9DLGFBQWEsaUNBQWlDO0FBQzlDLGFBQWEsaURBQWlEO0FBQzlELGFBQWEsb0RBQW9EO0FBQ2pFOztBQUVtQzs7QUFFbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLG9GQUFvRjtBQUMvRjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ087QUFDUDtBQUNBLFlBQVk7QUFDWjs7QUFFQTtBQUNBO0FBQ0EsRUFBRSwwQ0FBTTtBQUNSLFVBQVU7QUFDViIsInNvdXJjZXMiOlsid2VicGFjazovL2NibV8yMDI0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtZHgtanMrbWR4QDMuMC4xL25vZGVfbW9kdWxlcy9AbWR4LWpzL21keC9saWIvdXRpbC9lc3RyZWUtdXRpbC1kZWNsYXJhdGlvbi10by1leHByZXNzaW9uLmpzP2YyZDUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdlc3RyZWUtanN4JykuRGVjbGFyYXRpb259IERlY2xhcmF0aW9uXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdlc3RyZWUtanN4JykuRXhwcmVzc2lvbn0gRXhwcmVzc2lvblxuICogQHR5cGVkZWYge2ltcG9ydCgnZXN0cmVlLWpzeCcpLk1heWJlTmFtZWRDbGFzc0RlY2xhcmF0aW9ufSBNYXliZU5hbWVkQ2xhc3NEZWNsYXJhdGlvblxuICogQHR5cGVkZWYge2ltcG9ydCgnZXN0cmVlLWpzeCcpLk1heWJlTmFtZWRGdW5jdGlvbkRlY2xhcmF0aW9ufSBNYXliZU5hbWVkRnVuY3Rpb25EZWNsYXJhdGlvblxuICovXG5cbmltcG9ydCB7b2sgYXMgYXNzZXJ0fSBmcm9tICdkZXZsb3AnXG5cbi8qKlxuICogVHVybiBhIGRlY2xhcmF0aW9uIGludG8gYW4gZXhwcmVzc2lvbi5cbiAqXG4gKiBEb2VzbuKAmXQgd29yayBmb3IgdmFyaWFibGUgZGVjbGFyYXRpb25zLCBidXQgdGhhdOKAmXMgZmluZSBmb3Igb3VyIHVzZSBjYXNlXG4gKiBiZWNhdXNlIGN1cnJlbnRseSB3ZeKAmXJlIHVzaW5nIHRoaXMgdXRpbGl0eSBmb3IgZXhwb3J0IGRlZmF1bHQgZGVjbGFyYXRpb25zLFxuICogd2hpY2ggY2Fu4oCZdCBjb250YWluIHZhcmlhYmxlIGRlY2xhcmF0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5PERlY2xhcmF0aW9uIHwgTWF5YmVOYW1lZENsYXNzRGVjbGFyYXRpb24gfCBNYXliZU5hbWVkRnVuY3Rpb25EZWNsYXJhdGlvbj59IGRlY2xhcmF0aW9uXG4gKiAgIERlY2xhcmF0aW9uLlxuICogQHJldHVybnMge0V4cHJlc3Npb259XG4gKiAgIEV4cHJlc3Npb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWNsYXJhdGlvblRvRXhwcmVzc2lvbihkZWNsYXJhdGlvbikge1xuICBpZiAoZGVjbGFyYXRpb24udHlwZSA9PT0gJ0Z1bmN0aW9uRGVjbGFyYXRpb24nKSB7XG4gICAgcmV0dXJuIHsuLi5kZWNsYXJhdGlvbiwgdHlwZTogJ0Z1bmN0aW9uRXhwcmVzc2lvbid9XG4gIH1cblxuICAvLyBUaGlzIGlzIGN1cnJlbnRseSBhbiBpbnRlcm5hbCB1dGlsaXR5IHNvIHRoZSBuZXh0IHNob3VsZG7igJl0IGhhcHBlbiBvciBhXG4gIC8vIG1haW50YWluZXIgaXMgbWFraW5nIGEgbWlzdGFrZS5cbiAgYXNzZXJ0KGRlY2xhcmF0aW9uLnR5cGUgPT09ICdDbGFzc0RlY2xhcmF0aW9uJywgJ3VuZXhwZWN0ZWQgbm9kZSB0eXBlJylcbiAgcmV0dXJuIHsuLi5kZWNsYXJhdGlvbiwgdHlwZTogJ0NsYXNzRXhwcmVzc2lvbid9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-declaration-to-expression.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-is-declaration.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-is-declaration.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isDeclaration: () => (/* binding */ isDeclaration)\n/* harmony export */ });\n/**\n * @typedef {import('estree-jsx').Declaration} Declaration\n * @typedef {import('estree-jsx').MaybeNamedClassDeclaration} MaybeNamedClassDeclaration\n * @typedef {import('estree-jsx').MaybeNamedFunctionDeclaration} MaybeNamedFunctionDeclaration\n * @typedef {import('estree-jsx').Node} Node\n */\n\n// Fix to show references to above types in VS Code.\n''\n\n/**\n * Check if `node` is a declaration.\n *\n * @param {Readonly<MaybeNamedClassDeclaration | MaybeNamedFunctionDeclaration | Node>} node\n *   Node to check.\n * @returns {node is Declaration | MaybeNamedClassDeclaration | MaybeNamedFunctionDeclaration}\n *   Whether `node` is a declaration.\n */\nfunction isDeclaration(node) {\n  return Boolean(\n    node.type === 'FunctionDeclaration' ||\n      node.type === 'ClassDeclaration' ||\n      node.type === 'VariableDeclaration'\n  )\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1keC1qcyttZHhAMy4wLjEvbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi91dGlsL2VzdHJlZS11dGlsLWlzLWRlY2xhcmF0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBLGFBQWEsa0NBQWtDO0FBQy9DLGFBQWEsaURBQWlEO0FBQzlELGFBQWEsb0RBQW9EO0FBQ2pFLGFBQWEsMkJBQTJCO0FBQ3hDOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyw2RUFBNkU7QUFDeEY7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2JtXzIwMjQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1keC1qcyttZHhAMy4wLjEvbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi91dGlsL2VzdHJlZS11dGlsLWlzLWRlY2xhcmF0aW9uLmpzP2Q3Y2YiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdlc3RyZWUtanN4JykuRGVjbGFyYXRpb259IERlY2xhcmF0aW9uXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdlc3RyZWUtanN4JykuTWF5YmVOYW1lZENsYXNzRGVjbGFyYXRpb259IE1heWJlTmFtZWRDbGFzc0RlY2xhcmF0aW9uXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdlc3RyZWUtanN4JykuTWF5YmVOYW1lZEZ1bmN0aW9uRGVjbGFyYXRpb259IE1heWJlTmFtZWRGdW5jdGlvbkRlY2xhcmF0aW9uXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdlc3RyZWUtanN4JykuTm9kZX0gTm9kZVxuICovXG5cbi8vIEZpeCB0byBzaG93IHJlZmVyZW5jZXMgdG8gYWJvdmUgdHlwZXMgaW4gVlMgQ29kZS5cbicnXG5cbi8qKlxuICogQ2hlY2sgaWYgYG5vZGVgIGlzIGEgZGVjbGFyYXRpb24uXG4gKlxuICogQHBhcmFtIHtSZWFkb25seTxNYXliZU5hbWVkQ2xhc3NEZWNsYXJhdGlvbiB8IE1heWJlTmFtZWRGdW5jdGlvbkRlY2xhcmF0aW9uIHwgTm9kZT59IG5vZGVcbiAqICAgTm9kZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtub2RlIGlzIERlY2xhcmF0aW9uIHwgTWF5YmVOYW1lZENsYXNzRGVjbGFyYXRpb24gfCBNYXliZU5hbWVkRnVuY3Rpb25EZWNsYXJhdGlvbn1cbiAqICAgV2hldGhlciBgbm9kZWAgaXMgYSBkZWNsYXJhdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRGVjbGFyYXRpb24obm9kZSkge1xuICByZXR1cm4gQm9vbGVhbihcbiAgICBub2RlLnR5cGUgPT09ICdGdW5jdGlvbkRlY2xhcmF0aW9uJyB8fFxuICAgICAgbm9kZS50eXBlID09PSAnQ2xhc3NEZWNsYXJhdGlvbicgfHxcbiAgICAgIG5vZGUudHlwZSA9PT0gJ1ZhcmlhYmxlRGVjbGFyYXRpb24nXG4gIClcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-is-declaration.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-specifiers-to-declarations.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-specifiers-to-declarations.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   specifiersToDeclarations: () => (/* binding */ specifiersToDeclarations)\n/* harmony export */ });\n/* harmony import */ var _estree_util_create_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./estree-util-create.js */ \"(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-create.js\");\n/**\n * @typedef {import('estree-jsx').AssignmentProperty} AssignmentProperty\n * @typedef {import('estree-jsx').ExportSpecifier} ExportSpecifier\n * @typedef {import('estree-jsx').Expression} Expression\n * @typedef {import('estree-jsx').Identifier} Identifier\n * @typedef {import('estree-jsx').ImportDefaultSpecifier} ImportDefaultSpecifier\n * @typedef {import('estree-jsx').ImportNamespaceSpecifier} ImportNamespaceSpecifier\n * @typedef {import('estree-jsx').ImportSpecifier} ImportSpecifier\n * @typedef {import('estree-jsx').VariableDeclarator} VariableDeclarator\n */\n\n\n\n/**\n * @param {ReadonlyArray<Readonly<ExportSpecifier> | Readonly<ImportDefaultSpecifier> | Readonly<ImportNamespaceSpecifier> | Readonly<ImportSpecifier>>} specifiers\n *   Specifiers.\n * @param {Readonly<Expression>} init\n *   Initializer.\n * @returns {Array<VariableDeclarator>}\n *   Declarations.\n */\nfunction specifiersToDeclarations(specifiers, init) {\n  let index = -1\n  /** @type {Array<VariableDeclarator>} */\n  const declarations = []\n  /** @type {Array<ExportSpecifier | ImportDefaultSpecifier | ImportSpecifier>} */\n  const otherSpecifiers = []\n  // Can only be one according to JS syntax.\n  /** @type {ImportNamespaceSpecifier | undefined} */\n  let importNamespaceSpecifier\n\n  while (++index < specifiers.length) {\n    const specifier = specifiers[index]\n\n    if (specifier.type === 'ImportNamespaceSpecifier') {\n      importNamespaceSpecifier = specifier\n    } else {\n      otherSpecifiers.push(specifier)\n    }\n  }\n\n  if (importNamespaceSpecifier) {\n    /** @type {VariableDeclarator} */\n    const declarator = {\n      type: 'VariableDeclarator',\n      id: importNamespaceSpecifier.local,\n      init\n    }\n    ;(0,_estree_util_create_js__WEBPACK_IMPORTED_MODULE_0__.create)(importNamespaceSpecifier, declarator)\n    declarations.push(declarator)\n  }\n\n  declarations.push({\n    type: 'VariableDeclarator',\n    id: {\n      type: 'ObjectPattern',\n      properties: otherSpecifiers.map(function (specifier) {\n        /** @type {Identifier} */\n        let key =\n          specifier.type === 'ImportSpecifier'\n            ? specifier.imported\n            : specifier.type === 'ExportSpecifier'\n              ? specifier.exported\n              : {type: 'Identifier', name: 'default'}\n        let value = specifier.local\n\n        // Switch them around if we’re exporting.\n        if (specifier.type === 'ExportSpecifier') {\n          value = key\n          key = specifier.local\n        }\n\n        /** @type {AssignmentProperty} */\n        const property = {\n          type: 'Property',\n          kind: 'init',\n          shorthand: key.name === value.name,\n          method: false,\n          computed: false,\n          key,\n          value\n        }\n        ;(0,_estree_util_create_js__WEBPACK_IMPORTED_MODULE_0__.create)(specifier, property)\n        return property\n      })\n    },\n    init: importNamespaceSpecifier\n      ? {type: 'Identifier', name: importNamespaceSpecifier.local.name}\n      : init\n  })\n\n  return declarations\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1keC1qcyttZHhAMy4wLjEvbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi91dGlsL2VzdHJlZS11dGlsLXNwZWNpZmllcnMtdG8tZGVjbGFyYXRpb25zLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQSxhQUFhLHlDQUF5QztBQUN0RCxhQUFhLHNDQUFzQztBQUNuRCxhQUFhLGlDQUFpQztBQUM5QyxhQUFhLGlDQUFpQztBQUM5QyxhQUFhLDZDQUE2QztBQUMxRCxhQUFhLCtDQUErQztBQUM1RCxhQUFhLHNDQUFzQztBQUNuRCxhQUFhLHlDQUF5QztBQUN0RDs7QUFFOEM7O0FBRTlDO0FBQ0EsV0FBVyw4SUFBOEk7QUFDeko7QUFDQSxXQUFXLHNCQUFzQjtBQUNqQztBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ087QUFDUDtBQUNBLGFBQWEsMkJBQTJCO0FBQ3hDO0FBQ0EsYUFBYSxtRUFBbUU7QUFDaEY7QUFDQTtBQUNBLGFBQWEsc0NBQXNDO0FBQ25EOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxlQUFlLG9CQUFvQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSwrREFBTTtBQUNWO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixZQUFZO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxtQkFBbUIsb0JBQW9CO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsK0RBQU07QUFDZDtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxHQUFHOztBQUVIO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYm1fMjAyNC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbWR4LWpzK21keEAzLjAuMS9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3V0aWwvZXN0cmVlLXV0aWwtc3BlY2lmaWVycy10by1kZWNsYXJhdGlvbnMuanM/YWIzMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2VzdHJlZS1qc3gnKS5Bc3NpZ25tZW50UHJvcGVydHl9IEFzc2lnbm1lbnRQcm9wZXJ0eVxuICogQHR5cGVkZWYge2ltcG9ydCgnZXN0cmVlLWpzeCcpLkV4cG9ydFNwZWNpZmllcn0gRXhwb3J0U3BlY2lmaWVyXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdlc3RyZWUtanN4JykuRXhwcmVzc2lvbn0gRXhwcmVzc2lvblxuICogQHR5cGVkZWYge2ltcG9ydCgnZXN0cmVlLWpzeCcpLklkZW50aWZpZXJ9IElkZW50aWZpZXJcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2VzdHJlZS1qc3gnKS5JbXBvcnREZWZhdWx0U3BlY2lmaWVyfSBJbXBvcnREZWZhdWx0U3BlY2lmaWVyXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdlc3RyZWUtanN4JykuSW1wb3J0TmFtZXNwYWNlU3BlY2lmaWVyfSBJbXBvcnROYW1lc3BhY2VTcGVjaWZpZXJcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2VzdHJlZS1qc3gnKS5JbXBvcnRTcGVjaWZpZXJ9IEltcG9ydFNwZWNpZmllclxuICogQHR5cGVkZWYge2ltcG9ydCgnZXN0cmVlLWpzeCcpLlZhcmlhYmxlRGVjbGFyYXRvcn0gVmFyaWFibGVEZWNsYXJhdG9yXG4gKi9cblxuaW1wb3J0IHtjcmVhdGV9IGZyb20gJy4vZXN0cmVlLXV0aWwtY3JlYXRlLmpzJ1xuXG4vKipcbiAqIEBwYXJhbSB7UmVhZG9ubHlBcnJheTxSZWFkb25seTxFeHBvcnRTcGVjaWZpZXI+IHwgUmVhZG9ubHk8SW1wb3J0RGVmYXVsdFNwZWNpZmllcj4gfCBSZWFkb25seTxJbXBvcnROYW1lc3BhY2VTcGVjaWZpZXI+IHwgUmVhZG9ubHk8SW1wb3J0U3BlY2lmaWVyPj59IHNwZWNpZmllcnNcbiAqICAgU3BlY2lmaWVycy5cbiAqIEBwYXJhbSB7UmVhZG9ubHk8RXhwcmVzc2lvbj59IGluaXRcbiAqICAgSW5pdGlhbGl6ZXIuXG4gKiBAcmV0dXJucyB7QXJyYXk8VmFyaWFibGVEZWNsYXJhdG9yPn1cbiAqICAgRGVjbGFyYXRpb25zLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc3BlY2lmaWVyc1RvRGVjbGFyYXRpb25zKHNwZWNpZmllcnMsIGluaXQpIHtcbiAgbGV0IGluZGV4ID0gLTFcbiAgLyoqIEB0eXBlIHtBcnJheTxWYXJpYWJsZURlY2xhcmF0b3I+fSAqL1xuICBjb25zdCBkZWNsYXJhdGlvbnMgPSBbXVxuICAvKiogQHR5cGUge0FycmF5PEV4cG9ydFNwZWNpZmllciB8IEltcG9ydERlZmF1bHRTcGVjaWZpZXIgfCBJbXBvcnRTcGVjaWZpZXI+fSAqL1xuICBjb25zdCBvdGhlclNwZWNpZmllcnMgPSBbXVxuICAvLyBDYW4gb25seSBiZSBvbmUgYWNjb3JkaW5nIHRvIEpTIHN5bnRheC5cbiAgLyoqIEB0eXBlIHtJbXBvcnROYW1lc3BhY2VTcGVjaWZpZXIgfCB1bmRlZmluZWR9ICovXG4gIGxldCBpbXBvcnROYW1lc3BhY2VTcGVjaWZpZXJcblxuICB3aGlsZSAoKytpbmRleCA8IHNwZWNpZmllcnMubGVuZ3RoKSB7XG4gICAgY29uc3Qgc3BlY2lmaWVyID0gc3BlY2lmaWVyc1tpbmRleF1cblxuICAgIGlmIChzcGVjaWZpZXIudHlwZSA9PT0gJ0ltcG9ydE5hbWVzcGFjZVNwZWNpZmllcicpIHtcbiAgICAgIGltcG9ydE5hbWVzcGFjZVNwZWNpZmllciA9IHNwZWNpZmllclxuICAgIH0gZWxzZSB7XG4gICAgICBvdGhlclNwZWNpZmllcnMucHVzaChzcGVjaWZpZXIpXG4gICAgfVxuICB9XG5cbiAgaWYgKGltcG9ydE5hbWVzcGFjZVNwZWNpZmllcikge1xuICAgIC8qKiBAdHlwZSB7VmFyaWFibGVEZWNsYXJhdG9yfSAqL1xuICAgIGNvbnN0IGRlY2xhcmF0b3IgPSB7XG4gICAgICB0eXBlOiAnVmFyaWFibGVEZWNsYXJhdG9yJyxcbiAgICAgIGlkOiBpbXBvcnROYW1lc3BhY2VTcGVjaWZpZXIubG9jYWwsXG4gICAgICBpbml0XG4gICAgfVxuICAgIGNyZWF0ZShpbXBvcnROYW1lc3BhY2VTcGVjaWZpZXIsIGRlY2xhcmF0b3IpXG4gICAgZGVjbGFyYXRpb25zLnB1c2goZGVjbGFyYXRvcilcbiAgfVxuXG4gIGRlY2xhcmF0aW9ucy5wdXNoKHtcbiAgICB0eXBlOiAnVmFyaWFibGVEZWNsYXJhdG9yJyxcbiAgICBpZDoge1xuICAgICAgdHlwZTogJ09iamVjdFBhdHRlcm4nLFxuICAgICAgcHJvcGVydGllczogb3RoZXJTcGVjaWZpZXJzLm1hcChmdW5jdGlvbiAoc3BlY2lmaWVyKSB7XG4gICAgICAgIC8qKiBAdHlwZSB7SWRlbnRpZmllcn0gKi9cbiAgICAgICAgbGV0IGtleSA9XG4gICAgICAgICAgc3BlY2lmaWVyLnR5cGUgPT09ICdJbXBvcnRTcGVjaWZpZXInXG4gICAgICAgICAgICA/IHNwZWNpZmllci5pbXBvcnRlZFxuICAgICAgICAgICAgOiBzcGVjaWZpZXIudHlwZSA9PT0gJ0V4cG9ydFNwZWNpZmllcidcbiAgICAgICAgICAgICAgPyBzcGVjaWZpZXIuZXhwb3J0ZWRcbiAgICAgICAgICAgICAgOiB7dHlwZTogJ0lkZW50aWZpZXInLCBuYW1lOiAnZGVmYXVsdCd9XG4gICAgICAgIGxldCB2YWx1ZSA9IHNwZWNpZmllci5sb2NhbFxuXG4gICAgICAgIC8vIFN3aXRjaCB0aGVtIGFyb3VuZCBpZiB3ZeKAmXJlIGV4cG9ydGluZy5cbiAgICAgICAgaWYgKHNwZWNpZmllci50eXBlID09PSAnRXhwb3J0U3BlY2lmaWVyJykge1xuICAgICAgICAgIHZhbHVlID0ga2V5XG4gICAgICAgICAga2V5ID0gc3BlY2lmaWVyLmxvY2FsXG4gICAgICAgIH1cblxuICAgICAgICAvKiogQHR5cGUge0Fzc2lnbm1lbnRQcm9wZXJ0eX0gKi9cbiAgICAgICAgY29uc3QgcHJvcGVydHkgPSB7XG4gICAgICAgICAgdHlwZTogJ1Byb3BlcnR5JyxcbiAgICAgICAgICBraW5kOiAnaW5pdCcsXG4gICAgICAgICAgc2hvcnRoYW5kOiBrZXkubmFtZSA9PT0gdmFsdWUubmFtZSxcbiAgICAgICAgICBtZXRob2Q6IGZhbHNlLFxuICAgICAgICAgIGNvbXB1dGVkOiBmYWxzZSxcbiAgICAgICAgICBrZXksXG4gICAgICAgICAgdmFsdWVcbiAgICAgICAgfVxuICAgICAgICBjcmVhdGUoc3BlY2lmaWVyLCBwcm9wZXJ0eSlcbiAgICAgICAgcmV0dXJuIHByb3BlcnR5XG4gICAgICB9KVxuICAgIH0sXG4gICAgaW5pdDogaW1wb3J0TmFtZXNwYWNlU3BlY2lmaWVyXG4gICAgICA/IHt0eXBlOiAnSWRlbnRpZmllcicsIG5hbWU6IGltcG9ydE5hbWVzcGFjZVNwZWNpZmllci5sb2NhbC5uYW1lfVxuICAgICAgOiBpbml0XG4gIH0pXG5cbiAgcmV0dXJuIGRlY2xhcmF0aW9uc1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-specifiers-to-declarations.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-to-binary-addition.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-to-binary-addition.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toBinaryAddition: () => (/* binding */ toBinaryAddition)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(rsc)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/**\n * @typedef {import('estree-jsx').Expression} Expression\n */\n\n\n\n/**\n * @param {ReadonlyArray<Expression>} expressions\n *   Expressions.\n * @returns {Expression}\n *   Addition.\n */\nfunction toBinaryAddition(expressions) {\n  let index = -1\n  /** @type {Expression | undefined} */\n  let left\n\n  while (++index < expressions.length) {\n    const right = expressions[index]\n    left = left ? {type: 'BinaryExpression', left, operator: '+', right} : right\n  }\n\n  (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(left, 'expected non-empty `expressions` to be passed')\n  return left\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1keC1qcyttZHhAMy4wLjEvbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi91dGlsL2VzdHJlZS11dGlsLXRvLWJpbmFyeS1hZGRpdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0EsYUFBYSxpQ0FBaUM7QUFDOUM7O0FBRW1DOztBQUVuQztBQUNBLFdBQVcsMkJBQTJCO0FBQ3RDO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDTztBQUNQO0FBQ0EsYUFBYSx3QkFBd0I7QUFDckM7O0FBRUE7QUFDQTtBQUNBLG1CQUFtQixzREFBc0Q7QUFDekU7O0FBRUEsRUFBRSwwQ0FBTTtBQUNSO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYm1fMjAyNC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbWR4LWpzK21keEAzLjAuMS9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3V0aWwvZXN0cmVlLXV0aWwtdG8tYmluYXJ5LWFkZGl0aW9uLmpzPzg5NGYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdlc3RyZWUtanN4JykuRXhwcmVzc2lvbn0gRXhwcmVzc2lvblxuICovXG5cbmltcG9ydCB7b2sgYXMgYXNzZXJ0fSBmcm9tICdkZXZsb3AnXG5cbi8qKlxuICogQHBhcmFtIHtSZWFkb25seUFycmF5PEV4cHJlc3Npb24+fSBleHByZXNzaW9uc1xuICogICBFeHByZXNzaW9ucy5cbiAqIEByZXR1cm5zIHtFeHByZXNzaW9ufVxuICogICBBZGRpdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvQmluYXJ5QWRkaXRpb24oZXhwcmVzc2lvbnMpIHtcbiAgbGV0IGluZGV4ID0gLTFcbiAgLyoqIEB0eXBlIHtFeHByZXNzaW9uIHwgdW5kZWZpbmVkfSAqL1xuICBsZXQgbGVmdFxuXG4gIHdoaWxlICgrK2luZGV4IDwgZXhwcmVzc2lvbnMubGVuZ3RoKSB7XG4gICAgY29uc3QgcmlnaHQgPSBleHByZXNzaW9uc1tpbmRleF1cbiAgICBsZWZ0ID0gbGVmdCA/IHt0eXBlOiAnQmluYXJ5RXhwcmVzc2lvbicsIGxlZnQsIG9wZXJhdG9yOiAnKycsIHJpZ2h0fSA6IHJpZ2h0XG4gIH1cblxuICBhc3NlcnQobGVmdCwgJ2V4cGVjdGVkIG5vbi1lbXB0eSBgZXhwcmVzc2lvbnNgIHRvIGJlIHBhc3NlZCcpXG4gIHJldHVybiBsZWZ0XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-to-binary-addition.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-to-id-or-member-expression.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-to-id-or-member-expression.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toIdOrMemberExpression: () => (/* binding */ toIdOrMemberExpression),\n/* harmony export */   toJsxIdOrMemberExpression: () => (/* binding */ toJsxIdOrMemberExpression)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! devlop */ \"(rsc)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! estree-util-is-identifier-name */ \"(rsc)/./node_modules/.pnpm/estree-util-is-identifier-name@3.0.0/node_modules/estree-util-is-identifier-name/lib/index.js\");\n/**\n * @typedef {import('estree-jsx').Identifier} Identifier\n * @typedef {import('estree-jsx').JSXIdentifier} JSXIdentifier\n * @typedef {import('estree-jsx').JSXMemberExpression} JSXMemberExpression\n * @typedef {import('estree-jsx').Literal} Literal\n * @typedef {import('estree-jsx').MemberExpression} MemberExpression\n */\n\n\n\n\n/**\n * @param {ReadonlyArray<number | string>} ids\n *   Identifiers (example: `['list', 0]).\n * @returns {Identifier | MemberExpression}\n *   Identifier or member expression.\n */\nfunction toIdOrMemberExpression(ids) {\n  let index = -1\n  /** @type {Identifier | Literal | MemberExpression | undefined} */\n  let object\n\n  while (++index < ids.length) {\n    const name = ids[index]\n    /** @type {Identifier | Literal} */\n    const id =\n      typeof name === 'string' && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_0__.name)(name)\n        ? {type: 'Identifier', name}\n        : {type: 'Literal', value: name}\n    object = object\n      ? {\n          type: 'MemberExpression',\n          object,\n          property: id,\n          computed: id.type === 'Literal',\n          optional: false\n        }\n      : id\n  }\n\n  (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(object, 'expected non-empty `ids` to be passed')\n  ;(0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(object.type !== 'Literal', 'expected identifier as left-most value')\n  return object\n}\n\n/**\n * @param {ReadonlyArray<number | string>} ids\n *   Identifiers (example: `['list', 0]).\n * @returns {JSXIdentifier | JSXMemberExpression}\n *   Identifier or member expression.\n */\nfunction toJsxIdOrMemberExpression(ids) {\n  let index = -1\n  /** @type {JSXIdentifier | JSXMemberExpression | undefined} */\n  let object\n\n  while (++index < ids.length) {\n    const name = ids[index]\n    ;(0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(\n      typeof name === 'string' && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_0__.name)(name, {jsx: true}),\n      'expected valid jsx identifier, not `' + name + '`'\n    )\n\n    /** @type {JSXIdentifier} */\n    const id = {type: 'JSXIdentifier', name}\n    object = object ? {type: 'JSXMemberExpression', object, property: id} : id\n  }\n\n  (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(object, 'expected non-empty `ids` to be passed')\n  return object\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1keC1qcyttZHhAMy4wLjEvbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi91dGlsL2VzdHJlZS11dGlsLXRvLWlkLW9yLW1lbWJlci1leHByZXNzaW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBLGFBQWEsaUNBQWlDO0FBQzlDLGFBQWEsb0NBQW9DO0FBQ2pELGFBQWEsMENBQTBDO0FBQ3ZELGFBQWEsOEJBQThCO0FBQzNDLGFBQWEsdUNBQXVDO0FBQ3BEOztBQUVtQztBQUNvQzs7QUFFdkU7QUFDQSxXQUFXLGdDQUFnQztBQUMzQztBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ087QUFDUDtBQUNBLGFBQWEscURBQXFEO0FBQ2xFOztBQUVBO0FBQ0E7QUFDQSxlQUFlLHNCQUFzQjtBQUNyQztBQUNBLGtDQUFrQyxvRUFBZ0I7QUFDbEQsV0FBVztBQUNYLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxFQUFFLDBDQUFNO0FBQ1IsRUFBRSwyQ0FBTTtBQUNSO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLGdDQUFnQztBQUMzQztBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ087QUFDUDtBQUNBLGFBQWEsaURBQWlEO0FBQzlEOztBQUVBO0FBQ0E7QUFDQSxJQUFJLDJDQUFNO0FBQ1Ysa0NBQWtDLG9FQUFnQixRQUFRLFVBQVU7QUFDcEU7QUFDQTs7QUFFQSxlQUFlLGVBQWU7QUFDOUIsZ0JBQWdCO0FBQ2hCLHVCQUF1QixtREFBbUQ7QUFDMUU7O0FBRUEsRUFBRSwwQ0FBTTtBQUNSO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYm1fMjAyNC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbWR4LWpzK21keEAzLjAuMS9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3V0aWwvZXN0cmVlLXV0aWwtdG8taWQtb3ItbWVtYmVyLWV4cHJlc3Npb24uanM/ODcwNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2VzdHJlZS1qc3gnKS5JZGVudGlmaWVyfSBJZGVudGlmaWVyXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdlc3RyZWUtanN4JykuSlNYSWRlbnRpZmllcn0gSlNYSWRlbnRpZmllclxuICogQHR5cGVkZWYge2ltcG9ydCgnZXN0cmVlLWpzeCcpLkpTWE1lbWJlckV4cHJlc3Npb259IEpTWE1lbWJlckV4cHJlc3Npb25cbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2VzdHJlZS1qc3gnKS5MaXRlcmFsfSBMaXRlcmFsXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdlc3RyZWUtanN4JykuTWVtYmVyRXhwcmVzc2lvbn0gTWVtYmVyRXhwcmVzc2lvblxuICovXG5cbmltcG9ydCB7b2sgYXMgYXNzZXJ0fSBmcm9tICdkZXZsb3AnXG5pbXBvcnQge25hbWUgYXMgaXNJZGVudGlmaWVyTmFtZX0gZnJvbSAnZXN0cmVlLXV0aWwtaXMtaWRlbnRpZmllci1uYW1lJ1xuXG4vKipcbiAqIEBwYXJhbSB7UmVhZG9ubHlBcnJheTxudW1iZXIgfCBzdHJpbmc+fSBpZHNcbiAqICAgSWRlbnRpZmllcnMgKGV4YW1wbGU6IGBbJ2xpc3QnLCAwXSkuXG4gKiBAcmV0dXJucyB7SWRlbnRpZmllciB8IE1lbWJlckV4cHJlc3Npb259XG4gKiAgIElkZW50aWZpZXIgb3IgbWVtYmVyIGV4cHJlc3Npb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b0lkT3JNZW1iZXJFeHByZXNzaW9uKGlkcykge1xuICBsZXQgaW5kZXggPSAtMVxuICAvKiogQHR5cGUge0lkZW50aWZpZXIgfCBMaXRlcmFsIHwgTWVtYmVyRXhwcmVzc2lvbiB8IHVuZGVmaW5lZH0gKi9cbiAgbGV0IG9iamVjdFxuXG4gIHdoaWxlICgrK2luZGV4IDwgaWRzLmxlbmd0aCkge1xuICAgIGNvbnN0IG5hbWUgPSBpZHNbaW5kZXhdXG4gICAgLyoqIEB0eXBlIHtJZGVudGlmaWVyIHwgTGl0ZXJhbH0gKi9cbiAgICBjb25zdCBpZCA9XG4gICAgICB0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycgJiYgaXNJZGVudGlmaWVyTmFtZShuYW1lKVxuICAgICAgICA/IHt0eXBlOiAnSWRlbnRpZmllcicsIG5hbWV9XG4gICAgICAgIDoge3R5cGU6ICdMaXRlcmFsJywgdmFsdWU6IG5hbWV9XG4gICAgb2JqZWN0ID0gb2JqZWN0XG4gICAgICA/IHtcbiAgICAgICAgICB0eXBlOiAnTWVtYmVyRXhwcmVzc2lvbicsXG4gICAgICAgICAgb2JqZWN0LFxuICAgICAgICAgIHByb3BlcnR5OiBpZCxcbiAgICAgICAgICBjb21wdXRlZDogaWQudHlwZSA9PT0gJ0xpdGVyYWwnLFxuICAgICAgICAgIG9wdGlvbmFsOiBmYWxzZVxuICAgICAgICB9XG4gICAgICA6IGlkXG4gIH1cblxuICBhc3NlcnQob2JqZWN0LCAnZXhwZWN0ZWQgbm9uLWVtcHR5IGBpZHNgIHRvIGJlIHBhc3NlZCcpXG4gIGFzc2VydChvYmplY3QudHlwZSAhPT0gJ0xpdGVyYWwnLCAnZXhwZWN0ZWQgaWRlbnRpZmllciBhcyBsZWZ0LW1vc3QgdmFsdWUnKVxuICByZXR1cm4gb2JqZWN0XG59XG5cbi8qKlxuICogQHBhcmFtIHtSZWFkb25seUFycmF5PG51bWJlciB8IHN0cmluZz59IGlkc1xuICogICBJZGVudGlmaWVycyAoZXhhbXBsZTogYFsnbGlzdCcsIDBdKS5cbiAqIEByZXR1cm5zIHtKU1hJZGVudGlmaWVyIHwgSlNYTWVtYmVyRXhwcmVzc2lvbn1cbiAqICAgSWRlbnRpZmllciBvciBtZW1iZXIgZXhwcmVzc2lvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvSnN4SWRPck1lbWJlckV4cHJlc3Npb24oaWRzKSB7XG4gIGxldCBpbmRleCA9IC0xXG4gIC8qKiBAdHlwZSB7SlNYSWRlbnRpZmllciB8IEpTWE1lbWJlckV4cHJlc3Npb24gfCB1bmRlZmluZWR9ICovXG4gIGxldCBvYmplY3RcblxuICB3aGlsZSAoKytpbmRleCA8IGlkcy5sZW5ndGgpIHtcbiAgICBjb25zdCBuYW1lID0gaWRzW2luZGV4XVxuICAgIGFzc2VydChcbiAgICAgIHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJyAmJiBpc0lkZW50aWZpZXJOYW1lKG5hbWUsIHtqc3g6IHRydWV9KSxcbiAgICAgICdleHBlY3RlZCB2YWxpZCBqc3ggaWRlbnRpZmllciwgbm90IGAnICsgbmFtZSArICdgJ1xuICAgIClcblxuICAgIC8qKiBAdHlwZSB7SlNYSWRlbnRpZmllcn0gKi9cbiAgICBjb25zdCBpZCA9IHt0eXBlOiAnSlNYSWRlbnRpZmllcicsIG5hbWV9XG4gICAgb2JqZWN0ID0gb2JqZWN0ID8ge3R5cGU6ICdKU1hNZW1iZXJFeHByZXNzaW9uJywgb2JqZWN0LCBwcm9wZXJ0eTogaWR9IDogaWRcbiAgfVxuXG4gIGFzc2VydChvYmplY3QsICdleHBlY3RlZCBub24tZW1wdHkgYGlkc2AgdG8gYmUgcGFzc2VkJylcbiAgcmV0dXJuIG9iamVjdFxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-to-id-or-member-expression.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/extnames.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/extnames.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   md: () => (/* binding */ md),\n/* harmony export */   mdx: () => (/* binding */ mdx)\n/* harmony export */ });\n/* harmony import */ var markdown_extensions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! markdown-extensions */ \"(rsc)/./node_modules/.pnpm/markdown-extensions@2.0.0/node_modules/markdown-extensions/index.js\");\n\n\nconst md = markdown_extensions__WEBPACK_IMPORTED_MODULE_0__[\"default\"].map(function (d) {\n  return '.' + d\n})\nconst mdx = ['.mdx']\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1keC1qcyttZHhAMy4wLjEvbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi91dGlsL2V4dG5hbWVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFvRDs7QUFFN0MsV0FBVywyREFBa0I7QUFDcEM7QUFDQSxDQUFDO0FBQ00iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYm1fMjAyNC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbWR4LWpzK21keEAzLjAuMS9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3V0aWwvZXh0bmFtZXMuanM/ODYwYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbWFya2Rvd25FeHRlbnNpb25zIGZyb20gJ21hcmtkb3duLWV4dGVuc2lvbnMnXG5cbmV4cG9ydCBjb25zdCBtZCA9IG1hcmtkb3duRXh0ZW5zaW9ucy5tYXAoZnVuY3Rpb24gKGQpIHtcbiAgcmV0dXJuICcuJyArIGRcbn0pXG5leHBvcnQgY29uc3QgbWR4ID0gWycubWR4J11cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/extnames.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/resolve-file-and-options.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/resolve-file-and-options.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   resolveFileAndOptions: () => (/* binding */ resolveFileAndOptions)\n/* harmony export */ });\n/* harmony import */ var vfile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vfile */ \"(rsc)/./node_modules/.pnpm/vfile@6.0.2/node_modules/vfile/lib/index.js\");\n/* harmony import */ var _extnames_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./extnames.js */ \"(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/extnames.js\");\n/**\n * @typedef {import('vfile').Compatible} Compatible\n * @typedef {import('../compile.js').CompileOptions} CompileOptions\n * @typedef {import('../core.js').ProcessorOptions} ProcessorOptions\n */\n\n\n\n\n/**\n * Create a file and options from a given `vfileCompatible` and options that\n * might contain `format: 'detect'`.\n *\n * @param {Readonly<Compatible>} vfileCompatible\n *   File.\n * @param {Readonly<CompileOptions> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {{file: VFile, options: ProcessorOptions}}\n *   File and options.\n */\nfunction resolveFileAndOptions(vfileCompatible, options) {\n  const file = looksLikeAVFile(vfileCompatible)\n    ? vfileCompatible\n    : new vfile__WEBPACK_IMPORTED_MODULE_0__.VFile(vfileCompatible)\n  const {format, ...rest} = options || {}\n  return {\n    file,\n    options: {\n      format:\n        format === 'md' || format === 'mdx'\n          ? format\n          : file.extname && (rest.mdExtensions || _extnames_js__WEBPACK_IMPORTED_MODULE_1__.md).includes(file.extname)\n            ? 'md'\n            : 'mdx',\n      ...rest\n    }\n  }\n}\n\n/**\n * @param {Readonly<Compatible> | null | undefined} [value]\n *   Thing.\n * @returns {value is VFile}\n *   Check.\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1keC1qcyttZHhAMy4wLjEvbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi91dGlsL3Jlc29sdmUtZmlsZS1hbmQtb3B0aW9ucy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBLGFBQWEsNEJBQTRCO0FBQ3pDLGFBQWEsd0NBQXdDO0FBQ3JELGFBQWEsdUNBQXVDO0FBQ3BEOztBQUUyQjtBQUNLOztBQUVoQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsc0JBQXNCO0FBQ2pDO0FBQ0EsV0FBVyw2Q0FBNkM7QUFDeEQ7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBLFVBQVUsd0NBQUs7QUFDZixTQUFTLGlCQUFpQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0QsNENBQUU7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsV0FBVyx5Q0FBeUM7QUFDcEQ7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYm1fMjAyNC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbWR4LWpzK21keEAzLjAuMS9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3V0aWwvcmVzb2x2ZS1maWxlLWFuZC1vcHRpb25zLmpzP2JhZWQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCd2ZmlsZScpLkNvbXBhdGlibGV9IENvbXBhdGlibGVcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL2NvbXBpbGUuanMnKS5Db21waWxlT3B0aW9uc30gQ29tcGlsZU9wdGlvbnNcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL2NvcmUuanMnKS5Qcm9jZXNzb3JPcHRpb25zfSBQcm9jZXNzb3JPcHRpb25zXG4gKi9cblxuaW1wb3J0IHtWRmlsZX0gZnJvbSAndmZpbGUnXG5pbXBvcnQge21kfSBmcm9tICcuL2V4dG5hbWVzLmpzJ1xuXG4vKipcbiAqIENyZWF0ZSBhIGZpbGUgYW5kIG9wdGlvbnMgZnJvbSBhIGdpdmVuIGB2ZmlsZUNvbXBhdGlibGVgIGFuZCBvcHRpb25zIHRoYXRcbiAqIG1pZ2h0IGNvbnRhaW4gYGZvcm1hdDogJ2RldGVjdCdgLlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8Q29tcGF0aWJsZT59IHZmaWxlQ29tcGF0aWJsZVxuICogICBGaWxlLlxuICogQHBhcmFtIHtSZWFkb25seTxDb21waWxlT3B0aW9ucz4gfCBudWxsIHwgdW5kZWZpbmVkfSBbb3B0aW9uc11cbiAqICAgQ29uZmlndXJhdGlvbiAob3B0aW9uYWwpLlxuICogQHJldHVybnMge3tmaWxlOiBWRmlsZSwgb3B0aW9uczogUHJvY2Vzc29yT3B0aW9uc319XG4gKiAgIEZpbGUgYW5kIG9wdGlvbnMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlRmlsZUFuZE9wdGlvbnModmZpbGVDb21wYXRpYmxlLCBvcHRpb25zKSB7XG4gIGNvbnN0IGZpbGUgPSBsb29rc0xpa2VBVkZpbGUodmZpbGVDb21wYXRpYmxlKVxuICAgID8gdmZpbGVDb21wYXRpYmxlXG4gICAgOiBuZXcgVkZpbGUodmZpbGVDb21wYXRpYmxlKVxuICBjb25zdCB7Zm9ybWF0LCAuLi5yZXN0fSA9IG9wdGlvbnMgfHwge31cbiAgcmV0dXJuIHtcbiAgICBmaWxlLFxuICAgIG9wdGlvbnM6IHtcbiAgICAgIGZvcm1hdDpcbiAgICAgICAgZm9ybWF0ID09PSAnbWQnIHx8IGZvcm1hdCA9PT0gJ21keCdcbiAgICAgICAgICA/IGZvcm1hdFxuICAgICAgICAgIDogZmlsZS5leHRuYW1lICYmIChyZXN0Lm1kRXh0ZW5zaW9ucyB8fCBtZCkuaW5jbHVkZXMoZmlsZS5leHRuYW1lKVxuICAgICAgICAgICAgPyAnbWQnXG4gICAgICAgICAgICA6ICdtZHgnLFxuICAgICAgLi4ucmVzdFxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7UmVhZG9ubHk8Q29tcGF0aWJsZT4gfCBudWxsIHwgdW5kZWZpbmVkfSBbdmFsdWVdXG4gKiAgIFRoaW5nLlxuICogQHJldHVybnMge3ZhbHVlIGlzIFZGaWxlfVxuICogICBDaGVjay5cbiAqL1xuZnVuY3Rpb24gbG9va3NMaWtlQVZGaWxlKHZhbHVlKSB7XG4gIHJldHVybiBCb29sZWFuKFxuICAgIHZhbHVlICYmXG4gICAgICB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmXG4gICAgICAnbWVzc2FnZScgaW4gdmFsdWUgJiZcbiAgICAgICdtZXNzYWdlcycgaW4gdmFsdWVcbiAgKVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/resolve-file-and-options.js\n");

/***/ })

};
;
"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/micromark-extension-mdx-jsx@3.0.0";
exports.ids = ["vendor-chunks/micromark-extension-mdx-jsx@3.0.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.0/node_modules/micromark-extension-mdx-jsx/dev/lib/factory-tag.js":
/*!******************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.0/node_modules/micromark-extension-mdx-jsx/dev/lib/factory-tag.js ***!
  \******************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   factoryTag: () => (/* binding */ factoryTag)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(ssr)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! estree-util-is-identifier-name */ \"(ssr)/./node_modules/.pnpm/estree-util-is-identifier-name@3.0.0/node_modules/estree-util-is-identifier-name/lib/index.js\");\n/* harmony import */ var micromark_factory_mdx_expression__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-factory-mdx-expression */ \"(ssr)/./node_modules/.pnpm/micromark-factory-mdx-expression@2.0.1/node_modules/micromark-factory-mdx-expression/dev/index.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-character */ \"(ssr)/./node_modules/.pnpm/micromark-util-character@2.1.0/node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol */ \"(ssr)/./node_modules/.pnpm/micromark-util-symbol@2.0.0/node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-util-symbol */ \"(ssr)/./node_modules/.pnpm/micromark-util-symbol@2.0.0/node_modules/micromark-util-symbol/lib/types.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! micromark-util-symbol */ \"(ssr)/./node_modules/.pnpm/micromark-util-symbol@2.0.0/node_modules/micromark-util-symbol/lib/constants.js\");\n/* harmony import */ var vfile_message__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! vfile-message */ \"(ssr)/./node_modules/.pnpm/vfile-message@4.0.2/node_modules/vfile-message/lib/index.js\");\n/**\n * @typedef {import('micromark-factory-mdx-expression').Acorn} Acorn\n * @typedef {import('micromark-factory-mdx-expression').AcornOptions} AcornOptions\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\n\n\n\n\n\n\n\nconst trouble = 'https://github.com/micromark/micromark-extension-mdx-jsx'\n\n/**\n * @this {TokenizeContext}\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {Acorn | undefined} acorn\n * @param {AcornOptions | undefined} acornOptions\n * @param {boolean | undefined} addResult\n * @param {boolean | undefined} allowLazy\n * @param {TokenType} tagType\n * @param {TokenType} tagMarkerType\n * @param {TokenType} tagClosingMarkerType\n * @param {TokenType} tagSelfClosingMarker\n * @param {TokenType} tagNameType\n * @param {TokenType} tagNamePrimaryType\n * @param {TokenType} tagNameMemberMarkerType\n * @param {TokenType} tagNameMemberType\n * @param {TokenType} tagNamePrefixMarkerType\n * @param {TokenType} tagNameLocalType\n * @param {TokenType} tagExpressionAttributeType\n * @param {TokenType} tagExpressionAttributeMarkerType\n * @param {TokenType} tagExpressionAttributeValueType\n * @param {TokenType} tagAttributeType\n * @param {TokenType} tagAttributeNameType\n * @param {TokenType} tagAttributeNamePrimaryType\n * @param {TokenType} tagAttributeNamePrefixMarkerType\n * @param {TokenType} tagAttributeNameLocalType\n * @param {TokenType} tagAttributeInitializerMarkerType\n * @param {TokenType} tagAttributeValueLiteralType\n * @param {TokenType} tagAttributeValueLiteralMarkerType\n * @param {TokenType} tagAttributeValueLiteralValueType\n * @param {TokenType} tagAttributeValueExpressionType\n * @param {TokenType} tagAttributeValueExpressionMarkerType\n * @param {TokenType} tagAttributeValueExpressionValueType\n */\n// eslint-disable-next-line max-params\nfunction factoryTag(\n  effects,\n  ok,\n  nok,\n  acorn,\n  acornOptions,\n  addResult,\n  allowLazy,\n  tagType,\n  tagMarkerType,\n  tagClosingMarkerType,\n  tagSelfClosingMarker,\n  tagNameType,\n  tagNamePrimaryType,\n  tagNameMemberMarkerType,\n  tagNameMemberType,\n  tagNamePrefixMarkerType,\n  tagNameLocalType,\n  tagExpressionAttributeType,\n  tagExpressionAttributeMarkerType,\n  tagExpressionAttributeValueType,\n  tagAttributeType,\n  tagAttributeNameType,\n  tagAttributeNamePrimaryType,\n  tagAttributeNamePrefixMarkerType,\n  tagAttributeNameLocalType,\n  tagAttributeInitializerMarkerType,\n  tagAttributeValueLiteralType,\n  tagAttributeValueLiteralMarkerType,\n  tagAttributeValueLiteralValueType,\n  tagAttributeValueExpressionType,\n  tagAttributeValueExpressionMarkerType,\n  tagAttributeValueExpressionValueType\n) {\n  const self = this\n  /** @type {State} */\n  let returnState\n  /** @type {NonNullable<Code> | undefined} */\n  let marker\n\n  return start\n\n  /**\n   * Start of MDX: JSX.\n   *\n   * ```markdown\n   * > | a <B /> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    ;(0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.lessThan, 'expected `<`')\n    effects.enter(tagType)\n    effects.enter(tagMarkerType)\n    effects.consume(code)\n    effects.exit(tagMarkerType)\n    return startAfter\n  }\n\n  /**\n   * After `<`.\n   *\n   * ```markdown\n   * > | a <B /> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function startAfter(code) {\n    // Deviate from JSX, which allows arbitrary whitespace.\n    // See: <https://github.com/micromark/micromark-extension-mdx-jsx/issues/7>.\n    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEndingOrSpace)(code)) {\n      return nok(code)\n    }\n\n    // Any other ES whitespace does not get this treatment.\n    returnState = nameBefore\n    return esWhitespaceStart(code)\n  }\n\n  /**\n   * Before name, self slash, or end of tag for fragments.\n   *\n   * ```markdown\n   * > | a <B> c\n   *        ^\n   * > | a </B> c\n   *        ^\n   * > | a <> b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function nameBefore(code) {\n    // Closing tag.\n    if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash) {\n      effects.enter(tagClosingMarkerType)\n      effects.consume(code)\n      effects.exit(tagClosingMarkerType)\n      returnState = closingTagNameBefore\n      return esWhitespaceStart\n    }\n\n    // Fragment opening tag.\n    if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan) {\n      return tagEnd(code)\n    }\n\n    // Start of a name.\n    if (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.start)(code)) {\n      effects.enter(tagNameType)\n      effects.enter(tagNamePrimaryType)\n      effects.consume(code)\n      return primaryName\n    }\n\n    crash(\n      code,\n      'before name',\n      'a character that can start a name, such as a letter, `$`, or `_`' +\n        (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.exclamationMark\n          ? ' (note: to create a comment in MDX, use `{/* text */}`)'\n          : '')\n    )\n  }\n\n  /**\n   * Before name of closing tag or end of closing fragment tag.\n   *\n   * ```markdown\n   * > | a </> b\n   *         ^\n   * > | a </B> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function closingTagNameBefore(code) {\n    // Fragment closing tag.\n    if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan) {\n      return tagEnd(code)\n    }\n\n    // Start of a closing tag name.\n    if (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.start)(code)) {\n      effects.enter(tagNameType)\n      effects.enter(tagNamePrimaryType)\n      effects.consume(code)\n      return primaryName\n    }\n\n    crash(\n      code,\n      'before name',\n      'a character that can start a name, such as a letter, `$`, or `_`' +\n        (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.asterisk || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash\n          ? ' (note: JS comments in JSX tags are not supported in MDX)'\n          : '')\n    )\n  }\n\n  /**\n   * In primary name.\n   *\n   * ```markdown\n   * > | a <Bc> d\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function primaryName(code) {\n    // Continuation of name: remain.\n    if (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.cont)(code, {jsx: true})) {\n      effects.consume(code)\n      return primaryName\n    }\n\n    // End of name.\n    if (\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.dot ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.colon ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftCurlyBrace ||\n      (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEndingOrSpace)(code) ||\n      (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.unicodeWhitespace)(code)\n    ) {\n      effects.exit(tagNamePrimaryType)\n      returnState = primaryNameAfter\n      return esWhitespaceStart(code)\n    }\n\n    crash(\n      code,\n      'in name',\n      'a name character such as letters, digits, `$`, or `_`; whitespace before attributes; or the end of the tag' +\n        (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.atSign\n          ? ' (note: to create a link in MDX, use `[text](url)`)'\n          : '')\n    )\n  }\n\n  /**\n   * After primary name.\n   *\n   * ```markdown\n   * > | a <b.c> d\n   *         ^\n   * > | a <b:c> d\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function primaryNameAfter(code) {\n    // Start of a member name.\n    if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.dot) {\n      effects.enter(tagNameMemberMarkerType)\n      effects.consume(code)\n      effects.exit(tagNameMemberMarkerType)\n      returnState = memberNameBefore\n      return esWhitespaceStart\n    }\n\n    // Start of a local name.\n    if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.colon) {\n      effects.enter(tagNamePrefixMarkerType)\n      effects.consume(code)\n      effects.exit(tagNamePrefixMarkerType)\n      returnState = localNameBefore\n      return esWhitespaceStart\n    }\n\n    // End of name.\n    if (\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftCurlyBrace ||\n      (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.start)(code))\n    ) {\n      effects.exit(tagNameType)\n      return attributeBefore(code)\n    }\n\n    crash(\n      code,\n      'after name',\n      'a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag'\n    )\n  }\n\n  /**\n   * Before member name.\n   *\n   * ```markdown\n   * > | a <b.c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function memberNameBefore(code) {\n    // Start of a member name.\n    if (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.start)(code)) {\n      effects.enter(tagNameMemberType)\n      effects.consume(code)\n      return memberName\n    }\n\n    crash(\n      code,\n      'before member name',\n      'a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag'\n    )\n  }\n\n  /**\n   * In member name.\n   *\n   * ```markdown\n   * > | a <b.cd> e\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function memberName(code) {\n    // Continuation of name: remain.\n    if (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.cont)(code, {jsx: true})) {\n      effects.consume(code)\n      return memberName\n    }\n\n    // End of name.\n    // Note: no `:` allowed here.\n    if (\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.dot ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftCurlyBrace ||\n      (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEndingOrSpace)(code) ||\n      (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.unicodeWhitespace)(code)\n    ) {\n      effects.exit(tagNameMemberType)\n      returnState = memberNameAfter\n      return esWhitespaceStart(code)\n    }\n\n    crash(\n      code,\n      'in member name',\n      'a name character such as letters, digits, `$`, or `_`; whitespace before attributes; or the end of the tag' +\n        (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.atSign\n          ? ' (note: to create a link in MDX, use `[text](url)`)'\n          : '')\n    )\n  }\n\n  /**\n   * After member name.\n   *\n   * ```markdown\n   * > | a <b.c> d\n   *           ^\n   * > | a <b.c.d> e\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function memberNameAfter(code) {\n    // Start another member name.\n    if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.dot) {\n      effects.enter(tagNameMemberMarkerType)\n      effects.consume(code)\n      effects.exit(tagNameMemberMarkerType)\n      returnState = memberNameBefore\n      return esWhitespaceStart\n    }\n\n    // End of name.\n    if (\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftCurlyBrace ||\n      (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.start)(code))\n    ) {\n      effects.exit(tagNameType)\n      return attributeBefore(code)\n    }\n\n    crash(\n      code,\n      'after member name',\n      'a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag'\n    )\n  }\n\n  /**\n   * Local member name.\n   *\n   * ```markdown\n   * > | a <b:c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function localNameBefore(code) {\n    // Start of a local name.\n    if (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.start)(code)) {\n      effects.enter(tagNameLocalType)\n      effects.consume(code)\n      return localName\n    }\n\n    crash(\n      code,\n      'before local name',\n      'a character that can start a name, such as a letter, `$`, or `_`' +\n        (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.plusSign ||\n        (code !== null &&\n          code > micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.dot &&\n          code < micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.colon) /* `/` - `9` */\n          ? ' (note: to create a link in MDX, use `[text](url)`)'\n          : '')\n    )\n  }\n\n  /**\n   * In local name.\n   *\n   * ```markdown\n   * > | a <b:cd> e\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function localName(code) {\n    // Continuation of name: remain.\n    if (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.cont)(code, {jsx: true})) {\n      effects.consume(code)\n      return localName\n    }\n\n    // End of local name (note that we don’t expect another colon, or a member).\n    if (\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftCurlyBrace ||\n      (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEndingOrSpace)(code) ||\n      (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.unicodeWhitespace)(code)\n    ) {\n      effects.exit(tagNameLocalType)\n      returnState = localNameAfter\n      return esWhitespaceStart(code)\n    }\n\n    crash(\n      code,\n      'in local name',\n      'a name character such as letters, digits, `$`, or `_`; whitespace before attributes; or the end of the tag'\n    )\n  }\n\n  /**\n   * After local name.\n   *\n   * This is like as `primary_name_after`, but we don’t expect colons or\n   * periods.\n   *\n   * ```markdown\n   * > | a <b.c> d\n   *           ^\n   * > | a <b.c.d> e\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function localNameAfter(code) {\n    // End of name.\n    if (\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftCurlyBrace ||\n      (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.start)(code))\n    ) {\n      effects.exit(tagNameType)\n      return attributeBefore(code)\n    }\n\n    crash(\n      code,\n      'after local name',\n      'a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag'\n    )\n  }\n\n  /**\n   * Before attribute.\n   *\n   * ```markdown\n   * > | a <b /> c\n   *          ^\n   * > | a <b > c\n   *          ^\n   * > | a <b {...c}> d\n   *          ^\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributeBefore(code) {\n    // Self-closing.\n    if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash) {\n      effects.enter(tagSelfClosingMarker)\n      effects.consume(code)\n      effects.exit(tagSelfClosingMarker)\n      returnState = selfClosing\n      return esWhitespaceStart\n    }\n\n    // End of tag.\n    if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan) {\n      return tagEnd(code)\n    }\n\n    // Attribute expression.\n    if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftCurlyBrace) {\n      return micromark_factory_mdx_expression__WEBPACK_IMPORTED_MODULE_4__.factoryMdxExpression.call(\n        self,\n        effects,\n        attributeExpressionAfter,\n        tagExpressionAttributeType,\n        tagExpressionAttributeMarkerType,\n        tagExpressionAttributeValueType,\n        acorn,\n        acornOptions,\n        addResult,\n        true,\n        false,\n        allowLazy\n      )(code)\n    }\n\n    // Start of an attribute name.\n    if (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.start)(code)) {\n      effects.enter(tagAttributeType)\n      effects.enter(tagAttributeNameType)\n      effects.enter(tagAttributeNamePrimaryType)\n      effects.consume(code)\n      return attributePrimaryName\n    }\n\n    crash(\n      code,\n      'before attribute name',\n      'a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag'\n    )\n  }\n\n  /**\n   * After attribute expression.\n   *\n   * ```markdown\n   * > | a <b {c} d/> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributeExpressionAfter(code) {\n    returnState = attributeBefore\n    return esWhitespaceStart(code)\n  }\n\n  /**\n   * In primary attribute name.\n   *\n   * ```markdown\n   * > | a <b cd/> e\n   *           ^\n   * > | a <b c:d> e\n   *           ^\n   * > | a <b c=d> e\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributePrimaryName(code) {\n    // Continuation of name: remain.\n    if (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.cont)(code, {jsx: true})) {\n      effects.consume(code)\n      return attributePrimaryName\n    }\n\n    // End of attribute name or tag.\n    if (\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.colon ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.equalsTo ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftCurlyBrace ||\n      (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEndingOrSpace)(code) ||\n      (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.unicodeWhitespace)(code)\n    ) {\n      effects.exit(tagAttributeNamePrimaryType)\n      returnState = attributePrimaryNameAfter\n      return esWhitespaceStart(code)\n    }\n\n    crash(\n      code,\n      'in attribute name',\n      'an attribute name character such as letters, digits, `$`, or `_`; `=` to initialize a value; whitespace before attributes; or the end of the tag'\n    )\n  }\n\n  /**\n   * After primary attribute name.\n   *\n   * ```markdown\n   * > | a <b c/> d\n   *           ^\n   * > | a <b c:d> e\n   *           ^\n   * > | a <b c=d> e\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributePrimaryNameAfter(code) {\n    // Start of a local name.\n    if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.colon) {\n      effects.enter(tagAttributeNamePrefixMarkerType)\n      effects.consume(code)\n      effects.exit(tagAttributeNamePrefixMarkerType)\n      returnState = attributeLocalNameBefore\n      return esWhitespaceStart\n    }\n\n    // Initializer: start of an attribute value.\n    if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.equalsTo) {\n      effects.exit(tagAttributeNameType)\n      effects.enter(tagAttributeInitializerMarkerType)\n      effects.consume(code)\n      effects.exit(tagAttributeInitializerMarkerType)\n      returnState = attributeValueBefore\n      return esWhitespaceStart\n    }\n\n    // End of tag / new attribute.\n    if (\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftCurlyBrace ||\n      (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEndingOrSpace)(code) ||\n      (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.unicodeWhitespace)(code) ||\n      (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.start)(code))\n    ) {\n      effects.exit(tagAttributeNameType)\n      effects.exit(tagAttributeType)\n      returnState = attributeBefore\n      return esWhitespaceStart(code)\n    }\n\n    crash(\n      code,\n      'after attribute name',\n      'a character that can start an attribute name, such as a letter, `$`, or `_`; `=` to initialize a value; or the end of the tag'\n    )\n  }\n\n  /**\n   * Before local attribute name.\n   *\n   * ```markdown\n   * > | a <b c:d/> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributeLocalNameBefore(code) {\n    // Start of a local name.\n    if (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.start)(code)) {\n      effects.enter(tagAttributeNameLocalType)\n      effects.consume(code)\n      return attributeLocalName\n    }\n\n    crash(\n      code,\n      'before local attribute name',\n      'a character that can start an attribute name, such as a letter, `$`, or `_`; `=` to initialize a value; or the end of the tag'\n    )\n  }\n\n  /**\n   * In local attribute name.\n   *\n   * ```markdown\n   * > | a <b c:de/> f\n   *             ^\n   * > | a <b c:d=e/> f\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributeLocalName(code) {\n    // Continuation of name: remain.\n    if (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.cont)(code, {jsx: true})) {\n      effects.consume(code)\n      return attributeLocalName\n    }\n\n    // End of local name (note that we don’t expect another colon).\n    if (\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.equalsTo ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftCurlyBrace ||\n      (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEndingOrSpace)(code) ||\n      (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.unicodeWhitespace)(code)\n    ) {\n      effects.exit(tagAttributeNameLocalType)\n      effects.exit(tagAttributeNameType)\n      returnState = attributeLocalNameAfter\n      return esWhitespaceStart(code)\n    }\n\n    crash(\n      code,\n      'in local attribute name',\n      'an attribute name character such as letters, digits, `$`, or `_`; `=` to initialize a value; whitespace before attributes; or the end of the tag'\n    )\n  }\n\n  /**\n   * After local attribute name.\n   *\n   * ```markdown\n   * > | a <b c:d/> f\n   *             ^\n   * > | a <b c:d=e/> f\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributeLocalNameAfter(code) {\n    // Start of an attribute value.\n    if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.equalsTo) {\n      effects.enter(tagAttributeInitializerMarkerType)\n      effects.consume(code)\n      effects.exit(tagAttributeInitializerMarkerType)\n      returnState = attributeValueBefore\n      return esWhitespaceStart\n    }\n\n    // End of name.\n    if (\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftCurlyBrace ||\n      (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.start)(code))\n    ) {\n      effects.exit(tagAttributeType)\n      return attributeBefore(code)\n    }\n\n    crash(\n      code,\n      'after local attribute name',\n      'a character that can start an attribute name, such as a letter, `$`, or `_`; `=` to initialize a value; or the end of the tag'\n    )\n  }\n\n  /**\n   * After `=`, before value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"/> e\n   *            ^\n   * > | a <b c={d}/> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributeValueBefore(code) {\n    // Start of double- or single quoted value.\n    if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.quotationMark || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.apostrophe) {\n      effects.enter(tagAttributeValueLiteralType)\n      effects.enter(tagAttributeValueLiteralMarkerType)\n      effects.consume(code)\n      effects.exit(tagAttributeValueLiteralMarkerType)\n      marker = code\n      return attributeValueQuotedStart\n    }\n\n    // Attribute value expression.\n    if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftCurlyBrace) {\n      return micromark_factory_mdx_expression__WEBPACK_IMPORTED_MODULE_4__.factoryMdxExpression.call(\n        self,\n        effects,\n        attributeValueExpressionAfter,\n        tagAttributeValueExpressionType,\n        tagAttributeValueExpressionMarkerType,\n        tagAttributeValueExpressionValueType,\n        acorn,\n        acornOptions,\n        addResult,\n        false,\n        false,\n        allowLazy\n      )(code)\n    }\n\n    crash(\n      code,\n      'before attribute value',\n      'a character that can start an attribute value, such as `\"`, `\\'`, or `{`' +\n        (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.lessThan\n          ? ' (note: to use an element or fragment as a prop value in MDX, use `{<element />}`)'\n          : '')\n    )\n  }\n\n  /**\n   * After attribute value expression.\n   *\n   * ```markdown\n   * > | a <b c={d} e/> f\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributeValueExpressionAfter(code) {\n    effects.exit(tagAttributeType)\n    returnState = attributeBefore\n    return esWhitespaceStart(code)\n  }\n\n  /**\n   * Before quoted literal attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"/> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributeValueQuotedStart(code) {\n    (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(marker !== undefined, 'expected `marker` to be defined')\n\n    if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof) {\n      crash(\n        code,\n        'in attribute value',\n        'a corresponding closing quote `' + String.fromCodePoint(marker) + '`'\n      )\n    }\n\n    if (code === marker) {\n      effects.enter(tagAttributeValueLiteralMarkerType)\n      effects.consume(code)\n      effects.exit(tagAttributeValueLiteralMarkerType)\n      effects.exit(tagAttributeValueLiteralType)\n      effects.exit(tagAttributeType)\n      marker = undefined\n      returnState = attributeBefore\n      return esWhitespaceStart\n    }\n\n    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEnding)(code)) {\n      returnState = attributeValueQuotedStart\n      return esWhitespaceStart(code)\n    }\n\n    effects.enter(tagAttributeValueLiteralValueType)\n    return attributeValueQuoted(code)\n  }\n\n  /**\n   * In quoted literal attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"/> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributeValueQuoted(code) {\n    if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof || code === marker || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEnding)(code)) {\n      effects.exit(tagAttributeValueLiteralValueType)\n      return attributeValueQuotedStart(code)\n    }\n\n    effects.consume(code)\n    return attributeValueQuoted\n  }\n\n  /**\n   * After self-closing slash.\n   *\n   * ```markdown\n   * > | a <b/> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function selfClosing(code) {\n    if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan) {\n      return tagEnd(code)\n    }\n\n    crash(\n      code,\n      'after self-closing slash',\n      '`>` to end the tag' +\n        (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.asterisk || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash\n          ? ' (note: JS comments in JSX tags are not supported in MDX)'\n          : '')\n    )\n  }\n\n  /**\n   * At final `>`.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagEnd(code) {\n    (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan, 'expected `>`')\n    effects.enter(tagMarkerType)\n    effects.consume(code)\n    effects.exit(tagMarkerType)\n    effects.exit(tagType)\n    return ok\n  }\n\n  /**\n   * Before optional ECMAScript whitespace.\n   *\n   * ```markdown\n   * > | a <a b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function esWhitespaceStart(code) {\n    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEnding)(code)) {\n      effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__.types.lineEnding)\n      effects.consume(code)\n      effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__.types.lineEnding)\n      return esWhitespaceEolAfter\n    }\n\n    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownSpace)(code) || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.unicodeWhitespace)(code)) {\n      effects.enter('esWhitespace')\n      return esWhitespaceInside(code)\n    }\n\n    return returnState(code)\n  }\n\n  /**\n   * In ECMAScript whitespace.\n   *\n   * ```markdown\n   * > | a <a  b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function esWhitespaceInside(code) {\n    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEnding)(code)) {\n      effects.exit('esWhitespace')\n      return esWhitespaceStart(code)\n    }\n\n    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownSpace)(code) || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.unicodeWhitespace)(code)) {\n      effects.consume(code)\n      return esWhitespaceInside\n    }\n\n    effects.exit('esWhitespace')\n    return returnState(code)\n  }\n\n  /**\n   * After eol in whitespace.\n   *\n   * ```markdown\n   * > | a <a\\nb> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function esWhitespaceEolAfter(code) {\n    // Lazy continuation in a flow tag is a syntax error.\n    if (!allowLazy && self.parser.lazy[self.now().line]) {\n      const error = new vfile_message__WEBPACK_IMPORTED_MODULE_6__.VFileMessage(\n        'Unexpected lazy line in container, expected line to be prefixed with `>` when in a block quote, whitespace when in a list, etc',\n        self.now(),\n        'micromark-extension-mdx-jsx:unexpected-lazy'\n      )\n      error.url =\n        trouble + '#unexpected-lazy-line-in-container-expected-line-to-be'\n      throw error\n    }\n\n    return esWhitespaceStart(code)\n  }\n\n  /**\n   * Crash at a nonconforming character.\n   *\n   * @param {Code} code\n   * @param {string} at\n   * @param {string} expect\n   */\n  function crash(code, at, expect) {\n    const error = new vfile_message__WEBPACK_IMPORTED_MODULE_6__.VFileMessage(\n      'Unexpected ' +\n        (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof\n          ? 'end of file'\n          : 'character `' +\n            (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.graveAccent\n              ? '` ` `'\n              : String.fromCodePoint(code)) +\n            '` (' +\n            serializeCharCode(code) +\n            ')') +\n        ' ' +\n        at +\n        ', expected ' +\n        expect,\n      self.now(),\n      'micromark-extension-mdx-jsx:unexpected-' +\n        (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof ? 'eof' : 'character')\n    )\n    error.url =\n      trouble +\n      (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof\n        ? '#unexpected-end-of-file-at-expected-expect'\n        : '#unexpected-character-at-expected-expect')\n    throw error\n  }\n}\n\n/**\n * @param {NonNullable<Code>} code\n * @returns {string}\n */\nfunction serializeCharCode(code) {\n  return (\n    'U+' +\n    code\n      .toString(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_7__.constants.numericBaseHexadecimal)\n      .toUpperCase()\n      .padStart(4, '0')\n  )\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.0/node_modules/micromark-extension-mdx-jsx/dev/lib/factory-tag.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.0/node_modules/micromark-extension-mdx-jsx/dev/lib/jsx-flow.js":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.0/node_modules/micromark-extension-mdx-jsx/dev/lib/jsx-flow.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   jsxFlow: () => (/* binding */ jsxFlow)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(ssr)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-character */ \"(ssr)/./node_modules/.pnpm/micromark-util-character@2.1.0/node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_factory_space__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-factory-space */ \"(ssr)/./node_modules/.pnpm/micromark-factory-space@2.0.0/node_modules/micromark-factory-space/dev/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol */ \"(ssr)/./node_modules/.pnpm/micromark-util-symbol@2.0.0/node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-util-symbol */ \"(ssr)/./node_modules/.pnpm/micromark-util-symbol@2.0.0/node_modules/micromark-util-symbol/lib/types.js\");\n/* harmony import */ var _factory_tag_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./factory-tag.js */ \"(ssr)/./node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.0/node_modules/micromark-extension-mdx-jsx/dev/lib/factory-tag.js\");\n/**\n * @typedef {import('micromark-factory-mdx-expression').Acorn} Acorn\n * @typedef {import('micromark-factory-mdx-expression').AcornOptions} AcornOptions\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {AcornOptions | undefined} acornOptions\n *   Acorn options.\n * @property {boolean | undefined} addResult\n *   Whether to add `estree` fields to tokens with results from acorn.\n */\n\n\n\n\n\n\n\n/**\n * Parse JSX (flow).\n *\n * @param {Acorn | undefined} acorn\n *   Acorn parser to use (optional).\n * @param {Options} options\n *   Configuration.\n * @returns {Construct}\n *   Construct.\n */\nfunction jsxFlow(acorn, options) {\n  return {name: 'mdxJsxFlowTag', tokenize: tokenizeJsxFlow, concrete: true}\n\n  /**\n   * MDX JSX (flow).\n   *\n   * ```markdown\n   * > | <A />\n   *     ^^^^^\n   * ```\n   *\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeJsxFlow(effects, ok, nok) {\n    const self = this\n\n    return start\n\n    /**\n     * Start of MDX: JSX (flow).\n     *\n     * ```markdown\n     * > | <A />\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // To do: in `markdown-rs`, constructs need to parse the indent themselves.\n      // This should also be introduced in `micromark-js`.\n      ;(0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.lessThan, 'expected `<`')\n      return before(code)\n    }\n\n    /**\n     * After optional whitespace, before of MDX JSX (flow).\n     *\n     * ```markdown\n     * > | <A />\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function before(code) {\n      return _factory_tag_js__WEBPACK_IMPORTED_MODULE_2__.factoryTag.call(\n        self,\n        effects,\n        after,\n        nok,\n        acorn,\n        options.acornOptions,\n        options.addResult,\n        false,\n        'mdxJsxFlowTag',\n        'mdxJsxFlowTagMarker',\n        'mdxJsxFlowTagClosingMarker',\n        'mdxJsxFlowTagSelfClosingMarker',\n        'mdxJsxFlowTagName',\n        'mdxJsxFlowTagNamePrimary',\n        'mdxJsxFlowTagNameMemberMarker',\n        'mdxJsxFlowTagNameMember',\n        'mdxJsxFlowTagNamePrefixMarker',\n        'mdxJsxFlowTagNameLocal',\n        'mdxJsxFlowTagExpressionAttribute',\n        'mdxJsxFlowTagExpressionAttributeMarker',\n        'mdxJsxFlowTagExpressionAttributeValue',\n        'mdxJsxFlowTagAttribute',\n        'mdxJsxFlowTagAttributeName',\n        'mdxJsxFlowTagAttributeNamePrimary',\n        'mdxJsxFlowTagAttributeNamePrefixMarker',\n        'mdxJsxFlowTagAttributeNameLocal',\n        'mdxJsxFlowTagAttributeInitializerMarker',\n        'mdxJsxFlowTagAttributeValueLiteral',\n        'mdxJsxFlowTagAttributeValueLiteralMarker',\n        'mdxJsxFlowTagAttributeValueLiteralValue',\n        'mdxJsxFlowTagAttributeValueExpression',\n        'mdxJsxFlowTagAttributeValueExpressionMarker',\n        'mdxJsxFlowTagAttributeValueExpressionValue'\n      )(code)\n    }\n\n    /**\n     * After an MDX JSX (flow) tag.\n     *\n     * ```markdown\n     * > | <A>\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function after(code) {\n      return (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownSpace)(code)\n        ? (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_4__.factorySpace)(effects, end, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__.types.whitespace)(code)\n        : end(code)\n    }\n\n    /**\n     * After an MDX JSX (flow) tag, after optional whitespace.\n     *\n     * ```markdown\n     * > | <A> <B>\n     *         ^\n     * ```\n     *\n     * @type {State}\n     */\n    function end(code) {\n      // We want to allow expressions directly after tags.\n      // See <https://github.com/micromark/micromark-extension-mdx-expression/blob/d5d92b9/packages/micromark-extension-mdx-expression/dev/lib/syntax.js#L183>\n      // for more info.\n      const leftBraceValue = self.parser.constructs.flow[micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftCurlyBrace]\n      /* c8 ignore next 5 -- always a list when normalized. */\n      const constructs = Array.isArray(leftBraceValue)\n        ? leftBraceValue\n        : leftBraceValue\n        ? [leftBraceValue]\n        : []\n      const expression = constructs.find((d) => d.name === 'mdxFlowExpression')\n\n      // Another tag.\n      return code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.lessThan\n        ? // We can’t just say: fine. Lines of blocks have to be parsed until an eol/eof.\n          start(code)\n        : code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftCurlyBrace && expression\n        ? effects.attempt(expression, end, nok)(code)\n        : code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code)\n        ? ok(code)\n        : nok(code)\n    }\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.0/node_modules/micromark-extension-mdx-jsx/dev/lib/jsx-flow.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.0/node_modules/micromark-extension-mdx-jsx/dev/lib/jsx-text.js":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.0/node_modules/micromark-extension-mdx-jsx/dev/lib/jsx-text.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   jsxText: () => (/* binding */ jsxText)\n/* harmony export */ });\n/* harmony import */ var _factory_tag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./factory-tag.js */ \"(ssr)/./node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.0/node_modules/micromark-extension-mdx-jsx/dev/lib/factory-tag.js\");\n/**\n * @typedef {import('micromark-factory-mdx-expression').Acorn} Acorn\n * @typedef {import('micromark-factory-mdx-expression').AcornOptions} AcornOptions\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {AcornOptions | undefined} acornOptions\n *   Acorn options.\n * @property {boolean | undefined} addResult\n *   Whether to add `estree` fields to tokens with results from acorn.\n */\n\n\n\n/**\n * Parse JSX (text).\n *\n * @param {Acorn | undefined} acorn\n *   Acorn parser to use (optional).\n * @param {Options} options\n *   Configuration.\n * @returns {Construct}\n *   Construct.\n */\nfunction jsxText(acorn, options) {\n  return {name: 'mdxJsxTextTag', tokenize: tokenizeJsxText}\n\n  /**\n   * MDX JSX (text).\n   *\n   * ```markdown\n   * > | a <b />.\n   *       ^^^^^\n   * ```\n   *\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeJsxText(effects, ok, nok) {\n    return _factory_tag_js__WEBPACK_IMPORTED_MODULE_0__.factoryTag.call(\n      this,\n      effects,\n      ok,\n      nok,\n      acorn,\n      options.acornOptions,\n      options.addResult,\n      true,\n      'mdxJsxTextTag',\n      'mdxJsxTextTagMarker',\n      'mdxJsxTextTagClosingMarker',\n      'mdxJsxTextTagSelfClosingMarker',\n      'mdxJsxTextTagName',\n      'mdxJsxTextTagNamePrimary',\n      'mdxJsxTextTagNameMemberMarker',\n      'mdxJsxTextTagNameMember',\n      'mdxJsxTextTagNamePrefixMarker',\n      'mdxJsxTextTagNameLocal',\n      'mdxJsxTextTagExpressionAttribute',\n      'mdxJsxTextTagExpressionAttributeMarker',\n      'mdxJsxTextTagExpressionAttributeValue',\n      'mdxJsxTextTagAttribute',\n      'mdxJsxTextTagAttributeName',\n      'mdxJsxTextTagAttributeNamePrimary',\n      'mdxJsxTextTagAttributeNamePrefixMarker',\n      'mdxJsxTextTagAttributeNameLocal',\n      'mdxJsxTextTagAttributeInitializerMarker',\n      'mdxJsxTextTagAttributeValueLiteral',\n      'mdxJsxTextTagAttributeValueLiteralMarker',\n      'mdxJsxTextTagAttributeValueLiteralValue',\n      'mdxJsxTextTagAttributeValueExpression',\n      'mdxJsxTextTagAttributeValueExpressionMarker',\n      'mdxJsxTextTagAttributeValueExpressionValue'\n    )\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrLWV4dGVuc2lvbi1tZHgtanN4QDMuMC4wL25vZGVfbW9kdWxlcy9taWNyb21hcmstZXh0ZW5zaW9uLW1keC1qc3gvZGV2L2xpYi9qc3gtdGV4dC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0EsYUFBYSxrREFBa0Q7QUFDL0QsYUFBYSx5REFBeUQ7QUFDdEUsYUFBYSwwQ0FBMEM7QUFDdkQsYUFBYSxnREFBZ0Q7QUFDN0QsYUFBYSwwQ0FBMEM7QUFDdkQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsY0FBYywwQkFBMEI7QUFDeEM7QUFDQSxjQUFjLHFCQUFxQjtBQUNuQztBQUNBOztBQUUyQzs7QUFFM0M7QUFDQTtBQUNBO0FBQ0EsV0FBVyxtQkFBbUI7QUFDOUI7QUFDQSxXQUFXLFNBQVM7QUFDcEI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNPO0FBQ1AsVUFBVTs7QUFFVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaLFlBQVk7QUFDWjtBQUNBO0FBQ0EsV0FBVyx1REFBVTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYm1fMjAyNC8uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmstZXh0ZW5zaW9uLW1keC1qc3hAMy4wLjAvbm9kZV9tb2R1bGVzL21pY3JvbWFyay1leHRlbnNpb24tbWR4LWpzeC9kZXYvbGliL2pzeC10ZXh0LmpzPzc2YzEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstZmFjdG9yeS1tZHgtZXhwcmVzc2lvbicpLkFjb3JufSBBY29yblxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLWZhY3RvcnktbWR4LWV4cHJlc3Npb24nKS5BY29ybk9wdGlvbnN9IEFjb3JuT3B0aW9uc1xuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Db25zdHJ1Y3R9IENvbnN0cnVjdFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Ub2tlbml6ZUNvbnRleHR9IFRva2VuaXplQ29udGV4dFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Ub2tlbml6ZXJ9IFRva2VuaXplclxuICovXG5cbi8qKlxuICogQHR5cGVkZWYgT3B0aW9uc1xuICogICBDb25maWd1cmF0aW9uLlxuICogQHByb3BlcnR5IHtBY29ybk9wdGlvbnMgfCB1bmRlZmluZWR9IGFjb3JuT3B0aW9uc1xuICogICBBY29ybiBvcHRpb25zLlxuICogQHByb3BlcnR5IHtib29sZWFuIHwgdW5kZWZpbmVkfSBhZGRSZXN1bHRcbiAqICAgV2hldGhlciB0byBhZGQgYGVzdHJlZWAgZmllbGRzIHRvIHRva2VucyB3aXRoIHJlc3VsdHMgZnJvbSBhY29ybi5cbiAqL1xuXG5pbXBvcnQge2ZhY3RvcnlUYWd9IGZyb20gJy4vZmFjdG9yeS10YWcuanMnXG5cbi8qKlxuICogUGFyc2UgSlNYICh0ZXh0KS5cbiAqXG4gKiBAcGFyYW0ge0Fjb3JuIHwgdW5kZWZpbmVkfSBhY29yblxuICogICBBY29ybiBwYXJzZXIgdG8gdXNlIChvcHRpb25hbCkuXG4gKiBAcGFyYW0ge09wdGlvbnN9IG9wdGlvbnNcbiAqICAgQ29uZmlndXJhdGlvbi5cbiAqIEByZXR1cm5zIHtDb25zdHJ1Y3R9XG4gKiAgIENvbnN0cnVjdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGpzeFRleHQoYWNvcm4sIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHtuYW1lOiAnbWR4SnN4VGV4dFRhZycsIHRva2VuaXplOiB0b2tlbml6ZUpzeFRleHR9XG5cbiAgLyoqXG4gICAqIE1EWCBKU1ggKHRleHQpLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgYSA8YiAvPi5cbiAgICogICAgICAgXl5eXl5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0aGlzIHtUb2tlbml6ZUNvbnRleHR9XG4gICAqIEB0eXBlIHtUb2tlbml6ZXJ9XG4gICAqL1xuICBmdW5jdGlvbiB0b2tlbml6ZUpzeFRleHQoZWZmZWN0cywgb2ssIG5vaykge1xuICAgIHJldHVybiBmYWN0b3J5VGFnLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgZWZmZWN0cyxcbiAgICAgIG9rLFxuICAgICAgbm9rLFxuICAgICAgYWNvcm4sXG4gICAgICBvcHRpb25zLmFjb3JuT3B0aW9ucyxcbiAgICAgIG9wdGlvbnMuYWRkUmVzdWx0LFxuICAgICAgdHJ1ZSxcbiAgICAgICdtZHhKc3hUZXh0VGFnJyxcbiAgICAgICdtZHhKc3hUZXh0VGFnTWFya2VyJyxcbiAgICAgICdtZHhKc3hUZXh0VGFnQ2xvc2luZ01hcmtlcicsXG4gICAgICAnbWR4SnN4VGV4dFRhZ1NlbGZDbG9zaW5nTWFya2VyJyxcbiAgICAgICdtZHhKc3hUZXh0VGFnTmFtZScsXG4gICAgICAnbWR4SnN4VGV4dFRhZ05hbWVQcmltYXJ5JyxcbiAgICAgICdtZHhKc3hUZXh0VGFnTmFtZU1lbWJlck1hcmtlcicsXG4gICAgICAnbWR4SnN4VGV4dFRhZ05hbWVNZW1iZXInLFxuICAgICAgJ21keEpzeFRleHRUYWdOYW1lUHJlZml4TWFya2VyJyxcbiAgICAgICdtZHhKc3hUZXh0VGFnTmFtZUxvY2FsJyxcbiAgICAgICdtZHhKc3hUZXh0VGFnRXhwcmVzc2lvbkF0dHJpYnV0ZScsXG4gICAgICAnbWR4SnN4VGV4dFRhZ0V4cHJlc3Npb25BdHRyaWJ1dGVNYXJrZXInLFxuICAgICAgJ21keEpzeFRleHRUYWdFeHByZXNzaW9uQXR0cmlidXRlVmFsdWUnLFxuICAgICAgJ21keEpzeFRleHRUYWdBdHRyaWJ1dGUnLFxuICAgICAgJ21keEpzeFRleHRUYWdBdHRyaWJ1dGVOYW1lJyxcbiAgICAgICdtZHhKc3hUZXh0VGFnQXR0cmlidXRlTmFtZVByaW1hcnknLFxuICAgICAgJ21keEpzeFRleHRUYWdBdHRyaWJ1dGVOYW1lUHJlZml4TWFya2VyJyxcbiAgICAgICdtZHhKc3hUZXh0VGFnQXR0cmlidXRlTmFtZUxvY2FsJyxcbiAgICAgICdtZHhKc3hUZXh0VGFnQXR0cmlidXRlSW5pdGlhbGl6ZXJNYXJrZXInLFxuICAgICAgJ21keEpzeFRleHRUYWdBdHRyaWJ1dGVWYWx1ZUxpdGVyYWwnLFxuICAgICAgJ21keEpzeFRleHRUYWdBdHRyaWJ1dGVWYWx1ZUxpdGVyYWxNYXJrZXInLFxuICAgICAgJ21keEpzeFRleHRUYWdBdHRyaWJ1dGVWYWx1ZUxpdGVyYWxWYWx1ZScsXG4gICAgICAnbWR4SnN4VGV4dFRhZ0F0dHJpYnV0ZVZhbHVlRXhwcmVzc2lvbicsXG4gICAgICAnbWR4SnN4VGV4dFRhZ0F0dHJpYnV0ZVZhbHVlRXhwcmVzc2lvbk1hcmtlcicsXG4gICAgICAnbWR4SnN4VGV4dFRhZ0F0dHJpYnV0ZVZhbHVlRXhwcmVzc2lvblZhbHVlJ1xuICAgIClcbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.0/node_modules/micromark-extension-mdx-jsx/dev/lib/jsx-text.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.0/node_modules/micromark-extension-mdx-jsx/dev/lib/syntax.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.0/node_modules/micromark-extension-mdx-jsx/dev/lib/syntax.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mdxJsx: () => (/* binding */ mdxJsx)\n/* harmony export */ });\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-symbol */ \"(ssr)/./node_modules/.pnpm/micromark-util-symbol@2.0.0/node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var _jsx_text_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./jsx-text.js */ \"(ssr)/./node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.0/node_modules/micromark-extension-mdx-jsx/dev/lib/jsx-text.js\");\n/* harmony import */ var _jsx_flow_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./jsx-flow.js */ \"(ssr)/./node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.0/node_modules/micromark-extension-mdx-jsx/dev/lib/jsx-flow.js\");\n/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-factory-mdx-expression').Acorn} Acorn\n * @typedef {import('micromark-factory-mdx-expression').AcornOptions} AcornOptions\n */\n\n/**\n * @typedef Options\n *   Configuration (optional).\n * @property {Acorn | null | undefined} [acorn]\n *   Acorn parser to use (optional).\n * @property {AcornOptions | null | undefined} [acornOptions]\n *   Configuration for acorn (default: `{ecmaVersion: 2024, locations: true,\n *   sourceType: 'module'}`); all fields except `locations` can be set.\n * @property {boolean | null | undefined} [addResult=false]\n *   Whether to add `estree` fields to tokens with results from acorn\n *   (default: `false`).\n */\n\n\n\n\n\n/**\n * Create an extension for `micromark` to enable MDX JSX syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable MDX\n *   JSX syntax.\n */\nfunction mdxJsx(options) {\n  const settings = options || {}\n  const acorn = settings.acorn\n  /** @type {AcornOptions | undefined} */\n  let acornOptions\n\n  if (acorn) {\n    if (!acorn.parse || !acorn.parseExpressionAt) {\n      throw new Error(\n        'Expected a proper `acorn` instance passed in as `options.acorn`'\n      )\n    }\n\n    acornOptions = Object.assign(\n      {ecmaVersion: 2024, sourceType: 'module'},\n      settings.acornOptions,\n      {locations: true}\n    )\n  } else if (settings.acornOptions || settings.addResult) {\n    throw new Error('Expected an `acorn` instance passed in as `options.acorn`')\n  }\n\n  return {\n    flow: {\n      [micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.lessThan]: (0,_jsx_flow_js__WEBPACK_IMPORTED_MODULE_1__.jsxFlow)(acorn || undefined, {\n        acornOptions,\n        addResult: settings.addResult || undefined\n      })\n    },\n    text: {\n      [micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.lessThan]: (0,_jsx_text_js__WEBPACK_IMPORTED_MODULE_2__.jsxText)(acorn || undefined, {\n        acornOptions,\n        addResult: settings.addResult || undefined\n      })\n    }\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrLWV4dGVuc2lvbi1tZHgtanN4QDMuMC4wL25vZGVfbW9kdWxlcy9taWNyb21hcmstZXh0ZW5zaW9uLW1keC1qc3gvZGV2L2xpYi9zeW50YXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0EsYUFBYSwwQ0FBMEM7QUFDdkQsYUFBYSxrREFBa0Q7QUFDL0QsYUFBYSx5REFBeUQ7QUFDdEU7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsY0FBYywwQkFBMEI7QUFDeEM7QUFDQSxjQUFjLGlDQUFpQztBQUMvQyx5Q0FBeUM7QUFDekMsMEJBQTBCLElBQUk7QUFDOUIsY0FBYyw0QkFBNEI7QUFDMUM7QUFDQTtBQUNBOztBQUUyQztBQUNOO0FBQ0E7O0FBRXJDO0FBQ0E7QUFDQTtBQUNBLFdBQVcsNEJBQTRCO0FBQ3ZDO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBLGFBQWEsMEJBQTBCO0FBQ3ZDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE9BQU8sd0NBQXdDO0FBQy9DO0FBQ0EsT0FBTztBQUNQO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU8sd0RBQUssWUFBWSxxREFBTztBQUMvQjtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBLE9BQU8sd0RBQUssWUFBWSxxREFBTztBQUMvQjtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2NibV8yMDI0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFyay1leHRlbnNpb24tbWR4LWpzeEAzLjAuMC9ub2RlX21vZHVsZXMvbWljcm9tYXJrLWV4dGVuc2lvbi1tZHgtanN4L2Rldi9saWIvc3ludGF4LmpzP2U4NWMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLkV4dGVuc2lvbn0gRXh0ZW5zaW9uXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstZmFjdG9yeS1tZHgtZXhwcmVzc2lvbicpLkFjb3JufSBBY29yblxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLWZhY3RvcnktbWR4LWV4cHJlc3Npb24nKS5BY29ybk9wdGlvbnN9IEFjb3JuT3B0aW9uc1xuICovXG5cbi8qKlxuICogQHR5cGVkZWYgT3B0aW9uc1xuICogICBDb25maWd1cmF0aW9uIChvcHRpb25hbCkuXG4gKiBAcHJvcGVydHkge0Fjb3JuIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2Fjb3JuXVxuICogICBBY29ybiBwYXJzZXIgdG8gdXNlIChvcHRpb25hbCkuXG4gKiBAcHJvcGVydHkge0Fjb3JuT3B0aW9ucyB8IG51bGwgfCB1bmRlZmluZWR9IFthY29ybk9wdGlvbnNdXG4gKiAgIENvbmZpZ3VyYXRpb24gZm9yIGFjb3JuIChkZWZhdWx0OiBge2VjbWFWZXJzaW9uOiAyMDI0LCBsb2NhdGlvbnM6IHRydWUsXG4gKiAgIHNvdXJjZVR5cGU6ICdtb2R1bGUnfWApOyBhbGwgZmllbGRzIGV4Y2VwdCBgbG9jYXRpb25zYCBjYW4gYmUgc2V0LlxuICogQHByb3BlcnR5IHtib29sZWFuIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2FkZFJlc3VsdD1mYWxzZV1cbiAqICAgV2hldGhlciB0byBhZGQgYGVzdHJlZWAgZmllbGRzIHRvIHRva2VucyB3aXRoIHJlc3VsdHMgZnJvbSBhY29yblxuICogICAoZGVmYXVsdDogYGZhbHNlYCkuXG4gKi9cblxuaW1wb3J0IHtjb2Rlc30gZnJvbSAnbWljcm9tYXJrLXV0aWwtc3ltYm9sJ1xuaW1wb3J0IHtqc3hUZXh0fSBmcm9tICcuL2pzeC10ZXh0LmpzJ1xuaW1wb3J0IHtqc3hGbG93fSBmcm9tICcuL2pzeC1mbG93LmpzJ1xuXG4vKipcbiAqIENyZWF0ZSBhbiBleHRlbnNpb24gZm9yIGBtaWNyb21hcmtgIHRvIGVuYWJsZSBNRFggSlNYIHN5bnRheC5cbiAqXG4gKiBAcGFyYW0ge09wdGlvbnMgfCBudWxsIHwgdW5kZWZpbmVkfSBbb3B0aW9uc11cbiAqICAgQ29uZmlndXJhdGlvbiAob3B0aW9uYWwpLlxuICogQHJldHVybnMge0V4dGVuc2lvbn1cbiAqICAgRXh0ZW5zaW9uIGZvciBgbWljcm9tYXJrYCB0aGF0IGNhbiBiZSBwYXNzZWQgaW4gYGV4dGVuc2lvbnNgIHRvIGVuYWJsZSBNRFhcbiAqICAgSlNYIHN5bnRheC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1keEpzeChvcHRpb25zKSB7XG4gIGNvbnN0IHNldHRpbmdzID0gb3B0aW9ucyB8fCB7fVxuICBjb25zdCBhY29ybiA9IHNldHRpbmdzLmFjb3JuXG4gIC8qKiBAdHlwZSB7QWNvcm5PcHRpb25zIHwgdW5kZWZpbmVkfSAqL1xuICBsZXQgYWNvcm5PcHRpb25zXG5cbiAgaWYgKGFjb3JuKSB7XG4gICAgaWYgKCFhY29ybi5wYXJzZSB8fCAhYWNvcm4ucGFyc2VFeHByZXNzaW9uQXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0V4cGVjdGVkIGEgcHJvcGVyIGBhY29ybmAgaW5zdGFuY2UgcGFzc2VkIGluIGFzIGBvcHRpb25zLmFjb3JuYCdcbiAgICAgIClcbiAgICB9XG5cbiAgICBhY29ybk9wdGlvbnMgPSBPYmplY3QuYXNzaWduKFxuICAgICAge2VjbWFWZXJzaW9uOiAyMDI0LCBzb3VyY2VUeXBlOiAnbW9kdWxlJ30sXG4gICAgICBzZXR0aW5ncy5hY29ybk9wdGlvbnMsXG4gICAgICB7bG9jYXRpb25zOiB0cnVlfVxuICAgIClcbiAgfSBlbHNlIGlmIChzZXR0aW5ncy5hY29ybk9wdGlvbnMgfHwgc2V0dGluZ3MuYWRkUmVzdWx0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBhbiBgYWNvcm5gIGluc3RhbmNlIHBhc3NlZCBpbiBhcyBgb3B0aW9ucy5hY29ybmAnKVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBmbG93OiB7XG4gICAgICBbY29kZXMubGVzc1RoYW5dOiBqc3hGbG93KGFjb3JuIHx8IHVuZGVmaW5lZCwge1xuICAgICAgICBhY29ybk9wdGlvbnMsXG4gICAgICAgIGFkZFJlc3VsdDogc2V0dGluZ3MuYWRkUmVzdWx0IHx8IHVuZGVmaW5lZFxuICAgICAgfSlcbiAgICB9LFxuICAgIHRleHQ6IHtcbiAgICAgIFtjb2Rlcy5sZXNzVGhhbl06IGpzeFRleHQoYWNvcm4gfHwgdW5kZWZpbmVkLCB7XG4gICAgICAgIGFjb3JuT3B0aW9ucyxcbiAgICAgICAgYWRkUmVzdWx0OiBzZXR0aW5ncy5hZGRSZXN1bHQgfHwgdW5kZWZpbmVkXG4gICAgICB9KVxuICAgIH1cbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.0/node_modules/micromark-extension-mdx-jsx/dev/lib/syntax.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.0/node_modules/micromark-extension-mdx-jsx/dev/lib/factory-tag.js":
/*!******************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.0/node_modules/micromark-extension-mdx-jsx/dev/lib/factory-tag.js ***!
  \******************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   factoryTag: () => (/* binding */ factoryTag)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(rsc)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! estree-util-is-identifier-name */ \"(rsc)/./node_modules/.pnpm/estree-util-is-identifier-name@3.0.0/node_modules/estree-util-is-identifier-name/lib/index.js\");\n/* harmony import */ var micromark_factory_mdx_expression__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-factory-mdx-expression */ \"(rsc)/./node_modules/.pnpm/micromark-factory-mdx-expression@2.0.1/node_modules/micromark-factory-mdx-expression/dev/index.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-character */ \"(rsc)/./node_modules/.pnpm/micromark-util-character@2.1.0/node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/./node_modules/.pnpm/micromark-util-symbol@2.0.0/node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/./node_modules/.pnpm/micromark-util-symbol@2.0.0/node_modules/micromark-util-symbol/lib/types.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/./node_modules/.pnpm/micromark-util-symbol@2.0.0/node_modules/micromark-util-symbol/lib/constants.js\");\n/* harmony import */ var vfile_message__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! vfile-message */ \"(rsc)/./node_modules/.pnpm/vfile-message@4.0.2/node_modules/vfile-message/lib/index.js\");\n/**\n * @typedef {import('micromark-factory-mdx-expression').Acorn} Acorn\n * @typedef {import('micromark-factory-mdx-expression').AcornOptions} AcornOptions\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\n\n\n\n\n\n\n\nconst trouble = 'https://github.com/micromark/micromark-extension-mdx-jsx'\n\n/**\n * @this {TokenizeContext}\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {Acorn | undefined} acorn\n * @param {AcornOptions | undefined} acornOptions\n * @param {boolean | undefined} addResult\n * @param {boolean | undefined} allowLazy\n * @param {TokenType} tagType\n * @param {TokenType} tagMarkerType\n * @param {TokenType} tagClosingMarkerType\n * @param {TokenType} tagSelfClosingMarker\n * @param {TokenType} tagNameType\n * @param {TokenType} tagNamePrimaryType\n * @param {TokenType} tagNameMemberMarkerType\n * @param {TokenType} tagNameMemberType\n * @param {TokenType} tagNamePrefixMarkerType\n * @param {TokenType} tagNameLocalType\n * @param {TokenType} tagExpressionAttributeType\n * @param {TokenType} tagExpressionAttributeMarkerType\n * @param {TokenType} tagExpressionAttributeValueType\n * @param {TokenType} tagAttributeType\n * @param {TokenType} tagAttributeNameType\n * @param {TokenType} tagAttributeNamePrimaryType\n * @param {TokenType} tagAttributeNamePrefixMarkerType\n * @param {TokenType} tagAttributeNameLocalType\n * @param {TokenType} tagAttributeInitializerMarkerType\n * @param {TokenType} tagAttributeValueLiteralType\n * @param {TokenType} tagAttributeValueLiteralMarkerType\n * @param {TokenType} tagAttributeValueLiteralValueType\n * @param {TokenType} tagAttributeValueExpressionType\n * @param {TokenType} tagAttributeValueExpressionMarkerType\n * @param {TokenType} tagAttributeValueExpressionValueType\n */\n// eslint-disable-next-line max-params\nfunction factoryTag(\n  effects,\n  ok,\n  nok,\n  acorn,\n  acornOptions,\n  addResult,\n  allowLazy,\n  tagType,\n  tagMarkerType,\n  tagClosingMarkerType,\n  tagSelfClosingMarker,\n  tagNameType,\n  tagNamePrimaryType,\n  tagNameMemberMarkerType,\n  tagNameMemberType,\n  tagNamePrefixMarkerType,\n  tagNameLocalType,\n  tagExpressionAttributeType,\n  tagExpressionAttributeMarkerType,\n  tagExpressionAttributeValueType,\n  tagAttributeType,\n  tagAttributeNameType,\n  tagAttributeNamePrimaryType,\n  tagAttributeNamePrefixMarkerType,\n  tagAttributeNameLocalType,\n  tagAttributeInitializerMarkerType,\n  tagAttributeValueLiteralType,\n  tagAttributeValueLiteralMarkerType,\n  tagAttributeValueLiteralValueType,\n  tagAttributeValueExpressionType,\n  tagAttributeValueExpressionMarkerType,\n  tagAttributeValueExpressionValueType\n) {\n  const self = this\n  /** @type {State} */\n  let returnState\n  /** @type {NonNullable<Code> | undefined} */\n  let marker\n\n  return start\n\n  /**\n   * Start of MDX: JSX.\n   *\n   * ```markdown\n   * > | a <B /> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    ;(0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.lessThan, 'expected `<`')\n    effects.enter(tagType)\n    effects.enter(tagMarkerType)\n    effects.consume(code)\n    effects.exit(tagMarkerType)\n    return startAfter\n  }\n\n  /**\n   * After `<`.\n   *\n   * ```markdown\n   * > | a <B /> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function startAfter(code) {\n    // Deviate from JSX, which allows arbitrary whitespace.\n    // See: <https://github.com/micromark/micromark-extension-mdx-jsx/issues/7>.\n    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEndingOrSpace)(code)) {\n      return nok(code)\n    }\n\n    // Any other ES whitespace does not get this treatment.\n    returnState = nameBefore\n    return esWhitespaceStart(code)\n  }\n\n  /**\n   * Before name, self slash, or end of tag for fragments.\n   *\n   * ```markdown\n   * > | a <B> c\n   *        ^\n   * > | a </B> c\n   *        ^\n   * > | a <> b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function nameBefore(code) {\n    // Closing tag.\n    if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash) {\n      effects.enter(tagClosingMarkerType)\n      effects.consume(code)\n      effects.exit(tagClosingMarkerType)\n      returnState = closingTagNameBefore\n      return esWhitespaceStart\n    }\n\n    // Fragment opening tag.\n    if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan) {\n      return tagEnd(code)\n    }\n\n    // Start of a name.\n    if (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.start)(code)) {\n      effects.enter(tagNameType)\n      effects.enter(tagNamePrimaryType)\n      effects.consume(code)\n      return primaryName\n    }\n\n    crash(\n      code,\n      'before name',\n      'a character that can start a name, such as a letter, `$`, or `_`' +\n        (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.exclamationMark\n          ? ' (note: to create a comment in MDX, use `{/* text */}`)'\n          : '')\n    )\n  }\n\n  /**\n   * Before name of closing tag or end of closing fragment tag.\n   *\n   * ```markdown\n   * > | a </> b\n   *         ^\n   * > | a </B> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function closingTagNameBefore(code) {\n    // Fragment closing tag.\n    if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan) {\n      return tagEnd(code)\n    }\n\n    // Start of a closing tag name.\n    if (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.start)(code)) {\n      effects.enter(tagNameType)\n      effects.enter(tagNamePrimaryType)\n      effects.consume(code)\n      return primaryName\n    }\n\n    crash(\n      code,\n      'before name',\n      'a character that can start a name, such as a letter, `$`, or `_`' +\n        (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.asterisk || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash\n          ? ' (note: JS comments in JSX tags are not supported in MDX)'\n          : '')\n    )\n  }\n\n  /**\n   * In primary name.\n   *\n   * ```markdown\n   * > | a <Bc> d\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function primaryName(code) {\n    // Continuation of name: remain.\n    if (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.cont)(code, {jsx: true})) {\n      effects.consume(code)\n      return primaryName\n    }\n\n    // End of name.\n    if (\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.dot ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.colon ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftCurlyBrace ||\n      (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEndingOrSpace)(code) ||\n      (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.unicodeWhitespace)(code)\n    ) {\n      effects.exit(tagNamePrimaryType)\n      returnState = primaryNameAfter\n      return esWhitespaceStart(code)\n    }\n\n    crash(\n      code,\n      'in name',\n      'a name character such as letters, digits, `$`, or `_`; whitespace before attributes; or the end of the tag' +\n        (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.atSign\n          ? ' (note: to create a link in MDX, use `[text](url)`)'\n          : '')\n    )\n  }\n\n  /**\n   * After primary name.\n   *\n   * ```markdown\n   * > | a <b.c> d\n   *         ^\n   * > | a <b:c> d\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function primaryNameAfter(code) {\n    // Start of a member name.\n    if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.dot) {\n      effects.enter(tagNameMemberMarkerType)\n      effects.consume(code)\n      effects.exit(tagNameMemberMarkerType)\n      returnState = memberNameBefore\n      return esWhitespaceStart\n    }\n\n    // Start of a local name.\n    if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.colon) {\n      effects.enter(tagNamePrefixMarkerType)\n      effects.consume(code)\n      effects.exit(tagNamePrefixMarkerType)\n      returnState = localNameBefore\n      return esWhitespaceStart\n    }\n\n    // End of name.\n    if (\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftCurlyBrace ||\n      (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.start)(code))\n    ) {\n      effects.exit(tagNameType)\n      return attributeBefore(code)\n    }\n\n    crash(\n      code,\n      'after name',\n      'a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag'\n    )\n  }\n\n  /**\n   * Before member name.\n   *\n   * ```markdown\n   * > | a <b.c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function memberNameBefore(code) {\n    // Start of a member name.\n    if (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.start)(code)) {\n      effects.enter(tagNameMemberType)\n      effects.consume(code)\n      return memberName\n    }\n\n    crash(\n      code,\n      'before member name',\n      'a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag'\n    )\n  }\n\n  /**\n   * In member name.\n   *\n   * ```markdown\n   * > | a <b.cd> e\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function memberName(code) {\n    // Continuation of name: remain.\n    if (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.cont)(code, {jsx: true})) {\n      effects.consume(code)\n      return memberName\n    }\n\n    // End of name.\n    // Note: no `:` allowed here.\n    if (\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.dot ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftCurlyBrace ||\n      (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEndingOrSpace)(code) ||\n      (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.unicodeWhitespace)(code)\n    ) {\n      effects.exit(tagNameMemberType)\n      returnState = memberNameAfter\n      return esWhitespaceStart(code)\n    }\n\n    crash(\n      code,\n      'in member name',\n      'a name character such as letters, digits, `$`, or `_`; whitespace before attributes; or the end of the tag' +\n        (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.atSign\n          ? ' (note: to create a link in MDX, use `[text](url)`)'\n          : '')\n    )\n  }\n\n  /**\n   * After member name.\n   *\n   * ```markdown\n   * > | a <b.c> d\n   *           ^\n   * > | a <b.c.d> e\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function memberNameAfter(code) {\n    // Start another member name.\n    if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.dot) {\n      effects.enter(tagNameMemberMarkerType)\n      effects.consume(code)\n      effects.exit(tagNameMemberMarkerType)\n      returnState = memberNameBefore\n      return esWhitespaceStart\n    }\n\n    // End of name.\n    if (\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftCurlyBrace ||\n      (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.start)(code))\n    ) {\n      effects.exit(tagNameType)\n      return attributeBefore(code)\n    }\n\n    crash(\n      code,\n      'after member name',\n      'a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag'\n    )\n  }\n\n  /**\n   * Local member name.\n   *\n   * ```markdown\n   * > | a <b:c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function localNameBefore(code) {\n    // Start of a local name.\n    if (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.start)(code)) {\n      effects.enter(tagNameLocalType)\n      effects.consume(code)\n      return localName\n    }\n\n    crash(\n      code,\n      'before local name',\n      'a character that can start a name, such as a letter, `$`, or `_`' +\n        (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.plusSign ||\n        (code !== null &&\n          code > micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.dot &&\n          code < micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.colon) /* `/` - `9` */\n          ? ' (note: to create a link in MDX, use `[text](url)`)'\n          : '')\n    )\n  }\n\n  /**\n   * In local name.\n   *\n   * ```markdown\n   * > | a <b:cd> e\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function localName(code) {\n    // Continuation of name: remain.\n    if (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.cont)(code, {jsx: true})) {\n      effects.consume(code)\n      return localName\n    }\n\n    // End of local name (note that we don’t expect another colon, or a member).\n    if (\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftCurlyBrace ||\n      (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEndingOrSpace)(code) ||\n      (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.unicodeWhitespace)(code)\n    ) {\n      effects.exit(tagNameLocalType)\n      returnState = localNameAfter\n      return esWhitespaceStart(code)\n    }\n\n    crash(\n      code,\n      'in local name',\n      'a name character such as letters, digits, `$`, or `_`; whitespace before attributes; or the end of the tag'\n    )\n  }\n\n  /**\n   * After local name.\n   *\n   * This is like as `primary_name_after`, but we don’t expect colons or\n   * periods.\n   *\n   * ```markdown\n   * > | a <b.c> d\n   *           ^\n   * > | a <b.c.d> e\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function localNameAfter(code) {\n    // End of name.\n    if (\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftCurlyBrace ||\n      (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.start)(code))\n    ) {\n      effects.exit(tagNameType)\n      return attributeBefore(code)\n    }\n\n    crash(\n      code,\n      'after local name',\n      'a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag'\n    )\n  }\n\n  /**\n   * Before attribute.\n   *\n   * ```markdown\n   * > | a <b /> c\n   *          ^\n   * > | a <b > c\n   *          ^\n   * > | a <b {...c}> d\n   *          ^\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributeBefore(code) {\n    // Self-closing.\n    if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash) {\n      effects.enter(tagSelfClosingMarker)\n      effects.consume(code)\n      effects.exit(tagSelfClosingMarker)\n      returnState = selfClosing\n      return esWhitespaceStart\n    }\n\n    // End of tag.\n    if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan) {\n      return tagEnd(code)\n    }\n\n    // Attribute expression.\n    if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftCurlyBrace) {\n      return micromark_factory_mdx_expression__WEBPACK_IMPORTED_MODULE_4__.factoryMdxExpression.call(\n        self,\n        effects,\n        attributeExpressionAfter,\n        tagExpressionAttributeType,\n        tagExpressionAttributeMarkerType,\n        tagExpressionAttributeValueType,\n        acorn,\n        acornOptions,\n        addResult,\n        true,\n        false,\n        allowLazy\n      )(code)\n    }\n\n    // Start of an attribute name.\n    if (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.start)(code)) {\n      effects.enter(tagAttributeType)\n      effects.enter(tagAttributeNameType)\n      effects.enter(tagAttributeNamePrimaryType)\n      effects.consume(code)\n      return attributePrimaryName\n    }\n\n    crash(\n      code,\n      'before attribute name',\n      'a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag'\n    )\n  }\n\n  /**\n   * After attribute expression.\n   *\n   * ```markdown\n   * > | a <b {c} d/> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributeExpressionAfter(code) {\n    returnState = attributeBefore\n    return esWhitespaceStart(code)\n  }\n\n  /**\n   * In primary attribute name.\n   *\n   * ```markdown\n   * > | a <b cd/> e\n   *           ^\n   * > | a <b c:d> e\n   *           ^\n   * > | a <b c=d> e\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributePrimaryName(code) {\n    // Continuation of name: remain.\n    if (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.cont)(code, {jsx: true})) {\n      effects.consume(code)\n      return attributePrimaryName\n    }\n\n    // End of attribute name or tag.\n    if (\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.colon ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.equalsTo ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftCurlyBrace ||\n      (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEndingOrSpace)(code) ||\n      (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.unicodeWhitespace)(code)\n    ) {\n      effects.exit(tagAttributeNamePrimaryType)\n      returnState = attributePrimaryNameAfter\n      return esWhitespaceStart(code)\n    }\n\n    crash(\n      code,\n      'in attribute name',\n      'an attribute name character such as letters, digits, `$`, or `_`; `=` to initialize a value; whitespace before attributes; or the end of the tag'\n    )\n  }\n\n  /**\n   * After primary attribute name.\n   *\n   * ```markdown\n   * > | a <b c/> d\n   *           ^\n   * > | a <b c:d> e\n   *           ^\n   * > | a <b c=d> e\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributePrimaryNameAfter(code) {\n    // Start of a local name.\n    if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.colon) {\n      effects.enter(tagAttributeNamePrefixMarkerType)\n      effects.consume(code)\n      effects.exit(tagAttributeNamePrefixMarkerType)\n      returnState = attributeLocalNameBefore\n      return esWhitespaceStart\n    }\n\n    // Initializer: start of an attribute value.\n    if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.equalsTo) {\n      effects.exit(tagAttributeNameType)\n      effects.enter(tagAttributeInitializerMarkerType)\n      effects.consume(code)\n      effects.exit(tagAttributeInitializerMarkerType)\n      returnState = attributeValueBefore\n      return esWhitespaceStart\n    }\n\n    // End of tag / new attribute.\n    if (\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftCurlyBrace ||\n      (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEndingOrSpace)(code) ||\n      (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.unicodeWhitespace)(code) ||\n      (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.start)(code))\n    ) {\n      effects.exit(tagAttributeNameType)\n      effects.exit(tagAttributeType)\n      returnState = attributeBefore\n      return esWhitespaceStart(code)\n    }\n\n    crash(\n      code,\n      'after attribute name',\n      'a character that can start an attribute name, such as a letter, `$`, or `_`; `=` to initialize a value; or the end of the tag'\n    )\n  }\n\n  /**\n   * Before local attribute name.\n   *\n   * ```markdown\n   * > | a <b c:d/> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributeLocalNameBefore(code) {\n    // Start of a local name.\n    if (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.start)(code)) {\n      effects.enter(tagAttributeNameLocalType)\n      effects.consume(code)\n      return attributeLocalName\n    }\n\n    crash(\n      code,\n      'before local attribute name',\n      'a character that can start an attribute name, such as a letter, `$`, or `_`; `=` to initialize a value; or the end of the tag'\n    )\n  }\n\n  /**\n   * In local attribute name.\n   *\n   * ```markdown\n   * > | a <b c:de/> f\n   *             ^\n   * > | a <b c:d=e/> f\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributeLocalName(code) {\n    // Continuation of name: remain.\n    if (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.cont)(code, {jsx: true})) {\n      effects.consume(code)\n      return attributeLocalName\n    }\n\n    // End of local name (note that we don’t expect another colon).\n    if (\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.equalsTo ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftCurlyBrace ||\n      (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEndingOrSpace)(code) ||\n      (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.unicodeWhitespace)(code)\n    ) {\n      effects.exit(tagAttributeNameLocalType)\n      effects.exit(tagAttributeNameType)\n      returnState = attributeLocalNameAfter\n      return esWhitespaceStart(code)\n    }\n\n    crash(\n      code,\n      'in local attribute name',\n      'an attribute name character such as letters, digits, `$`, or `_`; `=` to initialize a value; whitespace before attributes; or the end of the tag'\n    )\n  }\n\n  /**\n   * After local attribute name.\n   *\n   * ```markdown\n   * > | a <b c:d/> f\n   *             ^\n   * > | a <b c:d=e/> f\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributeLocalNameAfter(code) {\n    // Start of an attribute value.\n    if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.equalsTo) {\n      effects.enter(tagAttributeInitializerMarkerType)\n      effects.consume(code)\n      effects.exit(tagAttributeInitializerMarkerType)\n      returnState = attributeValueBefore\n      return esWhitespaceStart\n    }\n\n    // End of name.\n    if (\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan ||\n      code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftCurlyBrace ||\n      (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.start)(code))\n    ) {\n      effects.exit(tagAttributeType)\n      return attributeBefore(code)\n    }\n\n    crash(\n      code,\n      'after local attribute name',\n      'a character that can start an attribute name, such as a letter, `$`, or `_`; `=` to initialize a value; or the end of the tag'\n    )\n  }\n\n  /**\n   * After `=`, before value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"/> e\n   *            ^\n   * > | a <b c={d}/> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributeValueBefore(code) {\n    // Start of double- or single quoted value.\n    if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.quotationMark || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.apostrophe) {\n      effects.enter(tagAttributeValueLiteralType)\n      effects.enter(tagAttributeValueLiteralMarkerType)\n      effects.consume(code)\n      effects.exit(tagAttributeValueLiteralMarkerType)\n      marker = code\n      return attributeValueQuotedStart\n    }\n\n    // Attribute value expression.\n    if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftCurlyBrace) {\n      return micromark_factory_mdx_expression__WEBPACK_IMPORTED_MODULE_4__.factoryMdxExpression.call(\n        self,\n        effects,\n        attributeValueExpressionAfter,\n        tagAttributeValueExpressionType,\n        tagAttributeValueExpressionMarkerType,\n        tagAttributeValueExpressionValueType,\n        acorn,\n        acornOptions,\n        addResult,\n        false,\n        false,\n        allowLazy\n      )(code)\n    }\n\n    crash(\n      code,\n      'before attribute value',\n      'a character that can start an attribute value, such as `\"`, `\\'`, or `{`' +\n        (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.lessThan\n          ? ' (note: to use an element or fragment as a prop value in MDX, use `{<element />}`)'\n          : '')\n    )\n  }\n\n  /**\n   * After attribute value expression.\n   *\n   * ```markdown\n   * > | a <b c={d} e/> f\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributeValueExpressionAfter(code) {\n    effects.exit(tagAttributeType)\n    returnState = attributeBefore\n    return esWhitespaceStart(code)\n  }\n\n  /**\n   * Before quoted literal attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"/> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributeValueQuotedStart(code) {\n    (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(marker !== undefined, 'expected `marker` to be defined')\n\n    if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof) {\n      crash(\n        code,\n        'in attribute value',\n        'a corresponding closing quote `' + String.fromCodePoint(marker) + '`'\n      )\n    }\n\n    if (code === marker) {\n      effects.enter(tagAttributeValueLiteralMarkerType)\n      effects.consume(code)\n      effects.exit(tagAttributeValueLiteralMarkerType)\n      effects.exit(tagAttributeValueLiteralType)\n      effects.exit(tagAttributeType)\n      marker = undefined\n      returnState = attributeBefore\n      return esWhitespaceStart\n    }\n\n    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEnding)(code)) {\n      returnState = attributeValueQuotedStart\n      return esWhitespaceStart(code)\n    }\n\n    effects.enter(tagAttributeValueLiteralValueType)\n    return attributeValueQuoted(code)\n  }\n\n  /**\n   * In quoted literal attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"/> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributeValueQuoted(code) {\n    if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof || code === marker || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEnding)(code)) {\n      effects.exit(tagAttributeValueLiteralValueType)\n      return attributeValueQuotedStart(code)\n    }\n\n    effects.consume(code)\n    return attributeValueQuoted\n  }\n\n  /**\n   * After self-closing slash.\n   *\n   * ```markdown\n   * > | a <b/> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function selfClosing(code) {\n    if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan) {\n      return tagEnd(code)\n    }\n\n    crash(\n      code,\n      'after self-closing slash',\n      '`>` to end the tag' +\n        (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.asterisk || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash\n          ? ' (note: JS comments in JSX tags are not supported in MDX)'\n          : '')\n    )\n  }\n\n  /**\n   * At final `>`.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagEnd(code) {\n    (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan, 'expected `>`')\n    effects.enter(tagMarkerType)\n    effects.consume(code)\n    effects.exit(tagMarkerType)\n    effects.exit(tagType)\n    return ok\n  }\n\n  /**\n   * Before optional ECMAScript whitespace.\n   *\n   * ```markdown\n   * > | a <a b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function esWhitespaceStart(code) {\n    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEnding)(code)) {\n      effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__.types.lineEnding)\n      effects.consume(code)\n      effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__.types.lineEnding)\n      return esWhitespaceEolAfter\n    }\n\n    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownSpace)(code) || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.unicodeWhitespace)(code)) {\n      effects.enter('esWhitespace')\n      return esWhitespaceInside(code)\n    }\n\n    return returnState(code)\n  }\n\n  /**\n   * In ECMAScript whitespace.\n   *\n   * ```markdown\n   * > | a <a  b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function esWhitespaceInside(code) {\n    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEnding)(code)) {\n      effects.exit('esWhitespace')\n      return esWhitespaceStart(code)\n    }\n\n    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownSpace)(code) || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.unicodeWhitespace)(code)) {\n      effects.consume(code)\n      return esWhitespaceInside\n    }\n\n    effects.exit('esWhitespace')\n    return returnState(code)\n  }\n\n  /**\n   * After eol in whitespace.\n   *\n   * ```markdown\n   * > | a <a\\nb> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function esWhitespaceEolAfter(code) {\n    // Lazy continuation in a flow tag is a syntax error.\n    if (!allowLazy && self.parser.lazy[self.now().line]) {\n      const error = new vfile_message__WEBPACK_IMPORTED_MODULE_6__.VFileMessage(\n        'Unexpected lazy line in container, expected line to be prefixed with `>` when in a block quote, whitespace when in a list, etc',\n        self.now(),\n        'micromark-extension-mdx-jsx:unexpected-lazy'\n      )\n      error.url =\n        trouble + '#unexpected-lazy-line-in-container-expected-line-to-be'\n      throw error\n    }\n\n    return esWhitespaceStart(code)\n  }\n\n  /**\n   * Crash at a nonconforming character.\n   *\n   * @param {Code} code\n   * @param {string} at\n   * @param {string} expect\n   */\n  function crash(code, at, expect) {\n    const error = new vfile_message__WEBPACK_IMPORTED_MODULE_6__.VFileMessage(\n      'Unexpected ' +\n        (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof\n          ? 'end of file'\n          : 'character `' +\n            (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.graveAccent\n              ? '` ` `'\n              : String.fromCodePoint(code)) +\n            '` (' +\n            serializeCharCode(code) +\n            ')') +\n        ' ' +\n        at +\n        ', expected ' +\n        expect,\n      self.now(),\n      'micromark-extension-mdx-jsx:unexpected-' +\n        (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof ? 'eof' : 'character')\n    )\n    error.url =\n      trouble +\n      (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof\n        ? '#unexpected-end-of-file-at-expected-expect'\n        : '#unexpected-character-at-expected-expect')\n    throw error\n  }\n}\n\n/**\n * @param {NonNullable<Code>} code\n * @returns {string}\n */\nfunction serializeCharCode(code) {\n  return (\n    'U+' +\n    code\n      .toString(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_7__.constants.numericBaseHexadecimal)\n      .toUpperCase()\n      .padStart(4, '0')\n  )\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrLWV4dGVuc2lvbi1tZHgtanN4QDMuMC4wL25vZGVfbW9kdWxlcy9taWNyb21hcmstZXh0ZW5zaW9uLW1keC1qc3gvZGV2L2xpYi9mYWN0b3J5LXRhZy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTtBQUNBLGFBQWEsa0RBQWtEO0FBQy9ELGFBQWEseURBQXlEO0FBQ3RFLGFBQWEscUNBQXFDO0FBQ2xELGFBQWEsd0NBQXdDO0FBQ3JELGFBQWEsc0NBQXNDO0FBQ25ELGFBQWEsZ0RBQWdEO0FBQzdELGFBQWEsMENBQTBDO0FBQ3ZEOztBQUVtQztBQUM0QztBQUNWO0FBTXBDO0FBQzRCO0FBQ25COztBQUUxQzs7QUFFQTtBQUNBLFVBQVU7QUFDVixXQUFXLFNBQVM7QUFDcEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLG1CQUFtQjtBQUM5QixXQUFXLDBCQUEwQjtBQUNyQyxXQUFXLHFCQUFxQjtBQUNoQyxXQUFXLHFCQUFxQjtBQUNoQyxXQUFXLFdBQVc7QUFDdEIsV0FBVyxXQUFXO0FBQ3RCLFdBQVcsV0FBVztBQUN0QixXQUFXLFdBQVc7QUFDdEIsV0FBVyxXQUFXO0FBQ3RCLFdBQVcsV0FBVztBQUN0QixXQUFXLFdBQVc7QUFDdEIsV0FBVyxXQUFXO0FBQ3RCLFdBQVcsV0FBVztBQUN0QixXQUFXLFdBQVc7QUFDdEIsV0FBVyxXQUFXO0FBQ3RCLFdBQVcsV0FBVztBQUN0QixXQUFXLFdBQVc7QUFDdEIsV0FBVyxXQUFXO0FBQ3RCLFdBQVcsV0FBVztBQUN0QixXQUFXLFdBQVc7QUFDdEIsV0FBVyxXQUFXO0FBQ3RCLFdBQVcsV0FBVztBQUN0QixXQUFXLFdBQVc7QUFDdEIsV0FBVyxXQUFXO0FBQ3RCLFdBQVcsV0FBVztBQUN0QixXQUFXLFdBQVc7QUFDdEIsV0FBVyxXQUFXO0FBQ3RCLFdBQVcsV0FBVztBQUN0QixXQUFXLFdBQVc7QUFDdEI7QUFDQTtBQUNP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QWdCLDREQUFTO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2JtXzIwMjQvLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrLWV4dGVuc2lvbi1tZHgtanN4QDMuMC4wL25vZGVfbW9kdWxlcy9taWNyb21hcmstZXh0ZW5zaW9uLW1keC1qc3gvZGV2L2xpYi9mYWN0b3J5LXRhZy5qcz9kZDFkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLWZhY3RvcnktbWR4LWV4cHJlc3Npb24nKS5BY29ybn0gQWNvcm5cbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay1mYWN0b3J5LW1keC1leHByZXNzaW9uJykuQWNvcm5PcHRpb25zfSBBY29ybk9wdGlvbnNcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuQ29kZX0gQ29kZVxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5FZmZlY3RzfSBFZmZlY3RzXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLlN0YXRlfSBTdGF0ZVxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Ub2tlbml6ZUNvbnRleHR9IFRva2VuaXplQ29udGV4dFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Ub2tlblR5cGV9IFRva2VuVHlwZVxuICovXG5cbmltcG9ydCB7b2sgYXMgYXNzZXJ0fSBmcm9tICdkZXZsb3AnXG5pbXBvcnQge2NvbnQgYXMgaWRDb250LCBzdGFydCBhcyBpZFN0YXJ0fSBmcm9tICdlc3RyZWUtdXRpbC1pcy1pZGVudGlmaWVyLW5hbWUnXG5pbXBvcnQge2ZhY3RvcnlNZHhFeHByZXNzaW9ufSBmcm9tICdtaWNyb21hcmstZmFjdG9yeS1tZHgtZXhwcmVzc2lvbidcbmltcG9ydCB7XG4gIG1hcmtkb3duTGluZUVuZGluZyxcbiAgbWFya2Rvd25MaW5lRW5kaW5nT3JTcGFjZSxcbiAgbWFya2Rvd25TcGFjZSxcbiAgdW5pY29kZVdoaXRlc3BhY2Vcbn0gZnJvbSAnbWljcm9tYXJrLXV0aWwtY2hhcmFjdGVyJ1xuaW1wb3J0IHtjb2RlcywgY29uc3RhbnRzLCB0eXBlc30gZnJvbSAnbWljcm9tYXJrLXV0aWwtc3ltYm9sJ1xuaW1wb3J0IHtWRmlsZU1lc3NhZ2V9IGZyb20gJ3ZmaWxlLW1lc3NhZ2UnXG5cbmNvbnN0IHRyb3VibGUgPSAnaHR0cHM6Ly9naXRodWIuY29tL21pY3JvbWFyay9taWNyb21hcmstZXh0ZW5zaW9uLW1keC1qc3gnXG5cbi8qKlxuICogQHRoaXMge1Rva2VuaXplQ29udGV4dH1cbiAqIEBwYXJhbSB7RWZmZWN0c30gZWZmZWN0c1xuICogQHBhcmFtIHtTdGF0ZX0gb2tcbiAqIEBwYXJhbSB7U3RhdGV9IG5va1xuICogQHBhcmFtIHtBY29ybiB8IHVuZGVmaW5lZH0gYWNvcm5cbiAqIEBwYXJhbSB7QWNvcm5PcHRpb25zIHwgdW5kZWZpbmVkfSBhY29ybk9wdGlvbnNcbiAqIEBwYXJhbSB7Ym9vbGVhbiB8IHVuZGVmaW5lZH0gYWRkUmVzdWx0XG4gKiBAcGFyYW0ge2Jvb2xlYW4gfCB1bmRlZmluZWR9IGFsbG93TGF6eVxuICogQHBhcmFtIHtUb2tlblR5cGV9IHRhZ1R5cGVcbiAqIEBwYXJhbSB7VG9rZW5UeXBlfSB0YWdNYXJrZXJUeXBlXG4gKiBAcGFyYW0ge1Rva2VuVHlwZX0gdGFnQ2xvc2luZ01hcmtlclR5cGVcbiAqIEBwYXJhbSB7VG9rZW5UeXBlfSB0YWdTZWxmQ2xvc2luZ01hcmtlclxuICogQHBhcmFtIHtUb2tlblR5cGV9IHRhZ05hbWVUeXBlXG4gKiBAcGFyYW0ge1Rva2VuVHlwZX0gdGFnTmFtZVByaW1hcnlUeXBlXG4gKiBAcGFyYW0ge1Rva2VuVHlwZX0gdGFnTmFtZU1lbWJlck1hcmtlclR5cGVcbiAqIEBwYXJhbSB7VG9rZW5UeXBlfSB0YWdOYW1lTWVtYmVyVHlwZVxuICogQHBhcmFtIHtUb2tlblR5cGV9IHRhZ05hbWVQcmVmaXhNYXJrZXJUeXBlXG4gKiBAcGFyYW0ge1Rva2VuVHlwZX0gdGFnTmFtZUxvY2FsVHlwZVxuICogQHBhcmFtIHtUb2tlblR5cGV9IHRhZ0V4cHJlc3Npb25BdHRyaWJ1dGVUeXBlXG4gKiBAcGFyYW0ge1Rva2VuVHlwZX0gdGFnRXhwcmVzc2lvbkF0dHJpYnV0ZU1hcmtlclR5cGVcbiAqIEBwYXJhbSB7VG9rZW5UeXBlfSB0YWdFeHByZXNzaW9uQXR0cmlidXRlVmFsdWVUeXBlXG4gKiBAcGFyYW0ge1Rva2VuVHlwZX0gdGFnQXR0cmlidXRlVHlwZVxuICogQHBhcmFtIHtUb2tlblR5cGV9IHRhZ0F0dHJpYnV0ZU5hbWVUeXBlXG4gKiBAcGFyYW0ge1Rva2VuVHlwZX0gdGFnQXR0cmlidXRlTmFtZVByaW1hcnlUeXBlXG4gKiBAcGFyYW0ge1Rva2VuVHlwZX0gdGFnQXR0cmlidXRlTmFtZVByZWZpeE1hcmtlclR5cGVcbiAqIEBwYXJhbSB7VG9rZW5UeXBlfSB0YWdBdHRyaWJ1dGVOYW1lTG9jYWxUeXBlXG4gKiBAcGFyYW0ge1Rva2VuVHlwZX0gdGFnQXR0cmlidXRlSW5pdGlhbGl6ZXJNYXJrZXJUeXBlXG4gKiBAcGFyYW0ge1Rva2VuVHlwZX0gdGFnQXR0cmlidXRlVmFsdWVMaXRlcmFsVHlwZVxuICogQHBhcmFtIHtUb2tlblR5cGV9IHRhZ0F0dHJpYnV0ZVZhbHVlTGl0ZXJhbE1hcmtlclR5cGVcbiAqIEBwYXJhbSB7VG9rZW5UeXBlfSB0YWdBdHRyaWJ1dGVWYWx1ZUxpdGVyYWxWYWx1ZVR5cGVcbiAqIEBwYXJhbSB7VG9rZW5UeXBlfSB0YWdBdHRyaWJ1dGVWYWx1ZUV4cHJlc3Npb25UeXBlXG4gKiBAcGFyYW0ge1Rva2VuVHlwZX0gdGFnQXR0cmlidXRlVmFsdWVFeHByZXNzaW9uTWFya2VyVHlwZVxuICogQHBhcmFtIHtUb2tlblR5cGV9IHRhZ0F0dHJpYnV0ZVZhbHVlRXhwcmVzc2lvblZhbHVlVHlwZVxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LXBhcmFtc1xuZXhwb3J0IGZ1bmN0aW9uIGZhY3RvcnlUYWcoXG4gIGVmZmVjdHMsXG4gIG9rLFxuICBub2ssXG4gIGFjb3JuLFxuICBhY29ybk9wdGlvbnMsXG4gIGFkZFJlc3VsdCxcbiAgYWxsb3dMYXp5LFxuICB0YWdUeXBlLFxuICB0YWdNYXJrZXJUeXBlLFxuICB0YWdDbG9zaW5nTWFya2VyVHlwZSxcbiAgdGFnU2VsZkNsb3NpbmdNYXJrZXIsXG4gIHRhZ05hbWVUeXBlLFxuICB0YWdOYW1lUHJpbWFyeVR5cGUsXG4gIHRhZ05hbWVNZW1iZXJNYXJrZXJUeXBlLFxuICB0YWdOYW1lTWVtYmVyVHlwZSxcbiAgdGFnTmFtZVByZWZpeE1hcmtlclR5cGUsXG4gIHRhZ05hbWVMb2NhbFR5cGUsXG4gIHRhZ0V4cHJlc3Npb25BdHRyaWJ1dGVUeXBlLFxuICB0YWdFeHByZXNzaW9uQXR0cmlidXRlTWFya2VyVHlwZSxcbiAgdGFnRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlVHlwZSxcbiAgdGFnQXR0cmlidXRlVHlwZSxcbiAgdGFnQXR0cmlidXRlTmFtZVR5cGUsXG4gIHRhZ0F0dHJpYnV0ZU5hbWVQcmltYXJ5VHlwZSxcbiAgdGFnQXR0cmlidXRlTmFtZVByZWZpeE1hcmtlclR5cGUsXG4gIHRhZ0F0dHJpYnV0ZU5hbWVMb2NhbFR5cGUsXG4gIHRhZ0F0dHJpYnV0ZUluaXRpYWxpemVyTWFya2VyVHlwZSxcbiAgdGFnQXR0cmlidXRlVmFsdWVMaXRlcmFsVHlwZSxcbiAgdGFnQXR0cmlidXRlVmFsdWVMaXRlcmFsTWFya2VyVHlwZSxcbiAgdGFnQXR0cmlidXRlVmFsdWVMaXRlcmFsVmFsdWVUeXBlLFxuICB0YWdBdHRyaWJ1dGVWYWx1ZUV4cHJlc3Npb25UeXBlLFxuICB0YWdBdHRyaWJ1dGVWYWx1ZUV4cHJlc3Npb25NYXJrZXJUeXBlLFxuICB0YWdBdHRyaWJ1dGVWYWx1ZUV4cHJlc3Npb25WYWx1ZVR5cGVcbikge1xuICBjb25zdCBzZWxmID0gdGhpc1xuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBsZXQgcmV0dXJuU3RhdGVcbiAgLyoqIEB0eXBlIHtOb25OdWxsYWJsZTxDb2RlPiB8IHVuZGVmaW5lZH0gKi9cbiAgbGV0IG1hcmtlclxuXG4gIHJldHVybiBzdGFydFxuXG4gIC8qKlxuICAgKiBTdGFydCBvZiBNRFg6IEpTWC5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IGEgPEIgLz4gY1xuICAgKiAgICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgYXNzZXJ0KGNvZGUgPT09IGNvZGVzLmxlc3NUaGFuLCAnZXhwZWN0ZWQgYDxgJylcbiAgICBlZmZlY3RzLmVudGVyKHRhZ1R5cGUpXG4gICAgZWZmZWN0cy5lbnRlcih0YWdNYXJrZXJUeXBlKVxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIGVmZmVjdHMuZXhpdCh0YWdNYXJrZXJUeXBlKVxuICAgIHJldHVybiBzdGFydEFmdGVyXG4gIH1cblxuICAvKipcbiAgICogQWZ0ZXIgYDxgLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgYSA8QiAvPiBjXG4gICAqICAgICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBzdGFydEFmdGVyKGNvZGUpIHtcbiAgICAvLyBEZXZpYXRlIGZyb20gSlNYLCB3aGljaCBhbGxvd3MgYXJiaXRyYXJ5IHdoaXRlc3BhY2UuXG4gICAgLy8gU2VlOiA8aHR0cHM6Ly9naXRodWIuY29tL21pY3JvbWFyay9taWNyb21hcmstZXh0ZW5zaW9uLW1keC1qc3gvaXNzdWVzLzc+LlxuICAgIGlmIChtYXJrZG93bkxpbmVFbmRpbmdPclNwYWNlKGNvZGUpKSB7XG4gICAgICByZXR1cm4gbm9rKGNvZGUpXG4gICAgfVxuXG4gICAgLy8gQW55IG90aGVyIEVTIHdoaXRlc3BhY2UgZG9lcyBub3QgZ2V0IHRoaXMgdHJlYXRtZW50LlxuICAgIHJldHVyblN0YXRlID0gbmFtZUJlZm9yZVxuICAgIHJldHVybiBlc1doaXRlc3BhY2VTdGFydChjb2RlKVxuICB9XG5cbiAgLyoqXG4gICAqIEJlZm9yZSBuYW1lLCBzZWxmIHNsYXNoLCBvciBlbmQgb2YgdGFnIGZvciBmcmFnbWVudHMuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCBhIDxCPiBjXG4gICAqICAgICAgICBeXG4gICAqID4gfCBhIDwvQj4gY1xuICAgKiAgICAgICAgXlxuICAgKiA+IHwgYSA8PiBiXG4gICAqICAgICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBuYW1lQmVmb3JlKGNvZGUpIHtcbiAgICAvLyBDbG9zaW5nIHRhZy5cbiAgICBpZiAoY29kZSA9PT0gY29kZXMuc2xhc2gpIHtcbiAgICAgIGVmZmVjdHMuZW50ZXIodGFnQ2xvc2luZ01hcmtlclR5cGUpXG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIGVmZmVjdHMuZXhpdCh0YWdDbG9zaW5nTWFya2VyVHlwZSlcbiAgICAgIHJldHVyblN0YXRlID0gY2xvc2luZ1RhZ05hbWVCZWZvcmVcbiAgICAgIHJldHVybiBlc1doaXRlc3BhY2VTdGFydFxuICAgIH1cblxuICAgIC8vIEZyYWdtZW50IG9wZW5pbmcgdGFnLlxuICAgIGlmIChjb2RlID09PSBjb2Rlcy5ncmVhdGVyVGhhbikge1xuICAgICAgcmV0dXJuIHRhZ0VuZChjb2RlKVxuICAgIH1cblxuICAgIC8vIFN0YXJ0IG9mIGEgbmFtZS5cbiAgICBpZiAoY29kZSAhPT0gY29kZXMuZW9mICYmIGNvZGUgPj0gMCAmJiBpZFN0YXJ0KGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmVudGVyKHRhZ05hbWVUeXBlKVxuICAgICAgZWZmZWN0cy5lbnRlcih0YWdOYW1lUHJpbWFyeVR5cGUpXG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBwcmltYXJ5TmFtZVxuICAgIH1cblxuICAgIGNyYXNoKFxuICAgICAgY29kZSxcbiAgICAgICdiZWZvcmUgbmFtZScsXG4gICAgICAnYSBjaGFyYWN0ZXIgdGhhdCBjYW4gc3RhcnQgYSBuYW1lLCBzdWNoIGFzIGEgbGV0dGVyLCBgJGAsIG9yIGBfYCcgK1xuICAgICAgICAoY29kZSA9PT0gY29kZXMuZXhjbGFtYXRpb25NYXJrXG4gICAgICAgICAgPyAnIChub3RlOiB0byBjcmVhdGUgYSBjb21tZW50IGluIE1EWCwgdXNlIGB7LyogdGV4dCAqL31gKSdcbiAgICAgICAgICA6ICcnKVxuICAgIClcbiAgfVxuXG4gIC8qKlxuICAgKiBCZWZvcmUgbmFtZSBvZiBjbG9zaW5nIHRhZyBvciBlbmQgb2YgY2xvc2luZyBmcmFnbWVudCB0YWcuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCBhIDwvPiBiXG4gICAqICAgICAgICAgXlxuICAgKiA+IHwgYSA8L0I+IGNcbiAgICogICAgICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBjbG9zaW5nVGFnTmFtZUJlZm9yZShjb2RlKSB7XG4gICAgLy8gRnJhZ21lbnQgY2xvc2luZyB0YWcuXG4gICAgaWYgKGNvZGUgPT09IGNvZGVzLmdyZWF0ZXJUaGFuKSB7XG4gICAgICByZXR1cm4gdGFnRW5kKGNvZGUpXG4gICAgfVxuXG4gICAgLy8gU3RhcnQgb2YgYSBjbG9zaW5nIHRhZyBuYW1lLlxuICAgIGlmIChjb2RlICE9PSBjb2Rlcy5lb2YgJiYgY29kZSA+PSAwICYmIGlkU3RhcnQoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuZW50ZXIodGFnTmFtZVR5cGUpXG4gICAgICBlZmZlY3RzLmVudGVyKHRhZ05hbWVQcmltYXJ5VHlwZSlcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIHByaW1hcnlOYW1lXG4gICAgfVxuXG4gICAgY3Jhc2goXG4gICAgICBjb2RlLFxuICAgICAgJ2JlZm9yZSBuYW1lJyxcbiAgICAgICdhIGNoYXJhY3RlciB0aGF0IGNhbiBzdGFydCBhIG5hbWUsIHN1Y2ggYXMgYSBsZXR0ZXIsIGAkYCwgb3IgYF9gJyArXG4gICAgICAgIChjb2RlID09PSBjb2Rlcy5hc3RlcmlzayB8fCBjb2RlID09PSBjb2Rlcy5zbGFzaFxuICAgICAgICAgID8gJyAobm90ZTogSlMgY29tbWVudHMgaW4gSlNYIHRhZ3MgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gTURYKSdcbiAgICAgICAgICA6ICcnKVxuICAgIClcbiAgfVxuXG4gIC8qKlxuICAgKiBJbiBwcmltYXJ5IG5hbWUuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCBhIDxCYz4gZFxuICAgKiAgICAgICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIHByaW1hcnlOYW1lKGNvZGUpIHtcbiAgICAvLyBDb250aW51YXRpb24gb2YgbmFtZTogcmVtYWluLlxuICAgIGlmIChjb2RlICE9PSBjb2Rlcy5lb2YgJiYgY29kZSA+PSAwICYmIGlkQ29udChjb2RlLCB7anN4OiB0cnVlfSkpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIHByaW1hcnlOYW1lXG4gICAgfVxuXG4gICAgLy8gRW5kIG9mIG5hbWUuXG4gICAgaWYgKFxuICAgICAgY29kZSA9PT0gY29kZXMuZG90IHx8XG4gICAgICBjb2RlID09PSBjb2Rlcy5zbGFzaCB8fFxuICAgICAgY29kZSA9PT0gY29kZXMuY29sb24gfHxcbiAgICAgIGNvZGUgPT09IGNvZGVzLmdyZWF0ZXJUaGFuIHx8XG4gICAgICBjb2RlID09PSBjb2Rlcy5sZWZ0Q3VybHlCcmFjZSB8fFxuICAgICAgbWFya2Rvd25MaW5lRW5kaW5nT3JTcGFjZShjb2RlKSB8fFxuICAgICAgdW5pY29kZVdoaXRlc3BhY2UoY29kZSlcbiAgICApIHtcbiAgICAgIGVmZmVjdHMuZXhpdCh0YWdOYW1lUHJpbWFyeVR5cGUpXG4gICAgICByZXR1cm5TdGF0ZSA9IHByaW1hcnlOYW1lQWZ0ZXJcbiAgICAgIHJldHVybiBlc1doaXRlc3BhY2VTdGFydChjb2RlKVxuICAgIH1cblxuICAgIGNyYXNoKFxuICAgICAgY29kZSxcbiAgICAgICdpbiBuYW1lJyxcbiAgICAgICdhIG5hbWUgY2hhcmFjdGVyIHN1Y2ggYXMgbGV0dGVycywgZGlnaXRzLCBgJGAsIG9yIGBfYDsgd2hpdGVzcGFjZSBiZWZvcmUgYXR0cmlidXRlczsgb3IgdGhlIGVuZCBvZiB0aGUgdGFnJyArXG4gICAgICAgIChjb2RlID09PSBjb2Rlcy5hdFNpZ25cbiAgICAgICAgICA/ICcgKG5vdGU6IHRvIGNyZWF0ZSBhIGxpbmsgaW4gTURYLCB1c2UgYFt0ZXh0XSh1cmwpYCknXG4gICAgICAgICAgOiAnJylcbiAgICApXG4gIH1cblxuICAvKipcbiAgICogQWZ0ZXIgcHJpbWFyeSBuYW1lLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgYSA8Yi5jPiBkXG4gICAqICAgICAgICAgXlxuICAgKiA+IHwgYSA8YjpjPiBkXG4gICAqICAgICAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gcHJpbWFyeU5hbWVBZnRlcihjb2RlKSB7XG4gICAgLy8gU3RhcnQgb2YgYSBtZW1iZXIgbmFtZS5cbiAgICBpZiAoY29kZSA9PT0gY29kZXMuZG90KSB7XG4gICAgICBlZmZlY3RzLmVudGVyKHRhZ05hbWVNZW1iZXJNYXJrZXJUeXBlKVxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBlZmZlY3RzLmV4aXQodGFnTmFtZU1lbWJlck1hcmtlclR5cGUpXG4gICAgICByZXR1cm5TdGF0ZSA9IG1lbWJlck5hbWVCZWZvcmVcbiAgICAgIHJldHVybiBlc1doaXRlc3BhY2VTdGFydFxuICAgIH1cblxuICAgIC8vIFN0YXJ0IG9mIGEgbG9jYWwgbmFtZS5cbiAgICBpZiAoY29kZSA9PT0gY29kZXMuY29sb24pIHtcbiAgICAgIGVmZmVjdHMuZW50ZXIodGFnTmFtZVByZWZpeE1hcmtlclR5cGUpXG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIGVmZmVjdHMuZXhpdCh0YWdOYW1lUHJlZml4TWFya2VyVHlwZSlcbiAgICAgIHJldHVyblN0YXRlID0gbG9jYWxOYW1lQmVmb3JlXG4gICAgICByZXR1cm4gZXNXaGl0ZXNwYWNlU3RhcnRcbiAgICB9XG5cbiAgICAvLyBFbmQgb2YgbmFtZS5cbiAgICBpZiAoXG4gICAgICBjb2RlID09PSBjb2Rlcy5zbGFzaCB8fFxuICAgICAgY29kZSA9PT0gY29kZXMuZ3JlYXRlclRoYW4gfHxcbiAgICAgIGNvZGUgPT09IGNvZGVzLmxlZnRDdXJseUJyYWNlIHx8XG4gICAgICAoY29kZSAhPT0gY29kZXMuZW9mICYmIGNvZGUgPj0gMCAmJiBpZFN0YXJ0KGNvZGUpKVxuICAgICkge1xuICAgICAgZWZmZWN0cy5leGl0KHRhZ05hbWVUeXBlKVxuICAgICAgcmV0dXJuIGF0dHJpYnV0ZUJlZm9yZShjb2RlKVxuICAgIH1cblxuICAgIGNyYXNoKFxuICAgICAgY29kZSxcbiAgICAgICdhZnRlciBuYW1lJyxcbiAgICAgICdhIGNoYXJhY3RlciB0aGF0IGNhbiBzdGFydCBhbiBhdHRyaWJ1dGUgbmFtZSwgc3VjaCBhcyBhIGxldHRlciwgYCRgLCBvciBgX2A7IHdoaXRlc3BhY2UgYmVmb3JlIGF0dHJpYnV0ZXM7IG9yIHRoZSBlbmQgb2YgdGhlIHRhZydcbiAgICApXG4gIH1cblxuICAvKipcbiAgICogQmVmb3JlIG1lbWJlciBuYW1lLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgYSA8Yi5jPiBkXG4gICAqICAgICAgICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIG1lbWJlck5hbWVCZWZvcmUoY29kZSkge1xuICAgIC8vIFN0YXJ0IG9mIGEgbWVtYmVyIG5hbWUuXG4gICAgaWYgKGNvZGUgIT09IGNvZGVzLmVvZiAmJiBjb2RlID49IDAgJiYgaWRTdGFydChjb2RlKSkge1xuICAgICAgZWZmZWN0cy5lbnRlcih0YWdOYW1lTWVtYmVyVHlwZSlcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIG1lbWJlck5hbWVcbiAgICB9XG5cbiAgICBjcmFzaChcbiAgICAgIGNvZGUsXG4gICAgICAnYmVmb3JlIG1lbWJlciBuYW1lJyxcbiAgICAgICdhIGNoYXJhY3RlciB0aGF0IGNhbiBzdGFydCBhbiBhdHRyaWJ1dGUgbmFtZSwgc3VjaCBhcyBhIGxldHRlciwgYCRgLCBvciBgX2A7IHdoaXRlc3BhY2UgYmVmb3JlIGF0dHJpYnV0ZXM7IG9yIHRoZSBlbmQgb2YgdGhlIHRhZydcbiAgICApXG4gIH1cblxuICAvKipcbiAgICogSW4gbWVtYmVyIG5hbWUuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCBhIDxiLmNkPiBlXG4gICAqICAgICAgICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBtZW1iZXJOYW1lKGNvZGUpIHtcbiAgICAvLyBDb250aW51YXRpb24gb2YgbmFtZTogcmVtYWluLlxuICAgIGlmIChjb2RlICE9PSBjb2Rlcy5lb2YgJiYgY29kZSA+PSAwICYmIGlkQ29udChjb2RlLCB7anN4OiB0cnVlfSkpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIG1lbWJlck5hbWVcbiAgICB9XG5cbiAgICAvLyBFbmQgb2YgbmFtZS5cbiAgICAvLyBOb3RlOiBubyBgOmAgYWxsb3dlZCBoZXJlLlxuICAgIGlmIChcbiAgICAgIGNvZGUgPT09IGNvZGVzLmRvdCB8fFxuICAgICAgY29kZSA9PT0gY29kZXMuc2xhc2ggfHxcbiAgICAgIGNvZGUgPT09IGNvZGVzLmdyZWF0ZXJUaGFuIHx8XG4gICAgICBjb2RlID09PSBjb2Rlcy5sZWZ0Q3VybHlCcmFjZSB8fFxuICAgICAgbWFya2Rvd25MaW5lRW5kaW5nT3JTcGFjZShjb2RlKSB8fFxuICAgICAgdW5pY29kZVdoaXRlc3BhY2UoY29kZSlcbiAgICApIHtcbiAgICAgIGVmZmVjdHMuZXhpdCh0YWdOYW1lTWVtYmVyVHlwZSlcbiAgICAgIHJldHVyblN0YXRlID0gbWVtYmVyTmFtZUFmdGVyXG4gICAgICByZXR1cm4gZXNXaGl0ZXNwYWNlU3RhcnQoY29kZSlcbiAgICB9XG5cbiAgICBjcmFzaChcbiAgICAgIGNvZGUsXG4gICAgICAnaW4gbWVtYmVyIG5hbWUnLFxuICAgICAgJ2EgbmFtZSBjaGFyYWN0ZXIgc3VjaCBhcyBsZXR0ZXJzLCBkaWdpdHMsIGAkYCwgb3IgYF9gOyB3aGl0ZXNwYWNlIGJlZm9yZSBhdHRyaWJ1dGVzOyBvciB0aGUgZW5kIG9mIHRoZSB0YWcnICtcbiAgICAgICAgKGNvZGUgPT09IGNvZGVzLmF0U2lnblxuICAgICAgICAgID8gJyAobm90ZTogdG8gY3JlYXRlIGEgbGluayBpbiBNRFgsIHVzZSBgW3RleHRdKHVybClgKSdcbiAgICAgICAgICA6ICcnKVxuICAgIClcbiAgfVxuXG4gIC8qKlxuICAgKiBBZnRlciBtZW1iZXIgbmFtZS5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IGEgPGIuYz4gZFxuICAgKiAgICAgICAgICAgXlxuICAgKiA+IHwgYSA8Yi5jLmQ+IGVcbiAgICogICAgICAgICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIG1lbWJlck5hbWVBZnRlcihjb2RlKSB7XG4gICAgLy8gU3RhcnQgYW5vdGhlciBtZW1iZXIgbmFtZS5cbiAgICBpZiAoY29kZSA9PT0gY29kZXMuZG90KSB7XG4gICAgICBlZmZlY3RzLmVudGVyKHRhZ05hbWVNZW1iZXJNYXJrZXJUeXBlKVxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBlZmZlY3RzLmV4aXQodGFnTmFtZU1lbWJlck1hcmtlclR5cGUpXG4gICAgICByZXR1cm5TdGF0ZSA9IG1lbWJlck5hbWVCZWZvcmVcbiAgICAgIHJldHVybiBlc1doaXRlc3BhY2VTdGFydFxuICAgIH1cblxuICAgIC8vIEVuZCBvZiBuYW1lLlxuICAgIGlmIChcbiAgICAgIGNvZGUgPT09IGNvZGVzLnNsYXNoIHx8XG4gICAgICBjb2RlID09PSBjb2Rlcy5ncmVhdGVyVGhhbiB8fFxuICAgICAgY29kZSA9PT0gY29kZXMubGVmdEN1cmx5QnJhY2UgfHxcbiAgICAgIChjb2RlICE9PSBjb2Rlcy5lb2YgJiYgY29kZSA+PSAwICYmIGlkU3RhcnQoY29kZSkpXG4gICAgKSB7XG4gICAgICBlZmZlY3RzLmV4aXQodGFnTmFtZVR5cGUpXG4gICAgICByZXR1cm4gYXR0cmlidXRlQmVmb3JlKGNvZGUpXG4gICAgfVxuXG4gICAgY3Jhc2goXG4gICAgICBjb2RlLFxuICAgICAgJ2FmdGVyIG1lbWJlciBuYW1lJyxcbiAgICAgICdhIGNoYXJhY3RlciB0aGF0IGNhbiBzdGFydCBhbiBhdHRyaWJ1dGUgbmFtZSwgc3VjaCBhcyBhIGxldHRlciwgYCRgLCBvciBgX2A7IHdoaXRlc3BhY2UgYmVmb3JlIGF0dHJpYnV0ZXM7IG9yIHRoZSBlbmQgb2YgdGhlIHRhZydcbiAgICApXG4gIH1cblxuICAvKipcbiAgICogTG9jYWwgbWVtYmVyIG5hbWUuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCBhIDxiOmM+IGRcbiAgICogICAgICAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gbG9jYWxOYW1lQmVmb3JlKGNvZGUpIHtcbiAgICAvLyBTdGFydCBvZiBhIGxvY2FsIG5hbWUuXG4gICAgaWYgKGNvZGUgIT09IGNvZGVzLmVvZiAmJiBjb2RlID49IDAgJiYgaWRTdGFydChjb2RlKSkge1xuICAgICAgZWZmZWN0cy5lbnRlcih0YWdOYW1lTG9jYWxUeXBlKVxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gbG9jYWxOYW1lXG4gICAgfVxuXG4gICAgY3Jhc2goXG4gICAgICBjb2RlLFxuICAgICAgJ2JlZm9yZSBsb2NhbCBuYW1lJyxcbiAgICAgICdhIGNoYXJhY3RlciB0aGF0IGNhbiBzdGFydCBhIG5hbWUsIHN1Y2ggYXMgYSBsZXR0ZXIsIGAkYCwgb3IgYF9gJyArXG4gICAgICAgIChjb2RlID09PSBjb2Rlcy5wbHVzU2lnbiB8fFxuICAgICAgICAoY29kZSAhPT0gbnVsbCAmJlxuICAgICAgICAgIGNvZGUgPiBjb2Rlcy5kb3QgJiZcbiAgICAgICAgICBjb2RlIDwgY29kZXMuY29sb24pIC8qIGAvYCAtIGA5YCAqL1xuICAgICAgICAgID8gJyAobm90ZTogdG8gY3JlYXRlIGEgbGluayBpbiBNRFgsIHVzZSBgW3RleHRdKHVybClgKSdcbiAgICAgICAgICA6ICcnKVxuICAgIClcbiAgfVxuXG4gIC8qKlxuICAgKiBJbiBsb2NhbCBuYW1lLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgYSA8YjpjZD4gZVxuICAgKiAgICAgICAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gbG9jYWxOYW1lKGNvZGUpIHtcbiAgICAvLyBDb250aW51YXRpb24gb2YgbmFtZTogcmVtYWluLlxuICAgIGlmIChjb2RlICE9PSBjb2Rlcy5lb2YgJiYgY29kZSA+PSAwICYmIGlkQ29udChjb2RlLCB7anN4OiB0cnVlfSkpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGxvY2FsTmFtZVxuICAgIH1cblxuICAgIC8vIEVuZCBvZiBsb2NhbCBuYW1lIChub3RlIHRoYXQgd2UgZG9u4oCZdCBleHBlY3QgYW5vdGhlciBjb2xvbiwgb3IgYSBtZW1iZXIpLlxuICAgIGlmIChcbiAgICAgIGNvZGUgPT09IGNvZGVzLnNsYXNoIHx8XG4gICAgICBjb2RlID09PSBjb2Rlcy5ncmVhdGVyVGhhbiB8fFxuICAgICAgY29kZSA9PT0gY29kZXMubGVmdEN1cmx5QnJhY2UgfHxcbiAgICAgIG1hcmtkb3duTGluZUVuZGluZ09yU3BhY2UoY29kZSkgfHxcbiAgICAgIHVuaWNvZGVXaGl0ZXNwYWNlKGNvZGUpXG4gICAgKSB7XG4gICAgICBlZmZlY3RzLmV4aXQodGFnTmFtZUxvY2FsVHlwZSlcbiAgICAgIHJldHVyblN0YXRlID0gbG9jYWxOYW1lQWZ0ZXJcbiAgICAgIHJldHVybiBlc1doaXRlc3BhY2VTdGFydChjb2RlKVxuICAgIH1cblxuICAgIGNyYXNoKFxuICAgICAgY29kZSxcbiAgICAgICdpbiBsb2NhbCBuYW1lJyxcbiAgICAgICdhIG5hbWUgY2hhcmFjdGVyIHN1Y2ggYXMgbGV0dGVycywgZGlnaXRzLCBgJGAsIG9yIGBfYDsgd2hpdGVzcGFjZSBiZWZvcmUgYXR0cmlidXRlczsgb3IgdGhlIGVuZCBvZiB0aGUgdGFnJ1xuICAgIClcbiAgfVxuXG4gIC8qKlxuICAgKiBBZnRlciBsb2NhbCBuYW1lLlxuICAgKlxuICAgKiBUaGlzIGlzIGxpa2UgYXMgYHByaW1hcnlfbmFtZV9hZnRlcmAsIGJ1dCB3ZSBkb27igJl0IGV4cGVjdCBjb2xvbnMgb3JcbiAgICogcGVyaW9kcy5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IGEgPGIuYz4gZFxuICAgKiAgICAgICAgICAgXlxuICAgKiA+IHwgYSA8Yi5jLmQ+IGVcbiAgICogICAgICAgICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIGxvY2FsTmFtZUFmdGVyKGNvZGUpIHtcbiAgICAvLyBFbmQgb2YgbmFtZS5cbiAgICBpZiAoXG4gICAgICBjb2RlID09PSBjb2Rlcy5zbGFzaCB8fFxuICAgICAgY29kZSA9PT0gY29kZXMuZ3JlYXRlclRoYW4gfHxcbiAgICAgIGNvZGUgPT09IGNvZGVzLmxlZnRDdXJseUJyYWNlIHx8XG4gICAgICAoY29kZSAhPT0gY29kZXMuZW9mICYmIGNvZGUgPj0gMCAmJiBpZFN0YXJ0KGNvZGUpKVxuICAgICkge1xuICAgICAgZWZmZWN0cy5leGl0KHRhZ05hbWVUeXBlKVxuICAgICAgcmV0dXJuIGF0dHJpYnV0ZUJlZm9yZShjb2RlKVxuICAgIH1cblxuICAgIGNyYXNoKFxuICAgICAgY29kZSxcbiAgICAgICdhZnRlciBsb2NhbCBuYW1lJyxcbiAgICAgICdhIGNoYXJhY3RlciB0aGF0IGNhbiBzdGFydCBhbiBhdHRyaWJ1dGUgbmFtZSwgc3VjaCBhcyBhIGxldHRlciwgYCRgLCBvciBgX2A7IHdoaXRlc3BhY2UgYmVmb3JlIGF0dHJpYnV0ZXM7IG9yIHRoZSBlbmQgb2YgdGhlIHRhZydcbiAgICApXG4gIH1cblxuICAvKipcbiAgICogQmVmb3JlIGF0dHJpYnV0ZS5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IGEgPGIgLz4gY1xuICAgKiAgICAgICAgICBeXG4gICAqID4gfCBhIDxiID4gY1xuICAgKiAgICAgICAgICBeXG4gICAqID4gfCBhIDxiIHsuLi5jfT4gZFxuICAgKiAgICAgICAgICBeXG4gICAqID4gfCBhIDxiIGM+IGRcbiAgICogICAgICAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gYXR0cmlidXRlQmVmb3JlKGNvZGUpIHtcbiAgICAvLyBTZWxmLWNsb3NpbmcuXG4gICAgaWYgKGNvZGUgPT09IGNvZGVzLnNsYXNoKSB7XG4gICAgICBlZmZlY3RzLmVudGVyKHRhZ1NlbGZDbG9zaW5nTWFya2VyKVxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBlZmZlY3RzLmV4aXQodGFnU2VsZkNsb3NpbmdNYXJrZXIpXG4gICAgICByZXR1cm5TdGF0ZSA9IHNlbGZDbG9zaW5nXG4gICAgICByZXR1cm4gZXNXaGl0ZXNwYWNlU3RhcnRcbiAgICB9XG5cbiAgICAvLyBFbmQgb2YgdGFnLlxuICAgIGlmIChjb2RlID09PSBjb2Rlcy5ncmVhdGVyVGhhbikge1xuICAgICAgcmV0dXJuIHRhZ0VuZChjb2RlKVxuICAgIH1cblxuICAgIC8vIEF0dHJpYnV0ZSBleHByZXNzaW9uLlxuICAgIGlmIChjb2RlID09PSBjb2Rlcy5sZWZ0Q3VybHlCcmFjZSkge1xuICAgICAgcmV0dXJuIGZhY3RvcnlNZHhFeHByZXNzaW9uLmNhbGwoXG4gICAgICAgIHNlbGYsXG4gICAgICAgIGVmZmVjdHMsXG4gICAgICAgIGF0dHJpYnV0ZUV4cHJlc3Npb25BZnRlcixcbiAgICAgICAgdGFnRXhwcmVzc2lvbkF0dHJpYnV0ZVR5cGUsXG4gICAgICAgIHRhZ0V4cHJlc3Npb25BdHRyaWJ1dGVNYXJrZXJUeXBlLFxuICAgICAgICB0YWdFeHByZXNzaW9uQXR0cmlidXRlVmFsdWVUeXBlLFxuICAgICAgICBhY29ybixcbiAgICAgICAgYWNvcm5PcHRpb25zLFxuICAgICAgICBhZGRSZXN1bHQsXG4gICAgICAgIHRydWUsXG4gICAgICAgIGZhbHNlLFxuICAgICAgICBhbGxvd0xhenlcbiAgICAgICkoY29kZSlcbiAgICB9XG5cbiAgICAvLyBTdGFydCBvZiBhbiBhdHRyaWJ1dGUgbmFtZS5cbiAgICBpZiAoY29kZSAhPT0gY29kZXMuZW9mICYmIGNvZGUgPj0gMCAmJiBpZFN0YXJ0KGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmVudGVyKHRhZ0F0dHJpYnV0ZVR5cGUpXG4gICAgICBlZmZlY3RzLmVudGVyKHRhZ0F0dHJpYnV0ZU5hbWVUeXBlKVxuICAgICAgZWZmZWN0cy5lbnRlcih0YWdBdHRyaWJ1dGVOYW1lUHJpbWFyeVR5cGUpXG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBhdHRyaWJ1dGVQcmltYXJ5TmFtZVxuICAgIH1cblxuICAgIGNyYXNoKFxuICAgICAgY29kZSxcbiAgICAgICdiZWZvcmUgYXR0cmlidXRlIG5hbWUnLFxuICAgICAgJ2EgY2hhcmFjdGVyIHRoYXQgY2FuIHN0YXJ0IGFuIGF0dHJpYnV0ZSBuYW1lLCBzdWNoIGFzIGEgbGV0dGVyLCBgJGAsIG9yIGBfYDsgd2hpdGVzcGFjZSBiZWZvcmUgYXR0cmlidXRlczsgb3IgdGhlIGVuZCBvZiB0aGUgdGFnJ1xuICAgIClcbiAgfVxuXG4gIC8qKlxuICAgKiBBZnRlciBhdHRyaWJ1dGUgZXhwcmVzc2lvbi5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IGEgPGIge2N9IGQvPiBlXG4gICAqICAgICAgICAgICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIGF0dHJpYnV0ZUV4cHJlc3Npb25BZnRlcihjb2RlKSB7XG4gICAgcmV0dXJuU3RhdGUgPSBhdHRyaWJ1dGVCZWZvcmVcbiAgICByZXR1cm4gZXNXaGl0ZXNwYWNlU3RhcnQoY29kZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBJbiBwcmltYXJ5IGF0dHJpYnV0ZSBuYW1lLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgYSA8YiBjZC8+IGVcbiAgICogICAgICAgICAgIF5cbiAgICogPiB8IGEgPGIgYzpkPiBlXG4gICAqICAgICAgICAgICBeXG4gICAqID4gfCBhIDxiIGM9ZD4gZVxuICAgKiAgICAgICAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gYXR0cmlidXRlUHJpbWFyeU5hbWUoY29kZSkge1xuICAgIC8vIENvbnRpbnVhdGlvbiBvZiBuYW1lOiByZW1haW4uXG4gICAgaWYgKGNvZGUgIT09IGNvZGVzLmVvZiAmJiBjb2RlID49IDAgJiYgaWRDb250KGNvZGUsIHtqc3g6IHRydWV9KSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gYXR0cmlidXRlUHJpbWFyeU5hbWVcbiAgICB9XG5cbiAgICAvLyBFbmQgb2YgYXR0cmlidXRlIG5hbWUgb3IgdGFnLlxuICAgIGlmIChcbiAgICAgIGNvZGUgPT09IGNvZGVzLnNsYXNoIHx8XG4gICAgICBjb2RlID09PSBjb2Rlcy5jb2xvbiB8fFxuICAgICAgY29kZSA9PT0gY29kZXMuZXF1YWxzVG8gfHxcbiAgICAgIGNvZGUgPT09IGNvZGVzLmdyZWF0ZXJUaGFuIHx8XG4gICAgICBjb2RlID09PSBjb2Rlcy5sZWZ0Q3VybHlCcmFjZSB8fFxuICAgICAgbWFya2Rvd25MaW5lRW5kaW5nT3JTcGFjZShjb2RlKSB8fFxuICAgICAgdW5pY29kZVdoaXRlc3BhY2UoY29kZSlcbiAgICApIHtcbiAgICAgIGVmZmVjdHMuZXhpdCh0YWdBdHRyaWJ1dGVOYW1lUHJpbWFyeVR5cGUpXG4gICAgICByZXR1cm5TdGF0ZSA9IGF0dHJpYnV0ZVByaW1hcnlOYW1lQWZ0ZXJcbiAgICAgIHJldHVybiBlc1doaXRlc3BhY2VTdGFydChjb2RlKVxuICAgIH1cblxuICAgIGNyYXNoKFxuICAgICAgY29kZSxcbiAgICAgICdpbiBhdHRyaWJ1dGUgbmFtZScsXG4gICAgICAnYW4gYXR0cmlidXRlIG5hbWUgY2hhcmFjdGVyIHN1Y2ggYXMgbGV0dGVycywgZGlnaXRzLCBgJGAsIG9yIGBfYDsgYD1gIHRvIGluaXRpYWxpemUgYSB2YWx1ZTsgd2hpdGVzcGFjZSBiZWZvcmUgYXR0cmlidXRlczsgb3IgdGhlIGVuZCBvZiB0aGUgdGFnJ1xuICAgIClcbiAgfVxuXG4gIC8qKlxuICAgKiBBZnRlciBwcmltYXJ5IGF0dHJpYnV0ZSBuYW1lLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgYSA8YiBjLz4gZFxuICAgKiAgICAgICAgICAgXlxuICAgKiA+IHwgYSA8YiBjOmQ+IGVcbiAgICogICAgICAgICAgIF5cbiAgICogPiB8IGEgPGIgYz1kPiBlXG4gICAqICAgICAgICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBhdHRyaWJ1dGVQcmltYXJ5TmFtZUFmdGVyKGNvZGUpIHtcbiAgICAvLyBTdGFydCBvZiBhIGxvY2FsIG5hbWUuXG4gICAgaWYgKGNvZGUgPT09IGNvZGVzLmNvbG9uKSB7XG4gICAgICBlZmZlY3RzLmVudGVyKHRhZ0F0dHJpYnV0ZU5hbWVQcmVmaXhNYXJrZXJUeXBlKVxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBlZmZlY3RzLmV4aXQodGFnQXR0cmlidXRlTmFtZVByZWZpeE1hcmtlclR5cGUpXG4gICAgICByZXR1cm5TdGF0ZSA9IGF0dHJpYnV0ZUxvY2FsTmFtZUJlZm9yZVxuICAgICAgcmV0dXJuIGVzV2hpdGVzcGFjZVN0YXJ0XG4gICAgfVxuXG4gICAgLy8gSW5pdGlhbGl6ZXI6IHN0YXJ0IG9mIGFuIGF0dHJpYnV0ZSB2YWx1ZS5cbiAgICBpZiAoY29kZSA9PT0gY29kZXMuZXF1YWxzVG8pIHtcbiAgICAgIGVmZmVjdHMuZXhpdCh0YWdBdHRyaWJ1dGVOYW1lVHlwZSlcbiAgICAgIGVmZmVjdHMuZW50ZXIodGFnQXR0cmlidXRlSW5pdGlhbGl6ZXJNYXJrZXJUeXBlKVxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBlZmZlY3RzLmV4aXQodGFnQXR0cmlidXRlSW5pdGlhbGl6ZXJNYXJrZXJUeXBlKVxuICAgICAgcmV0dXJuU3RhdGUgPSBhdHRyaWJ1dGVWYWx1ZUJlZm9yZVxuICAgICAgcmV0dXJuIGVzV2hpdGVzcGFjZVN0YXJ0XG4gICAgfVxuXG4gICAgLy8gRW5kIG9mIHRhZyAvIG5ldyBhdHRyaWJ1dGUuXG4gICAgaWYgKFxuICAgICAgY29kZSA9PT0gY29kZXMuc2xhc2ggfHxcbiAgICAgIGNvZGUgPT09IGNvZGVzLmdyZWF0ZXJUaGFuIHx8XG4gICAgICBjb2RlID09PSBjb2Rlcy5sZWZ0Q3VybHlCcmFjZSB8fFxuICAgICAgbWFya2Rvd25MaW5lRW5kaW5nT3JTcGFjZShjb2RlKSB8fFxuICAgICAgdW5pY29kZVdoaXRlc3BhY2UoY29kZSkgfHxcbiAgICAgIChjb2RlICE9PSBjb2Rlcy5lb2YgJiYgY29kZSA+PSAwICYmIGlkU3RhcnQoY29kZSkpXG4gICAgKSB7XG4gICAgICBlZmZlY3RzLmV4aXQodGFnQXR0cmlidXRlTmFtZVR5cGUpXG4gICAgICBlZmZlY3RzLmV4aXQodGFnQXR0cmlidXRlVHlwZSlcbiAgICAgIHJldHVyblN0YXRlID0gYXR0cmlidXRlQmVmb3JlXG4gICAgICByZXR1cm4gZXNXaGl0ZXNwYWNlU3RhcnQoY29kZSlcbiAgICB9XG5cbiAgICBjcmFzaChcbiAgICAgIGNvZGUsXG4gICAgICAnYWZ0ZXIgYXR0cmlidXRlIG5hbWUnLFxuICAgICAgJ2EgY2hhcmFjdGVyIHRoYXQgY2FuIHN0YXJ0IGFuIGF0dHJpYnV0ZSBuYW1lLCBzdWNoIGFzIGEgbGV0dGVyLCBgJGAsIG9yIGBfYDsgYD1gIHRvIGluaXRpYWxpemUgYSB2YWx1ZTsgb3IgdGhlIGVuZCBvZiB0aGUgdGFnJ1xuICAgIClcbiAgfVxuXG4gIC8qKlxuICAgKiBCZWZvcmUgbG9jYWwgYXR0cmlidXRlIG5hbWUuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCBhIDxiIGM6ZC8+IGVcbiAgICogICAgICAgICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBhdHRyaWJ1dGVMb2NhbE5hbWVCZWZvcmUoY29kZSkge1xuICAgIC8vIFN0YXJ0IG9mIGEgbG9jYWwgbmFtZS5cbiAgICBpZiAoY29kZSAhPT0gY29kZXMuZW9mICYmIGNvZGUgPj0gMCAmJiBpZFN0YXJ0KGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmVudGVyKHRhZ0F0dHJpYnV0ZU5hbWVMb2NhbFR5cGUpXG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBhdHRyaWJ1dGVMb2NhbE5hbWVcbiAgICB9XG5cbiAgICBjcmFzaChcbiAgICAgIGNvZGUsXG4gICAgICAnYmVmb3JlIGxvY2FsIGF0dHJpYnV0ZSBuYW1lJyxcbiAgICAgICdhIGNoYXJhY3RlciB0aGF0IGNhbiBzdGFydCBhbiBhdHRyaWJ1dGUgbmFtZSwgc3VjaCBhcyBhIGxldHRlciwgYCRgLCBvciBgX2A7IGA9YCB0byBpbml0aWFsaXplIGEgdmFsdWU7IG9yIHRoZSBlbmQgb2YgdGhlIHRhZydcbiAgICApXG4gIH1cblxuICAvKipcbiAgICogSW4gbG9jYWwgYXR0cmlidXRlIG5hbWUuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCBhIDxiIGM6ZGUvPiBmXG4gICAqICAgICAgICAgICAgIF5cbiAgICogPiB8IGEgPGIgYzpkPWUvPiBmXG4gICAqICAgICAgICAgICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIGF0dHJpYnV0ZUxvY2FsTmFtZShjb2RlKSB7XG4gICAgLy8gQ29udGludWF0aW9uIG9mIG5hbWU6IHJlbWFpbi5cbiAgICBpZiAoY29kZSAhPT0gY29kZXMuZW9mICYmIGNvZGUgPj0gMCAmJiBpZENvbnQoY29kZSwge2pzeDogdHJ1ZX0pKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBhdHRyaWJ1dGVMb2NhbE5hbWVcbiAgICB9XG5cbiAgICAvLyBFbmQgb2YgbG9jYWwgbmFtZSAobm90ZSB0aGF0IHdlIGRvbuKAmXQgZXhwZWN0IGFub3RoZXIgY29sb24pLlxuICAgIGlmIChcbiAgICAgIGNvZGUgPT09IGNvZGVzLnNsYXNoIHx8XG4gICAgICBjb2RlID09PSBjb2Rlcy5lcXVhbHNUbyB8fFxuICAgICAgY29kZSA9PT0gY29kZXMuZ3JlYXRlclRoYW4gfHxcbiAgICAgIGNvZGUgPT09IGNvZGVzLmxlZnRDdXJseUJyYWNlIHx8XG4gICAgICBtYXJrZG93bkxpbmVFbmRpbmdPclNwYWNlKGNvZGUpIHx8XG4gICAgICB1bmljb2RlV2hpdGVzcGFjZShjb2RlKVxuICAgICkge1xuICAgICAgZWZmZWN0cy5leGl0KHRhZ0F0dHJpYnV0ZU5hbWVMb2NhbFR5cGUpXG4gICAgICBlZmZlY3RzLmV4aXQodGFnQXR0cmlidXRlTmFtZVR5cGUpXG4gICAgICByZXR1cm5TdGF0ZSA9IGF0dHJpYnV0ZUxvY2FsTmFtZUFmdGVyXG4gICAgICByZXR1cm4gZXNXaGl0ZXNwYWNlU3RhcnQoY29kZSlcbiAgICB9XG5cbiAgICBjcmFzaChcbiAgICAgIGNvZGUsXG4gICAgICAnaW4gbG9jYWwgYXR0cmlidXRlIG5hbWUnLFxuICAgICAgJ2FuIGF0dHJpYnV0ZSBuYW1lIGNoYXJhY3RlciBzdWNoIGFzIGxldHRlcnMsIGRpZ2l0cywgYCRgLCBvciBgX2A7IGA9YCB0byBpbml0aWFsaXplIGEgdmFsdWU7IHdoaXRlc3BhY2UgYmVmb3JlIGF0dHJpYnV0ZXM7IG9yIHRoZSBlbmQgb2YgdGhlIHRhZydcbiAgICApXG4gIH1cblxuICAvKipcbiAgICogQWZ0ZXIgbG9jYWwgYXR0cmlidXRlIG5hbWUuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCBhIDxiIGM6ZC8+IGZcbiAgICogICAgICAgICAgICAgXlxuICAgKiA+IHwgYSA8YiBjOmQ9ZS8+IGZcbiAgICogICAgICAgICAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gYXR0cmlidXRlTG9jYWxOYW1lQWZ0ZXIoY29kZSkge1xuICAgIC8vIFN0YXJ0IG9mIGFuIGF0dHJpYnV0ZSB2YWx1ZS5cbiAgICBpZiAoY29kZSA9PT0gY29kZXMuZXF1YWxzVG8pIHtcbiAgICAgIGVmZmVjdHMuZW50ZXIodGFnQXR0cmlidXRlSW5pdGlhbGl6ZXJNYXJrZXJUeXBlKVxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBlZmZlY3RzLmV4aXQodGFnQXR0cmlidXRlSW5pdGlhbGl6ZXJNYXJrZXJUeXBlKVxuICAgICAgcmV0dXJuU3RhdGUgPSBhdHRyaWJ1dGVWYWx1ZUJlZm9yZVxuICAgICAgcmV0dXJuIGVzV2hpdGVzcGFjZVN0YXJ0XG4gICAgfVxuXG4gICAgLy8gRW5kIG9mIG5hbWUuXG4gICAgaWYgKFxuICAgICAgY29kZSA9PT0gY29kZXMuc2xhc2ggfHxcbiAgICAgIGNvZGUgPT09IGNvZGVzLmdyZWF0ZXJUaGFuIHx8XG4gICAgICBjb2RlID09PSBjb2Rlcy5sZWZ0Q3VybHlCcmFjZSB8fFxuICAgICAgKGNvZGUgIT09IGNvZGVzLmVvZiAmJiBjb2RlID49IDAgJiYgaWRTdGFydChjb2RlKSlcbiAgICApIHtcbiAgICAgIGVmZmVjdHMuZXhpdCh0YWdBdHRyaWJ1dGVUeXBlKVxuICAgICAgcmV0dXJuIGF0dHJpYnV0ZUJlZm9yZShjb2RlKVxuICAgIH1cblxuICAgIGNyYXNoKFxuICAgICAgY29kZSxcbiAgICAgICdhZnRlciBsb2NhbCBhdHRyaWJ1dGUgbmFtZScsXG4gICAgICAnYSBjaGFyYWN0ZXIgdGhhdCBjYW4gc3RhcnQgYW4gYXR0cmlidXRlIG5hbWUsIHN1Y2ggYXMgYSBsZXR0ZXIsIGAkYCwgb3IgYF9gOyBgPWAgdG8gaW5pdGlhbGl6ZSBhIHZhbHVlOyBvciB0aGUgZW5kIG9mIHRoZSB0YWcnXG4gICAgKVxuICB9XG5cbiAgLyoqXG4gICAqIEFmdGVyIGA9YCwgYmVmb3JlIHZhbHVlLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgYSA8YiBjPVwiZFwiLz4gZVxuICAgKiAgICAgICAgICAgIF5cbiAgICogPiB8IGEgPGIgYz17ZH0vPiBlXG4gICAqICAgICAgICAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gYXR0cmlidXRlVmFsdWVCZWZvcmUoY29kZSkge1xuICAgIC8vIFN0YXJ0IG9mIGRvdWJsZS0gb3Igc2luZ2xlIHF1b3RlZCB2YWx1ZS5cbiAgICBpZiAoY29kZSA9PT0gY29kZXMucXVvdGF0aW9uTWFyayB8fCBjb2RlID09PSBjb2Rlcy5hcG9zdHJvcGhlKSB7XG4gICAgICBlZmZlY3RzLmVudGVyKHRhZ0F0dHJpYnV0ZVZhbHVlTGl0ZXJhbFR5cGUpXG4gICAgICBlZmZlY3RzLmVudGVyKHRhZ0F0dHJpYnV0ZVZhbHVlTGl0ZXJhbE1hcmtlclR5cGUpXG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIGVmZmVjdHMuZXhpdCh0YWdBdHRyaWJ1dGVWYWx1ZUxpdGVyYWxNYXJrZXJUeXBlKVxuICAgICAgbWFya2VyID0gY29kZVxuICAgICAgcmV0dXJuIGF0dHJpYnV0ZVZhbHVlUXVvdGVkU3RhcnRcbiAgICB9XG5cbiAgICAvLyBBdHRyaWJ1dGUgdmFsdWUgZXhwcmVzc2lvbi5cbiAgICBpZiAoY29kZSA9PT0gY29kZXMubGVmdEN1cmx5QnJhY2UpIHtcbiAgICAgIHJldHVybiBmYWN0b3J5TWR4RXhwcmVzc2lvbi5jYWxsKFxuICAgICAgICBzZWxmLFxuICAgICAgICBlZmZlY3RzLFxuICAgICAgICBhdHRyaWJ1dGVWYWx1ZUV4cHJlc3Npb25BZnRlcixcbiAgICAgICAgdGFnQXR0cmlidXRlVmFsdWVFeHByZXNzaW9uVHlwZSxcbiAgICAgICAgdGFnQXR0cmlidXRlVmFsdWVFeHByZXNzaW9uTWFya2VyVHlwZSxcbiAgICAgICAgdGFnQXR0cmlidXRlVmFsdWVFeHByZXNzaW9uVmFsdWVUeXBlLFxuICAgICAgICBhY29ybixcbiAgICAgICAgYWNvcm5PcHRpb25zLFxuICAgICAgICBhZGRSZXN1bHQsXG4gICAgICAgIGZhbHNlLFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgYWxsb3dMYXp5XG4gICAgICApKGNvZGUpXG4gICAgfVxuXG4gICAgY3Jhc2goXG4gICAgICBjb2RlLFxuICAgICAgJ2JlZm9yZSBhdHRyaWJ1dGUgdmFsdWUnLFxuICAgICAgJ2EgY2hhcmFjdGVyIHRoYXQgY2FuIHN0YXJ0IGFuIGF0dHJpYnV0ZSB2YWx1ZSwgc3VjaCBhcyBgXCJgLCBgXFwnYCwgb3IgYHtgJyArXG4gICAgICAgIChjb2RlID09PSBjb2Rlcy5sZXNzVGhhblxuICAgICAgICAgID8gJyAobm90ZTogdG8gdXNlIGFuIGVsZW1lbnQgb3IgZnJhZ21lbnQgYXMgYSBwcm9wIHZhbHVlIGluIE1EWCwgdXNlIGB7PGVsZW1lbnQgLz59YCknXG4gICAgICAgICAgOiAnJylcbiAgICApXG4gIH1cblxuICAvKipcbiAgICogQWZ0ZXIgYXR0cmlidXRlIHZhbHVlIGV4cHJlc3Npb24uXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCBhIDxiIGM9e2R9IGUvPiBmXG4gICAqICAgICAgICAgICAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gYXR0cmlidXRlVmFsdWVFeHByZXNzaW9uQWZ0ZXIoY29kZSkge1xuICAgIGVmZmVjdHMuZXhpdCh0YWdBdHRyaWJ1dGVUeXBlKVxuICAgIHJldHVyblN0YXRlID0gYXR0cmlidXRlQmVmb3JlXG4gICAgcmV0dXJuIGVzV2hpdGVzcGFjZVN0YXJ0KGNvZGUpXG4gIH1cblxuICAvKipcbiAgICogQmVmb3JlIHF1b3RlZCBsaXRlcmFsIGF0dHJpYnV0ZSB2YWx1ZS5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IGEgPGIgYz1cImRcIi8+IGVcbiAgICogICAgICAgICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBhdHRyaWJ1dGVWYWx1ZVF1b3RlZFN0YXJ0KGNvZGUpIHtcbiAgICBhc3NlcnQobWFya2VyICE9PSB1bmRlZmluZWQsICdleHBlY3RlZCBgbWFya2VyYCB0byBiZSBkZWZpbmVkJylcblxuICAgIGlmIChjb2RlID09PSBjb2Rlcy5lb2YpIHtcbiAgICAgIGNyYXNoKFxuICAgICAgICBjb2RlLFxuICAgICAgICAnaW4gYXR0cmlidXRlIHZhbHVlJyxcbiAgICAgICAgJ2EgY29ycmVzcG9uZGluZyBjbG9zaW5nIHF1b3RlIGAnICsgU3RyaW5nLmZyb21Db2RlUG9pbnQobWFya2VyKSArICdgJ1xuICAgICAgKVxuICAgIH1cblxuICAgIGlmIChjb2RlID09PSBtYXJrZXIpIHtcbiAgICAgIGVmZmVjdHMuZW50ZXIodGFnQXR0cmlidXRlVmFsdWVMaXRlcmFsTWFya2VyVHlwZSlcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgZWZmZWN0cy5leGl0KHRhZ0F0dHJpYnV0ZVZhbHVlTGl0ZXJhbE1hcmtlclR5cGUpXG4gICAgICBlZmZlY3RzLmV4aXQodGFnQXR0cmlidXRlVmFsdWVMaXRlcmFsVHlwZSlcbiAgICAgIGVmZmVjdHMuZXhpdCh0YWdBdHRyaWJ1dGVUeXBlKVxuICAgICAgbWFya2VyID0gdW5kZWZpbmVkXG4gICAgICByZXR1cm5TdGF0ZSA9IGF0dHJpYnV0ZUJlZm9yZVxuICAgICAgcmV0dXJuIGVzV2hpdGVzcGFjZVN0YXJ0XG4gICAgfVxuXG4gICAgaWYgKG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgcmV0dXJuU3RhdGUgPSBhdHRyaWJ1dGVWYWx1ZVF1b3RlZFN0YXJ0XG4gICAgICByZXR1cm4gZXNXaGl0ZXNwYWNlU3RhcnQoY29kZSlcbiAgICB9XG5cbiAgICBlZmZlY3RzLmVudGVyKHRhZ0F0dHJpYnV0ZVZhbHVlTGl0ZXJhbFZhbHVlVHlwZSlcbiAgICByZXR1cm4gYXR0cmlidXRlVmFsdWVRdW90ZWQoY29kZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBJbiBxdW90ZWQgbGl0ZXJhbCBhdHRyaWJ1dGUgdmFsdWUuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCBhIDxiIGM9XCJkXCIvPiBlXG4gICAqICAgICAgICAgICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIGF0dHJpYnV0ZVZhbHVlUXVvdGVkKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gY29kZXMuZW9mIHx8IGNvZGUgPT09IG1hcmtlciB8fCBtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuZXhpdCh0YWdBdHRyaWJ1dGVWYWx1ZUxpdGVyYWxWYWx1ZVR5cGUpXG4gICAgICByZXR1cm4gYXR0cmlidXRlVmFsdWVRdW90ZWRTdGFydChjb2RlKVxuICAgIH1cblxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIHJldHVybiBhdHRyaWJ1dGVWYWx1ZVF1b3RlZFxuICB9XG5cbiAgLyoqXG4gICAqIEFmdGVyIHNlbGYtY2xvc2luZyBzbGFzaC5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IGEgPGIvPiBjXG4gICAqICAgICAgICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIHNlbGZDbG9zaW5nKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gY29kZXMuZ3JlYXRlclRoYW4pIHtcbiAgICAgIHJldHVybiB0YWdFbmQoY29kZSlcbiAgICB9XG5cbiAgICBjcmFzaChcbiAgICAgIGNvZGUsXG4gICAgICAnYWZ0ZXIgc2VsZi1jbG9zaW5nIHNsYXNoJyxcbiAgICAgICdgPmAgdG8gZW5kIHRoZSB0YWcnICtcbiAgICAgICAgKGNvZGUgPT09IGNvZGVzLmFzdGVyaXNrIHx8IGNvZGUgPT09IGNvZGVzLnNsYXNoXG4gICAgICAgICAgPyAnIChub3RlOiBKUyBjb21tZW50cyBpbiBKU1ggdGFncyBhcmUgbm90IHN1cHBvcnRlZCBpbiBNRFgpJ1xuICAgICAgICAgIDogJycpXG4gICAgKVxuICB9XG5cbiAgLyoqXG4gICAqIEF0IGZpbmFsIGA+YC5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IGEgPGI+IGNcbiAgICogICAgICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiB0YWdFbmQoY29kZSkge1xuICAgIGFzc2VydChjb2RlID09PSBjb2Rlcy5ncmVhdGVyVGhhbiwgJ2V4cGVjdGVkIGA+YCcpXG4gICAgZWZmZWN0cy5lbnRlcih0YWdNYXJrZXJUeXBlKVxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIGVmZmVjdHMuZXhpdCh0YWdNYXJrZXJUeXBlKVxuICAgIGVmZmVjdHMuZXhpdCh0YWdUeXBlKVxuICAgIHJldHVybiBva1xuICB9XG5cbiAgLyoqXG4gICAqIEJlZm9yZSBvcHRpb25hbCBFQ01BU2NyaXB0IHdoaXRlc3BhY2UuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCBhIDxhIGI+IGNcbiAgICogICAgICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBlc1doaXRlc3BhY2VTdGFydChjb2RlKSB7XG4gICAgaWYgKG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgZWZmZWN0cy5lbnRlcih0eXBlcy5saW5lRW5kaW5nKVxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBlZmZlY3RzLmV4aXQodHlwZXMubGluZUVuZGluZylcbiAgICAgIHJldHVybiBlc1doaXRlc3BhY2VFb2xBZnRlclxuICAgIH1cblxuICAgIGlmIChtYXJrZG93blNwYWNlKGNvZGUpIHx8IHVuaWNvZGVXaGl0ZXNwYWNlKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmVudGVyKCdlc1doaXRlc3BhY2UnKVxuICAgICAgcmV0dXJuIGVzV2hpdGVzcGFjZUluc2lkZShjb2RlKVxuICAgIH1cblxuICAgIHJldHVybiByZXR1cm5TdGF0ZShjb2RlKVxuICB9XG5cbiAgLyoqXG4gICAqIEluIEVDTUFTY3JpcHQgd2hpdGVzcGFjZS5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IGEgPGEgIGI+IGNcbiAgICogICAgICAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gZXNXaGl0ZXNwYWNlSW5zaWRlKGNvZGUpIHtcbiAgICBpZiAobWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmV4aXQoJ2VzV2hpdGVzcGFjZScpXG4gICAgICByZXR1cm4gZXNXaGl0ZXNwYWNlU3RhcnQoY29kZSlcbiAgICB9XG5cbiAgICBpZiAobWFya2Rvd25TcGFjZShjb2RlKSB8fCB1bmljb2RlV2hpdGVzcGFjZShjb2RlKSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gZXNXaGl0ZXNwYWNlSW5zaWRlXG4gICAgfVxuXG4gICAgZWZmZWN0cy5leGl0KCdlc1doaXRlc3BhY2UnKVxuICAgIHJldHVybiByZXR1cm5TdGF0ZShjb2RlKVxuICB9XG5cbiAgLyoqXG4gICAqIEFmdGVyIGVvbCBpbiB3aGl0ZXNwYWNlLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgYSA8YVxcbmI+IGNcbiAgICogICAgICAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gZXNXaGl0ZXNwYWNlRW9sQWZ0ZXIoY29kZSkge1xuICAgIC8vIExhenkgY29udGludWF0aW9uIGluIGEgZmxvdyB0YWcgaXMgYSBzeW50YXggZXJyb3IuXG4gICAgaWYgKCFhbGxvd0xhenkgJiYgc2VsZi5wYXJzZXIubGF6eVtzZWxmLm5vdygpLmxpbmVdKSB7XG4gICAgICBjb25zdCBlcnJvciA9IG5ldyBWRmlsZU1lc3NhZ2UoXG4gICAgICAgICdVbmV4cGVjdGVkIGxhenkgbGluZSBpbiBjb250YWluZXIsIGV4cGVjdGVkIGxpbmUgdG8gYmUgcHJlZml4ZWQgd2l0aCBgPmAgd2hlbiBpbiBhIGJsb2NrIHF1b3RlLCB3aGl0ZXNwYWNlIHdoZW4gaW4gYSBsaXN0LCBldGMnLFxuICAgICAgICBzZWxmLm5vdygpLFxuICAgICAgICAnbWljcm9tYXJrLWV4dGVuc2lvbi1tZHgtanN4OnVuZXhwZWN0ZWQtbGF6eSdcbiAgICAgIClcbiAgICAgIGVycm9yLnVybCA9XG4gICAgICAgIHRyb3VibGUgKyAnI3VuZXhwZWN0ZWQtbGF6eS1saW5lLWluLWNvbnRhaW5lci1leHBlY3RlZC1saW5lLXRvLWJlJ1xuICAgICAgdGhyb3cgZXJyb3JcbiAgICB9XG5cbiAgICByZXR1cm4gZXNXaGl0ZXNwYWNlU3RhcnQoY29kZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmFzaCBhdCBhIG5vbmNvbmZvcm1pbmcgY2hhcmFjdGVyLlxuICAgKlxuICAgKiBAcGFyYW0ge0NvZGV9IGNvZGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGF0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBleHBlY3RcbiAgICovXG4gIGZ1bmN0aW9uIGNyYXNoKGNvZGUsIGF0LCBleHBlY3QpIHtcbiAgICBjb25zdCBlcnJvciA9IG5ldyBWRmlsZU1lc3NhZ2UoXG4gICAgICAnVW5leHBlY3RlZCAnICtcbiAgICAgICAgKGNvZGUgPT09IGNvZGVzLmVvZlxuICAgICAgICAgID8gJ2VuZCBvZiBmaWxlJ1xuICAgICAgICAgIDogJ2NoYXJhY3RlciBgJyArXG4gICAgICAgICAgICAoY29kZSA9PT0gY29kZXMuZ3JhdmVBY2NlbnRcbiAgICAgICAgICAgICAgPyAnYCBgIGAnXG4gICAgICAgICAgICAgIDogU3RyaW5nLmZyb21Db2RlUG9pbnQoY29kZSkpICtcbiAgICAgICAgICAgICdgICgnICtcbiAgICAgICAgICAgIHNlcmlhbGl6ZUNoYXJDb2RlKGNvZGUpICtcbiAgICAgICAgICAgICcpJykgK1xuICAgICAgICAnICcgK1xuICAgICAgICBhdCArXG4gICAgICAgICcsIGV4cGVjdGVkICcgK1xuICAgICAgICBleHBlY3QsXG4gICAgICBzZWxmLm5vdygpLFxuICAgICAgJ21pY3JvbWFyay1leHRlbnNpb24tbWR4LWpzeDp1bmV4cGVjdGVkLScgK1xuICAgICAgICAoY29kZSA9PT0gY29kZXMuZW9mID8gJ2VvZicgOiAnY2hhcmFjdGVyJylcbiAgICApXG4gICAgZXJyb3IudXJsID1cbiAgICAgIHRyb3VibGUgK1xuICAgICAgKGNvZGUgPT09IGNvZGVzLmVvZlxuICAgICAgICA/ICcjdW5leHBlY3RlZC1lbmQtb2YtZmlsZS1hdC1leHBlY3RlZC1leHBlY3QnXG4gICAgICAgIDogJyN1bmV4cGVjdGVkLWNoYXJhY3Rlci1hdC1leHBlY3RlZC1leHBlY3QnKVxuICAgIHRocm93IGVycm9yXG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge05vbk51bGxhYmxlPENvZGU+fSBjb2RlXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBzZXJpYWxpemVDaGFyQ29kZShjb2RlKSB7XG4gIHJldHVybiAoXG4gICAgJ1UrJyArXG4gICAgY29kZVxuICAgICAgLnRvU3RyaW5nKGNvbnN0YW50cy5udW1lcmljQmFzZUhleGFkZWNpbWFsKVxuICAgICAgLnRvVXBwZXJDYXNlKClcbiAgICAgIC5wYWRTdGFydCg0LCAnMCcpXG4gIClcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.0/node_modules/micromark-extension-mdx-jsx/dev/lib/factory-tag.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.0/node_modules/micromark-extension-mdx-jsx/dev/lib/jsx-flow.js":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.0/node_modules/micromark-extension-mdx-jsx/dev/lib/jsx-flow.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   jsxFlow: () => (/* binding */ jsxFlow)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(rsc)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-character */ \"(rsc)/./node_modules/.pnpm/micromark-util-character@2.1.0/node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_factory_space__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-factory-space */ \"(rsc)/./node_modules/.pnpm/micromark-factory-space@2.0.0/node_modules/micromark-factory-space/dev/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/./node_modules/.pnpm/micromark-util-symbol@2.0.0/node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/./node_modules/.pnpm/micromark-util-symbol@2.0.0/node_modules/micromark-util-symbol/lib/types.js\");\n/* harmony import */ var _factory_tag_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./factory-tag.js */ \"(rsc)/./node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.0/node_modules/micromark-extension-mdx-jsx/dev/lib/factory-tag.js\");\n/**\n * @typedef {import('micromark-factory-mdx-expression').Acorn} Acorn\n * @typedef {import('micromark-factory-mdx-expression').AcornOptions} AcornOptions\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {AcornOptions | undefined} acornOptions\n *   Acorn options.\n * @property {boolean | undefined} addResult\n *   Whether to add `estree` fields to tokens with results from acorn.\n */\n\n\n\n\n\n\n\n/**\n * Parse JSX (flow).\n *\n * @param {Acorn | undefined} acorn\n *   Acorn parser to use (optional).\n * @param {Options} options\n *   Configuration.\n * @returns {Construct}\n *   Construct.\n */\nfunction jsxFlow(acorn, options) {\n  return {name: 'mdxJsxFlowTag', tokenize: tokenizeJsxFlow, concrete: true}\n\n  /**\n   * MDX JSX (flow).\n   *\n   * ```markdown\n   * > | <A />\n   *     ^^^^^\n   * ```\n   *\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeJsxFlow(effects, ok, nok) {\n    const self = this\n\n    return start\n\n    /**\n     * Start of MDX: JSX (flow).\n     *\n     * ```markdown\n     * > | <A />\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // To do: in `markdown-rs`, constructs need to parse the indent themselves.\n      // This should also be introduced in `micromark-js`.\n      ;(0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.lessThan, 'expected `<`')\n      return before(code)\n    }\n\n    /**\n     * After optional whitespace, before of MDX JSX (flow).\n     *\n     * ```markdown\n     * > | <A />\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function before(code) {\n      return _factory_tag_js__WEBPACK_IMPORTED_MODULE_2__.factoryTag.call(\n        self,\n        effects,\n        after,\n        nok,\n        acorn,\n        options.acornOptions,\n        options.addResult,\n        false,\n        'mdxJsxFlowTag',\n        'mdxJsxFlowTagMarker',\n        'mdxJsxFlowTagClosingMarker',\n        'mdxJsxFlowTagSelfClosingMarker',\n        'mdxJsxFlowTagName',\n        'mdxJsxFlowTagNamePrimary',\n        'mdxJsxFlowTagNameMemberMarker',\n        'mdxJsxFlowTagNameMember',\n        'mdxJsxFlowTagNamePrefixMarker',\n        'mdxJsxFlowTagNameLocal',\n        'mdxJsxFlowTagExpressionAttribute',\n        'mdxJsxFlowTagExpressionAttributeMarker',\n        'mdxJsxFlowTagExpressionAttributeValue',\n        'mdxJsxFlowTagAttribute',\n        'mdxJsxFlowTagAttributeName',\n        'mdxJsxFlowTagAttributeNamePrimary',\n        'mdxJsxFlowTagAttributeNamePrefixMarker',\n        'mdxJsxFlowTagAttributeNameLocal',\n        'mdxJsxFlowTagAttributeInitializerMarker',\n        'mdxJsxFlowTagAttributeValueLiteral',\n        'mdxJsxFlowTagAttributeValueLiteralMarker',\n        'mdxJsxFlowTagAttributeValueLiteralValue',\n        'mdxJsxFlowTagAttributeValueExpression',\n        'mdxJsxFlowTagAttributeValueExpressionMarker',\n        'mdxJsxFlowTagAttributeValueExpressionValue'\n      )(code)\n    }\n\n    /**\n     * After an MDX JSX (flow) tag.\n     *\n     * ```markdown\n     * > | <A>\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function after(code) {\n      return (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownSpace)(code)\n        ? (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_4__.factorySpace)(effects, end, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__.types.whitespace)(code)\n        : end(code)\n    }\n\n    /**\n     * After an MDX JSX (flow) tag, after optional whitespace.\n     *\n     * ```markdown\n     * > | <A> <B>\n     *         ^\n     * ```\n     *\n     * @type {State}\n     */\n    function end(code) {\n      // We want to allow expressions directly after tags.\n      // See <https://github.com/micromark/micromark-extension-mdx-expression/blob/d5d92b9/packages/micromark-extension-mdx-expression/dev/lib/syntax.js#L183>\n      // for more info.\n      const leftBraceValue = self.parser.constructs.flow[micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftCurlyBrace]\n      /* c8 ignore next 5 -- always a list when normalized. */\n      const constructs = Array.isArray(leftBraceValue)\n        ? leftBraceValue\n        : leftBraceValue\n        ? [leftBraceValue]\n        : []\n      const expression = constructs.find((d) => d.name === 'mdxFlowExpression')\n\n      // Another tag.\n      return code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.lessThan\n        ? // We can’t just say: fine. Lines of blocks have to be parsed until an eol/eof.\n          start(code)\n        : code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftCurlyBrace && expression\n        ? effects.attempt(expression, end, nok)(code)\n        : code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code)\n        ? ok(code)\n        : nok(code)\n    }\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrLWV4dGVuc2lvbi1tZHgtanN4QDMuMC4wL25vZGVfbW9kdWxlcy9taWNyb21hcmstZXh0ZW5zaW9uLW1keC1qc3gvZGV2L2xpYi9qc3gtZmxvdy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7QUFDQSxhQUFhLGtEQUFrRDtBQUMvRCxhQUFhLHlEQUF5RDtBQUN0RSxhQUFhLDBDQUEwQztBQUN2RCxhQUFhLHNDQUFzQztBQUNuRCxhQUFhLGdEQUFnRDtBQUM3RCxhQUFhLDBDQUEwQztBQUN2RDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLDBCQUEwQjtBQUN4QztBQUNBLGNBQWMscUJBQXFCO0FBQ25DO0FBQ0E7O0FBRW1DO0FBQ3VDO0FBQ3RCO0FBQ0Y7QUFDUDs7QUFFM0M7QUFDQTtBQUNBO0FBQ0EsV0FBVyxtQkFBbUI7QUFDOUI7QUFDQSxXQUFXLFNBQVM7QUFDcEI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNPO0FBQ1AsVUFBVTs7QUFFVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaLFlBQVk7QUFDWjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sMkNBQU0sVUFBVSx3REFBSztBQUMzQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBLGFBQWEsdURBQVU7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQSxhQUFhLHVFQUFhO0FBQzFCLFVBQVUscUVBQVksZUFBZSx3REFBSztBQUMxQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RCx3REFBSztBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHNCQUFzQix3REFBSztBQUMzQjtBQUNBO0FBQ0EsbUJBQW1CLHdEQUFLO0FBQ3hCO0FBQ0EsbUJBQW1CLHdEQUFLLFFBQVEsNEVBQWtCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYm1fMjAyNC8uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmstZXh0ZW5zaW9uLW1keC1qc3hAMy4wLjAvbm9kZV9tb2R1bGVzL21pY3JvbWFyay1leHRlbnNpb24tbWR4LWpzeC9kZXYvbGliL2pzeC1mbG93LmpzPzgwOWUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstZmFjdG9yeS1tZHgtZXhwcmVzc2lvbicpLkFjb3JufSBBY29yblxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLWZhY3RvcnktbWR4LWV4cHJlc3Npb24nKS5BY29ybk9wdGlvbnN9IEFjb3JuT3B0aW9uc1xuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Db25zdHJ1Y3R9IENvbnN0cnVjdFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5TdGF0ZX0gU3RhdGVcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuVG9rZW5pemVDb250ZXh0fSBUb2tlbml6ZUNvbnRleHRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuVG9rZW5pemVyfSBUb2tlbml6ZXJcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIE9wdGlvbnNcbiAqICAgQ29uZmlndXJhdGlvbi5cbiAqIEBwcm9wZXJ0eSB7QWNvcm5PcHRpb25zIHwgdW5kZWZpbmVkfSBhY29ybk9wdGlvbnNcbiAqICAgQWNvcm4gb3B0aW9ucy5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbiB8IHVuZGVmaW5lZH0gYWRkUmVzdWx0XG4gKiAgIFdoZXRoZXIgdG8gYWRkIGBlc3RyZWVgIGZpZWxkcyB0byB0b2tlbnMgd2l0aCByZXN1bHRzIGZyb20gYWNvcm4uXG4gKi9cblxuaW1wb3J0IHtvayBhcyBhc3NlcnR9IGZyb20gJ2RldmxvcCdcbmltcG9ydCB7bWFya2Rvd25MaW5lRW5kaW5nLCBtYXJrZG93blNwYWNlfSBmcm9tICdtaWNyb21hcmstdXRpbC1jaGFyYWN0ZXInXG5pbXBvcnQge2ZhY3RvcnlTcGFjZX0gZnJvbSAnbWljcm9tYXJrLWZhY3Rvcnktc3BhY2UnXG5pbXBvcnQge2NvZGVzLCB0eXBlc30gZnJvbSAnbWljcm9tYXJrLXV0aWwtc3ltYm9sJ1xuaW1wb3J0IHtmYWN0b3J5VGFnfSBmcm9tICcuL2ZhY3RvcnktdGFnLmpzJ1xuXG4vKipcbiAqIFBhcnNlIEpTWCAoZmxvdykuXG4gKlxuICogQHBhcmFtIHtBY29ybiB8IHVuZGVmaW5lZH0gYWNvcm5cbiAqICAgQWNvcm4gcGFyc2VyIHRvIHVzZSAob3B0aW9uYWwpLlxuICogQHBhcmFtIHtPcHRpb25zfSBvcHRpb25zXG4gKiAgIENvbmZpZ3VyYXRpb24uXG4gKiBAcmV0dXJucyB7Q29uc3RydWN0fVxuICogICBDb25zdHJ1Y3QuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBqc3hGbG93KGFjb3JuLCBvcHRpb25zKSB7XG4gIHJldHVybiB7bmFtZTogJ21keEpzeEZsb3dUYWcnLCB0b2tlbml6ZTogdG9rZW5pemVKc3hGbG93LCBjb25jcmV0ZTogdHJ1ZX1cblxuICAvKipcbiAgICogTURYIEpTWCAoZmxvdykuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCA8QSAvPlxuICAgKiAgICAgXl5eXl5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0aGlzIHtUb2tlbml6ZUNvbnRleHR9XG4gICAqIEB0eXBlIHtUb2tlbml6ZXJ9XG4gICAqL1xuICBmdW5jdGlvbiB0b2tlbml6ZUpzeEZsb3coZWZmZWN0cywgb2ssIG5vaykge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzXG5cbiAgICByZXR1cm4gc3RhcnRcblxuICAgIC8qKlxuICAgICAqIFN0YXJ0IG9mIE1EWDogSlNYIChmbG93KS5cbiAgICAgKlxuICAgICAqIGBgYG1hcmtkb3duXG4gICAgICogPiB8IDxBIC8+XG4gICAgICogICAgIF5cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEB0eXBlIHtTdGF0ZX1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgICAvLyBUbyBkbzogaW4gYG1hcmtkb3duLXJzYCwgY29uc3RydWN0cyBuZWVkIHRvIHBhcnNlIHRoZSBpbmRlbnQgdGhlbXNlbHZlcy5cbiAgICAgIC8vIFRoaXMgc2hvdWxkIGFsc28gYmUgaW50cm9kdWNlZCBpbiBgbWljcm9tYXJrLWpzYC5cbiAgICAgIGFzc2VydChjb2RlID09PSBjb2Rlcy5sZXNzVGhhbiwgJ2V4cGVjdGVkIGA8YCcpXG4gICAgICByZXR1cm4gYmVmb3JlKGNvZGUpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWZ0ZXIgb3B0aW9uYWwgd2hpdGVzcGFjZSwgYmVmb3JlIG9mIE1EWCBKU1ggKGZsb3cpLlxuICAgICAqXG4gICAgICogYGBgbWFya2Rvd25cbiAgICAgKiA+IHwgPEEgLz5cbiAgICAgKiAgICAgXlxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHR5cGUge1N0YXRlfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJlZm9yZShjb2RlKSB7XG4gICAgICByZXR1cm4gZmFjdG9yeVRhZy5jYWxsKFxuICAgICAgICBzZWxmLFxuICAgICAgICBlZmZlY3RzLFxuICAgICAgICBhZnRlcixcbiAgICAgICAgbm9rLFxuICAgICAgICBhY29ybixcbiAgICAgICAgb3B0aW9ucy5hY29ybk9wdGlvbnMsXG4gICAgICAgIG9wdGlvbnMuYWRkUmVzdWx0LFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgJ21keEpzeEZsb3dUYWcnLFxuICAgICAgICAnbWR4SnN4Rmxvd1RhZ01hcmtlcicsXG4gICAgICAgICdtZHhKc3hGbG93VGFnQ2xvc2luZ01hcmtlcicsXG4gICAgICAgICdtZHhKc3hGbG93VGFnU2VsZkNsb3NpbmdNYXJrZXInLFxuICAgICAgICAnbWR4SnN4Rmxvd1RhZ05hbWUnLFxuICAgICAgICAnbWR4SnN4Rmxvd1RhZ05hbWVQcmltYXJ5JyxcbiAgICAgICAgJ21keEpzeEZsb3dUYWdOYW1lTWVtYmVyTWFya2VyJyxcbiAgICAgICAgJ21keEpzeEZsb3dUYWdOYW1lTWVtYmVyJyxcbiAgICAgICAgJ21keEpzeEZsb3dUYWdOYW1lUHJlZml4TWFya2VyJyxcbiAgICAgICAgJ21keEpzeEZsb3dUYWdOYW1lTG9jYWwnLFxuICAgICAgICAnbWR4SnN4Rmxvd1RhZ0V4cHJlc3Npb25BdHRyaWJ1dGUnLFxuICAgICAgICAnbWR4SnN4Rmxvd1RhZ0V4cHJlc3Npb25BdHRyaWJ1dGVNYXJrZXInLFxuICAgICAgICAnbWR4SnN4Rmxvd1RhZ0V4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZScsXG4gICAgICAgICdtZHhKc3hGbG93VGFnQXR0cmlidXRlJyxcbiAgICAgICAgJ21keEpzeEZsb3dUYWdBdHRyaWJ1dGVOYW1lJyxcbiAgICAgICAgJ21keEpzeEZsb3dUYWdBdHRyaWJ1dGVOYW1lUHJpbWFyeScsXG4gICAgICAgICdtZHhKc3hGbG93VGFnQXR0cmlidXRlTmFtZVByZWZpeE1hcmtlcicsXG4gICAgICAgICdtZHhKc3hGbG93VGFnQXR0cmlidXRlTmFtZUxvY2FsJyxcbiAgICAgICAgJ21keEpzeEZsb3dUYWdBdHRyaWJ1dGVJbml0aWFsaXplck1hcmtlcicsXG4gICAgICAgICdtZHhKc3hGbG93VGFnQXR0cmlidXRlVmFsdWVMaXRlcmFsJyxcbiAgICAgICAgJ21keEpzeEZsb3dUYWdBdHRyaWJ1dGVWYWx1ZUxpdGVyYWxNYXJrZXInLFxuICAgICAgICAnbWR4SnN4Rmxvd1RhZ0F0dHJpYnV0ZVZhbHVlTGl0ZXJhbFZhbHVlJyxcbiAgICAgICAgJ21keEpzeEZsb3dUYWdBdHRyaWJ1dGVWYWx1ZUV4cHJlc3Npb24nLFxuICAgICAgICAnbWR4SnN4Rmxvd1RhZ0F0dHJpYnV0ZVZhbHVlRXhwcmVzc2lvbk1hcmtlcicsXG4gICAgICAgICdtZHhKc3hGbG93VGFnQXR0cmlidXRlVmFsdWVFeHByZXNzaW9uVmFsdWUnXG4gICAgICApKGNvZGUpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWZ0ZXIgYW4gTURYIEpTWCAoZmxvdykgdGFnLlxuICAgICAqXG4gICAgICogYGBgbWFya2Rvd25cbiAgICAgKiA+IHwgPEE+XG4gICAgICogICAgICAgIF5cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEB0eXBlIHtTdGF0ZX1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhZnRlcihjb2RlKSB7XG4gICAgICByZXR1cm4gbWFya2Rvd25TcGFjZShjb2RlKVxuICAgICAgICA/IGZhY3RvcnlTcGFjZShlZmZlY3RzLCBlbmQsIHR5cGVzLndoaXRlc3BhY2UpKGNvZGUpXG4gICAgICAgIDogZW5kKGNvZGUpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWZ0ZXIgYW4gTURYIEpTWCAoZmxvdykgdGFnLCBhZnRlciBvcHRpb25hbCB3aGl0ZXNwYWNlLlxuICAgICAqXG4gICAgICogYGBgbWFya2Rvd25cbiAgICAgKiA+IHwgPEE+IDxCPlxuICAgICAqICAgICAgICAgXlxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHR5cGUge1N0YXRlfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVuZChjb2RlKSB7XG4gICAgICAvLyBXZSB3YW50IHRvIGFsbG93IGV4cHJlc3Npb25zIGRpcmVjdGx5IGFmdGVyIHRhZ3MuXG4gICAgICAvLyBTZWUgPGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb21hcmsvbWljcm9tYXJrLWV4dGVuc2lvbi1tZHgtZXhwcmVzc2lvbi9ibG9iL2Q1ZDkyYjkvcGFja2FnZXMvbWljcm9tYXJrLWV4dGVuc2lvbi1tZHgtZXhwcmVzc2lvbi9kZXYvbGliL3N5bnRheC5qcyNMMTgzPlxuICAgICAgLy8gZm9yIG1vcmUgaW5mby5cbiAgICAgIGNvbnN0IGxlZnRCcmFjZVZhbHVlID0gc2VsZi5wYXJzZXIuY29uc3RydWN0cy5mbG93W2NvZGVzLmxlZnRDdXJseUJyYWNlXVxuICAgICAgLyogYzggaWdub3JlIG5leHQgNSAtLSBhbHdheXMgYSBsaXN0IHdoZW4gbm9ybWFsaXplZC4gKi9cbiAgICAgIGNvbnN0IGNvbnN0cnVjdHMgPSBBcnJheS5pc0FycmF5KGxlZnRCcmFjZVZhbHVlKVxuICAgICAgICA/IGxlZnRCcmFjZVZhbHVlXG4gICAgICAgIDogbGVmdEJyYWNlVmFsdWVcbiAgICAgICAgPyBbbGVmdEJyYWNlVmFsdWVdXG4gICAgICAgIDogW11cbiAgICAgIGNvbnN0IGV4cHJlc3Npb24gPSBjb25zdHJ1Y3RzLmZpbmQoKGQpID0+IGQubmFtZSA9PT0gJ21keEZsb3dFeHByZXNzaW9uJylcblxuICAgICAgLy8gQW5vdGhlciB0YWcuXG4gICAgICByZXR1cm4gY29kZSA9PT0gY29kZXMubGVzc1RoYW5cbiAgICAgICAgPyAvLyBXZSBjYW7igJl0IGp1c3Qgc2F5OiBmaW5lLiBMaW5lcyBvZiBibG9ja3MgaGF2ZSB0byBiZSBwYXJzZWQgdW50aWwgYW4gZW9sL2VvZi5cbiAgICAgICAgICBzdGFydChjb2RlKVxuICAgICAgICA6IGNvZGUgPT09IGNvZGVzLmxlZnRDdXJseUJyYWNlICYmIGV4cHJlc3Npb25cbiAgICAgICAgPyBlZmZlY3RzLmF0dGVtcHQoZXhwcmVzc2lvbiwgZW5kLCBub2spKGNvZGUpXG4gICAgICAgIDogY29kZSA9PT0gY29kZXMuZW9mIHx8IG1hcmtkb3duTGluZUVuZGluZyhjb2RlKVxuICAgICAgICA/IG9rKGNvZGUpXG4gICAgICAgIDogbm9rKGNvZGUpXG4gICAgfVxuICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.0/node_modules/micromark-extension-mdx-jsx/dev/lib/jsx-flow.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.0/node_modules/micromark-extension-mdx-jsx/dev/lib/jsx-text.js":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.0/node_modules/micromark-extension-mdx-jsx/dev/lib/jsx-text.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   jsxText: () => (/* binding */ jsxText)\n/* harmony export */ });\n/* harmony import */ var _factory_tag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./factory-tag.js */ \"(rsc)/./node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.0/node_modules/micromark-extension-mdx-jsx/dev/lib/factory-tag.js\");\n/**\n * @typedef {import('micromark-factory-mdx-expression').Acorn} Acorn\n * @typedef {import('micromark-factory-mdx-expression').AcornOptions} AcornOptions\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {AcornOptions | undefined} acornOptions\n *   Acorn options.\n * @property {boolean | undefined} addResult\n *   Whether to add `estree` fields to tokens with results from acorn.\n */\n\n\n\n/**\n * Parse JSX (text).\n *\n * @param {Acorn | undefined} acorn\n *   Acorn parser to use (optional).\n * @param {Options} options\n *   Configuration.\n * @returns {Construct}\n *   Construct.\n */\nfunction jsxText(acorn, options) {\n  return {name: 'mdxJsxTextTag', tokenize: tokenizeJsxText}\n\n  /**\n   * MDX JSX (text).\n   *\n   * ```markdown\n   * > | a <b />.\n   *       ^^^^^\n   * ```\n   *\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeJsxText(effects, ok, nok) {\n    return _factory_tag_js__WEBPACK_IMPORTED_MODULE_0__.factoryTag.call(\n      this,\n      effects,\n      ok,\n      nok,\n      acorn,\n      options.acornOptions,\n      options.addResult,\n      true,\n      'mdxJsxTextTag',\n      'mdxJsxTextTagMarker',\n      'mdxJsxTextTagClosingMarker',\n      'mdxJsxTextTagSelfClosingMarker',\n      'mdxJsxTextTagName',\n      'mdxJsxTextTagNamePrimary',\n      'mdxJsxTextTagNameMemberMarker',\n      'mdxJsxTextTagNameMember',\n      'mdxJsxTextTagNamePrefixMarker',\n      'mdxJsxTextTagNameLocal',\n      'mdxJsxTextTagExpressionAttribute',\n      'mdxJsxTextTagExpressionAttributeMarker',\n      'mdxJsxTextTagExpressionAttributeValue',\n      'mdxJsxTextTagAttribute',\n      'mdxJsxTextTagAttributeName',\n      'mdxJsxTextTagAttributeNamePrimary',\n      'mdxJsxTextTagAttributeNamePrefixMarker',\n      'mdxJsxTextTagAttributeNameLocal',\n      'mdxJsxTextTagAttributeInitializerMarker',\n      'mdxJsxTextTagAttributeValueLiteral',\n      'mdxJsxTextTagAttributeValueLiteralMarker',\n      'mdxJsxTextTagAttributeValueLiteralValue',\n      'mdxJsxTextTagAttributeValueExpression',\n      'mdxJsxTextTagAttributeValueExpressionMarker',\n      'mdxJsxTextTagAttributeValueExpressionValue'\n    )\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrLWV4dGVuc2lvbi1tZHgtanN4QDMuMC4wL25vZGVfbW9kdWxlcy9taWNyb21hcmstZXh0ZW5zaW9uLW1keC1qc3gvZGV2L2xpYi9qc3gtdGV4dC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0EsYUFBYSxrREFBa0Q7QUFDL0QsYUFBYSx5REFBeUQ7QUFDdEUsYUFBYSwwQ0FBMEM7QUFDdkQsYUFBYSxnREFBZ0Q7QUFDN0QsYUFBYSwwQ0FBMEM7QUFDdkQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsY0FBYywwQkFBMEI7QUFDeEM7QUFDQSxjQUFjLHFCQUFxQjtBQUNuQztBQUNBOztBQUUyQzs7QUFFM0M7QUFDQTtBQUNBO0FBQ0EsV0FBVyxtQkFBbUI7QUFDOUI7QUFDQSxXQUFXLFNBQVM7QUFDcEI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNPO0FBQ1AsVUFBVTs7QUFFVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaLFlBQVk7QUFDWjtBQUNBO0FBQ0EsV0FBVyx1REFBVTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYm1fMjAyNC8uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmstZXh0ZW5zaW9uLW1keC1qc3hAMy4wLjAvbm9kZV9tb2R1bGVzL21pY3JvbWFyay1leHRlbnNpb24tbWR4LWpzeC9kZXYvbGliL2pzeC10ZXh0LmpzP2EzMzAiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstZmFjdG9yeS1tZHgtZXhwcmVzc2lvbicpLkFjb3JufSBBY29yblxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLWZhY3RvcnktbWR4LWV4cHJlc3Npb24nKS5BY29ybk9wdGlvbnN9IEFjb3JuT3B0aW9uc1xuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Db25zdHJ1Y3R9IENvbnN0cnVjdFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Ub2tlbml6ZUNvbnRleHR9IFRva2VuaXplQ29udGV4dFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Ub2tlbml6ZXJ9IFRva2VuaXplclxuICovXG5cbi8qKlxuICogQHR5cGVkZWYgT3B0aW9uc1xuICogICBDb25maWd1cmF0aW9uLlxuICogQHByb3BlcnR5IHtBY29ybk9wdGlvbnMgfCB1bmRlZmluZWR9IGFjb3JuT3B0aW9uc1xuICogICBBY29ybiBvcHRpb25zLlxuICogQHByb3BlcnR5IHtib29sZWFuIHwgdW5kZWZpbmVkfSBhZGRSZXN1bHRcbiAqICAgV2hldGhlciB0byBhZGQgYGVzdHJlZWAgZmllbGRzIHRvIHRva2VucyB3aXRoIHJlc3VsdHMgZnJvbSBhY29ybi5cbiAqL1xuXG5pbXBvcnQge2ZhY3RvcnlUYWd9IGZyb20gJy4vZmFjdG9yeS10YWcuanMnXG5cbi8qKlxuICogUGFyc2UgSlNYICh0ZXh0KS5cbiAqXG4gKiBAcGFyYW0ge0Fjb3JuIHwgdW5kZWZpbmVkfSBhY29yblxuICogICBBY29ybiBwYXJzZXIgdG8gdXNlIChvcHRpb25hbCkuXG4gKiBAcGFyYW0ge09wdGlvbnN9IG9wdGlvbnNcbiAqICAgQ29uZmlndXJhdGlvbi5cbiAqIEByZXR1cm5zIHtDb25zdHJ1Y3R9XG4gKiAgIENvbnN0cnVjdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGpzeFRleHQoYWNvcm4sIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHtuYW1lOiAnbWR4SnN4VGV4dFRhZycsIHRva2VuaXplOiB0b2tlbml6ZUpzeFRleHR9XG5cbiAgLyoqXG4gICAqIE1EWCBKU1ggKHRleHQpLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgYSA8YiAvPi5cbiAgICogICAgICAgXl5eXl5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0aGlzIHtUb2tlbml6ZUNvbnRleHR9XG4gICAqIEB0eXBlIHtUb2tlbml6ZXJ9XG4gICAqL1xuICBmdW5jdGlvbiB0b2tlbml6ZUpzeFRleHQoZWZmZWN0cywgb2ssIG5vaykge1xuICAgIHJldHVybiBmYWN0b3J5VGFnLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgZWZmZWN0cyxcbiAgICAgIG9rLFxuICAgICAgbm9rLFxuICAgICAgYWNvcm4sXG4gICAgICBvcHRpb25zLmFjb3JuT3B0aW9ucyxcbiAgICAgIG9wdGlvbnMuYWRkUmVzdWx0LFxuICAgICAgdHJ1ZSxcbiAgICAgICdtZHhKc3hUZXh0VGFnJyxcbiAgICAgICdtZHhKc3hUZXh0VGFnTWFya2VyJyxcbiAgICAgICdtZHhKc3hUZXh0VGFnQ2xvc2luZ01hcmtlcicsXG4gICAgICAnbWR4SnN4VGV4dFRhZ1NlbGZDbG9zaW5nTWFya2VyJyxcbiAgICAgICdtZHhKc3hUZXh0VGFnTmFtZScsXG4gICAgICAnbWR4SnN4VGV4dFRhZ05hbWVQcmltYXJ5JyxcbiAgICAgICdtZHhKc3hUZXh0VGFnTmFtZU1lbWJlck1hcmtlcicsXG4gICAgICAnbWR4SnN4VGV4dFRhZ05hbWVNZW1iZXInLFxuICAgICAgJ21keEpzeFRleHRUYWdOYW1lUHJlZml4TWFya2VyJyxcbiAgICAgICdtZHhKc3hUZXh0VGFnTmFtZUxvY2FsJyxcbiAgICAgICdtZHhKc3hUZXh0VGFnRXhwcmVzc2lvbkF0dHJpYnV0ZScsXG4gICAgICAnbWR4SnN4VGV4dFRhZ0V4cHJlc3Npb25BdHRyaWJ1dGVNYXJrZXInLFxuICAgICAgJ21keEpzeFRleHRUYWdFeHByZXNzaW9uQXR0cmlidXRlVmFsdWUnLFxuICAgICAgJ21keEpzeFRleHRUYWdBdHRyaWJ1dGUnLFxuICAgICAgJ21keEpzeFRleHRUYWdBdHRyaWJ1dGVOYW1lJyxcbiAgICAgICdtZHhKc3hUZXh0VGFnQXR0cmlidXRlTmFtZVByaW1hcnknLFxuICAgICAgJ21keEpzeFRleHRUYWdBdHRyaWJ1dGVOYW1lUHJlZml4TWFya2VyJyxcbiAgICAgICdtZHhKc3hUZXh0VGFnQXR0cmlidXRlTmFtZUxvY2FsJyxcbiAgICAgICdtZHhKc3hUZXh0VGFnQXR0cmlidXRlSW5pdGlhbGl6ZXJNYXJrZXInLFxuICAgICAgJ21keEpzeFRleHRUYWdBdHRyaWJ1dGVWYWx1ZUxpdGVyYWwnLFxuICAgICAgJ21keEpzeFRleHRUYWdBdHRyaWJ1dGVWYWx1ZUxpdGVyYWxNYXJrZXInLFxuICAgICAgJ21keEpzeFRleHRUYWdBdHRyaWJ1dGVWYWx1ZUxpdGVyYWxWYWx1ZScsXG4gICAgICAnbWR4SnN4VGV4dFRhZ0F0dHJpYnV0ZVZhbHVlRXhwcmVzc2lvbicsXG4gICAgICAnbWR4SnN4VGV4dFRhZ0F0dHJpYnV0ZVZhbHVlRXhwcmVzc2lvbk1hcmtlcicsXG4gICAgICAnbWR4SnN4VGV4dFRhZ0F0dHJpYnV0ZVZhbHVlRXhwcmVzc2lvblZhbHVlJ1xuICAgIClcbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.0/node_modules/micromark-extension-mdx-jsx/dev/lib/jsx-text.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.0/node_modules/micromark-extension-mdx-jsx/dev/lib/syntax.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.0/node_modules/micromark-extension-mdx-jsx/dev/lib/syntax.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mdxJsx: () => (/* binding */ mdxJsx)\n/* harmony export */ });\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/./node_modules/.pnpm/micromark-util-symbol@2.0.0/node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var _jsx_text_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./jsx-text.js */ \"(rsc)/./node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.0/node_modules/micromark-extension-mdx-jsx/dev/lib/jsx-text.js\");\n/* harmony import */ var _jsx_flow_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./jsx-flow.js */ \"(rsc)/./node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.0/node_modules/micromark-extension-mdx-jsx/dev/lib/jsx-flow.js\");\n/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-factory-mdx-expression').Acorn} Acorn\n * @typedef {import('micromark-factory-mdx-expression').AcornOptions} AcornOptions\n */\n\n/**\n * @typedef Options\n *   Configuration (optional).\n * @property {Acorn | null | undefined} [acorn]\n *   Acorn parser to use (optional).\n * @property {AcornOptions | null | undefined} [acornOptions]\n *   Configuration for acorn (default: `{ecmaVersion: 2024, locations: true,\n *   sourceType: 'module'}`); all fields except `locations` can be set.\n * @property {boolean | null | undefined} [addResult=false]\n *   Whether to add `estree` fields to tokens with results from acorn\n *   (default: `false`).\n */\n\n\n\n\n\n/**\n * Create an extension for `micromark` to enable MDX JSX syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable MDX\n *   JSX syntax.\n */\nfunction mdxJsx(options) {\n  const settings = options || {}\n  const acorn = settings.acorn\n  /** @type {AcornOptions | undefined} */\n  let acornOptions\n\n  if (acorn) {\n    if (!acorn.parse || !acorn.parseExpressionAt) {\n      throw new Error(\n        'Expected a proper `acorn` instance passed in as `options.acorn`'\n      )\n    }\n\n    acornOptions = Object.assign(\n      {ecmaVersion: 2024, sourceType: 'module'},\n      settings.acornOptions,\n      {locations: true}\n    )\n  } else if (settings.acornOptions || settings.addResult) {\n    throw new Error('Expected an `acorn` instance passed in as `options.acorn`')\n  }\n\n  return {\n    flow: {\n      [micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.lessThan]: (0,_jsx_flow_js__WEBPACK_IMPORTED_MODULE_1__.jsxFlow)(acorn || undefined, {\n        acornOptions,\n        addResult: settings.addResult || undefined\n      })\n    },\n    text: {\n      [micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.lessThan]: (0,_jsx_text_js__WEBPACK_IMPORTED_MODULE_2__.jsxText)(acorn || undefined, {\n        acornOptions,\n        addResult: settings.addResult || undefined\n      })\n    }\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrLWV4dGVuc2lvbi1tZHgtanN4QDMuMC4wL25vZGVfbW9kdWxlcy9taWNyb21hcmstZXh0ZW5zaW9uLW1keC1qc3gvZGV2L2xpYi9zeW50YXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0EsYUFBYSwwQ0FBMEM7QUFDdkQsYUFBYSxrREFBa0Q7QUFDL0QsYUFBYSx5REFBeUQ7QUFDdEU7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsY0FBYywwQkFBMEI7QUFDeEM7QUFDQSxjQUFjLGlDQUFpQztBQUMvQyx5Q0FBeUM7QUFDekMsMEJBQTBCLElBQUk7QUFDOUIsY0FBYyw0QkFBNEI7QUFDMUM7QUFDQTtBQUNBOztBQUUyQztBQUNOO0FBQ0E7O0FBRXJDO0FBQ0E7QUFDQTtBQUNBLFdBQVcsNEJBQTRCO0FBQ3ZDO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBLGFBQWEsMEJBQTBCO0FBQ3ZDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE9BQU8sd0NBQXdDO0FBQy9DO0FBQ0EsT0FBTztBQUNQO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU8sd0RBQUssWUFBWSxxREFBTztBQUMvQjtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBLE9BQU8sd0RBQUssWUFBWSxxREFBTztBQUMvQjtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2NibV8yMDI0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFyay1leHRlbnNpb24tbWR4LWpzeEAzLjAuMC9ub2RlX21vZHVsZXMvbWljcm9tYXJrLWV4dGVuc2lvbi1tZHgtanN4L2Rldi9saWIvc3ludGF4LmpzPzhmMDEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLkV4dGVuc2lvbn0gRXh0ZW5zaW9uXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstZmFjdG9yeS1tZHgtZXhwcmVzc2lvbicpLkFjb3JufSBBY29yblxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLWZhY3RvcnktbWR4LWV4cHJlc3Npb24nKS5BY29ybk9wdGlvbnN9IEFjb3JuT3B0aW9uc1xuICovXG5cbi8qKlxuICogQHR5cGVkZWYgT3B0aW9uc1xuICogICBDb25maWd1cmF0aW9uIChvcHRpb25hbCkuXG4gKiBAcHJvcGVydHkge0Fjb3JuIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2Fjb3JuXVxuICogICBBY29ybiBwYXJzZXIgdG8gdXNlIChvcHRpb25hbCkuXG4gKiBAcHJvcGVydHkge0Fjb3JuT3B0aW9ucyB8IG51bGwgfCB1bmRlZmluZWR9IFthY29ybk9wdGlvbnNdXG4gKiAgIENvbmZpZ3VyYXRpb24gZm9yIGFjb3JuIChkZWZhdWx0OiBge2VjbWFWZXJzaW9uOiAyMDI0LCBsb2NhdGlvbnM6IHRydWUsXG4gKiAgIHNvdXJjZVR5cGU6ICdtb2R1bGUnfWApOyBhbGwgZmllbGRzIGV4Y2VwdCBgbG9jYXRpb25zYCBjYW4gYmUgc2V0LlxuICogQHByb3BlcnR5IHtib29sZWFuIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2FkZFJlc3VsdD1mYWxzZV1cbiAqICAgV2hldGhlciB0byBhZGQgYGVzdHJlZWAgZmllbGRzIHRvIHRva2VucyB3aXRoIHJlc3VsdHMgZnJvbSBhY29yblxuICogICAoZGVmYXVsdDogYGZhbHNlYCkuXG4gKi9cblxuaW1wb3J0IHtjb2Rlc30gZnJvbSAnbWljcm9tYXJrLXV0aWwtc3ltYm9sJ1xuaW1wb3J0IHtqc3hUZXh0fSBmcm9tICcuL2pzeC10ZXh0LmpzJ1xuaW1wb3J0IHtqc3hGbG93fSBmcm9tICcuL2pzeC1mbG93LmpzJ1xuXG4vKipcbiAqIENyZWF0ZSBhbiBleHRlbnNpb24gZm9yIGBtaWNyb21hcmtgIHRvIGVuYWJsZSBNRFggSlNYIHN5bnRheC5cbiAqXG4gKiBAcGFyYW0ge09wdGlvbnMgfCBudWxsIHwgdW5kZWZpbmVkfSBbb3B0aW9uc11cbiAqICAgQ29uZmlndXJhdGlvbiAob3B0aW9uYWwpLlxuICogQHJldHVybnMge0V4dGVuc2lvbn1cbiAqICAgRXh0ZW5zaW9uIGZvciBgbWljcm9tYXJrYCB0aGF0IGNhbiBiZSBwYXNzZWQgaW4gYGV4dGVuc2lvbnNgIHRvIGVuYWJsZSBNRFhcbiAqICAgSlNYIHN5bnRheC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1keEpzeChvcHRpb25zKSB7XG4gIGNvbnN0IHNldHRpbmdzID0gb3B0aW9ucyB8fCB7fVxuICBjb25zdCBhY29ybiA9IHNldHRpbmdzLmFjb3JuXG4gIC8qKiBAdHlwZSB7QWNvcm5PcHRpb25zIHwgdW5kZWZpbmVkfSAqL1xuICBsZXQgYWNvcm5PcHRpb25zXG5cbiAgaWYgKGFjb3JuKSB7XG4gICAgaWYgKCFhY29ybi5wYXJzZSB8fCAhYWNvcm4ucGFyc2VFeHByZXNzaW9uQXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0V4cGVjdGVkIGEgcHJvcGVyIGBhY29ybmAgaW5zdGFuY2UgcGFzc2VkIGluIGFzIGBvcHRpb25zLmFjb3JuYCdcbiAgICAgIClcbiAgICB9XG5cbiAgICBhY29ybk9wdGlvbnMgPSBPYmplY3QuYXNzaWduKFxuICAgICAge2VjbWFWZXJzaW9uOiAyMDI0LCBzb3VyY2VUeXBlOiAnbW9kdWxlJ30sXG4gICAgICBzZXR0aW5ncy5hY29ybk9wdGlvbnMsXG4gICAgICB7bG9jYXRpb25zOiB0cnVlfVxuICAgIClcbiAgfSBlbHNlIGlmIChzZXR0aW5ncy5hY29ybk9wdGlvbnMgfHwgc2V0dGluZ3MuYWRkUmVzdWx0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBhbiBgYWNvcm5gIGluc3RhbmNlIHBhc3NlZCBpbiBhcyBgb3B0aW9ucy5hY29ybmAnKVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBmbG93OiB7XG4gICAgICBbY29kZXMubGVzc1RoYW5dOiBqc3hGbG93KGFjb3JuIHx8IHVuZGVmaW5lZCwge1xuICAgICAgICBhY29ybk9wdGlvbnMsXG4gICAgICAgIGFkZFJlc3VsdDogc2V0dGluZ3MuYWRkUmVzdWx0IHx8IHVuZGVmaW5lZFxuICAgICAgfSlcbiAgICB9LFxuICAgIHRleHQ6IHtcbiAgICAgIFtjb2Rlcy5sZXNzVGhhbl06IGpzeFRleHQoYWNvcm4gfHwgdW5kZWZpbmVkLCB7XG4gICAgICAgIGFjb3JuT3B0aW9ucyxcbiAgICAgICAgYWRkUmVzdWx0OiBzZXR0aW5ncy5hZGRSZXN1bHQgfHwgdW5kZWZpbmVkXG4gICAgICB9KVxuICAgIH1cbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.0/node_modules/micromark-extension-mdx-jsx/dev/lib/syntax.js\n");

/***/ })

};
;